{$DEFINE WL_MM2MS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const SKIP_ZOOM_LEVELS: TIntegerArray = [13, 37, 63, 87];

function TMM2MS.IsZoomLevelValid(ZoomLevel: Int32): Boolean;
begin
  Result := SKIP_ZOOM_LEVELS.Find(ZoomLevel) < 0;
end;

function TMM2MS.GetValidZoomLevel(ZoomLevel: Int32): Int32;
begin
  if Self.IsZoomLevelValid(ZoomLevel) then
    Result := ZoomLevel
  else if SRL.Dice(50) then
    Result := ZoomLevel + 1
  else
    Result := ZoomLevel - 1;
end;


function Minimap.ZoomRadius: Int32;
begin
  if MM2MS.ZoomLevel = -1 then
    MM2MS.ZoomLevel := Options.GetZoomLevel;

  Result := Round(73 - (0.8 * (MM2MS.ZoomLevel + 25)));
end;

function Minimap.PointInZoomRadius(Pt: TPoint): Boolean;
var
  Radius: Int32;
begin
  Radius := Self.ZoomRadius;
  Result := Pt.InCircle([Minimap.Center.X, Minimap.Center.Y, Radius]);
end;

function Minimap.ZoomToPoint(Pt: TPoint): Int32;
var
  Distance: Int32;
begin
  Distance := Round(Pt.DistanceTo(Minimap.Center));

  //- Random(5, 10) to give it some margin
  Result := Round((73 - Distance) / 0.8) - Random(25, 30);
end;


type
  TRSMouseScroll = type Pointer;
{
//Start at 73, 86, 100 True and
//0, 3, 6, 9, 12..14, 16..17, 19..20, 22..23, 25..26, 28..100  False
function TRSMouseScroll.GetStepValue1(StartZoom: Int32; Direction: Boolean): Int32;
begin
  case Direction of
    True: case StartZoom of
            1: Result := -1;
            2: Result := -2;
            3, 5, 11, 12, 18, 19, 25, 26, 28, 29, 35, 42, 43, 49, 52, 55, 62, 69, 76, 79, 82, 93, 96: Result := -3;
            14, 17, 38, 41, 64, 65, 67, 88, 89, 91: Result := -5;
            else Result := -4;
          end;

    False: case StartZoom of
              99: Result := 1;
              1, 5, 7, 9, 10, 14, 29, 98: Result := 2;
              11, 34..36, 60..62, 84..86: Result := 4;
              else Result := 3;
            end;
  end;
end;

//Start at 99 True and
//1..2, 5, 8, 11, 15, 18, 21, 24, 27 False
function TRSMouseScroll.GetStepValue2(StartZoom: Int32; Direction: Boolean): Int32;
begin
  case Direction of
    True: case StartZoom of
            1: Result := -1;
            2: Result := -2;
            3, 10, 21, 24, 27, 34, 41, 48, 51, 54, 61, 68, 75, 78, 81, 92, 95: Result := -3;
            17, 64, 67, 88, 91: Result := -5;
            else Result := -4;
          end;

    False: case StartZoom of
              99: Result := 1;
              1, 5, 24, 27, 98: Result := 2;
              10, 12, 34, 35, 60, 62, 84, 85: Result := 4;
              else Result := 3;
            end;
  end;
end;

//Start at 57, 71, 84, 98 True
function TRSMouseScroll.GetStepValue3(StartZoom: Int32; Direction: Boolean): Int32;
begin
  case Direction of
    True: case StartZoom of
            1: Result := -1;
            2: Result := -2;
            3, 6, 9, 12, 20, 23, 26, 33, 36, 47, 50, 53, 60, 67, 74, 77, 80, 91, 94: Result := -3;
            5, 17: Result := -5;
            else Result := -4;
          end;
  end;
end;

//Start at 83, 97 True
function TRSMouseScroll.GetStepValue4(StartZoom: Int32; Direction: Boolean): Int32;
begin
  case Direction of
    True: case StartZoom of
            1: Result := -1;
            2: Result := -2;
            3, 5, 8, 11, 19, 22, 25, 32, 35, 46, 49, 52, 59, 62, 73, 76, 79, 86, 93: Result := -3;
            16: Result := -5;
            else Result := -4;
          end;
  end;
end;

//Start 4, 7, 10 False
function TRSMouseScroll.GetStepValue5(StartZoom: Int32; Direction: Boolean): Int32;
begin
  case Direction of
    False: case StartZoom of
              99: Result := 1;
              7, 10, 98: Result := 2;
              12, 34, 62, 84: Result := 4;
              else Result := 3;
            end;
  end;
end;

//Start at 96 True
function TRSMouseScroll.GetStepValue6(StartZoom: Int32; Direction: Boolean): Int32;
begin
  case Direction of
    True: case StartZoom of
            1: Result := -1;
            2: Result := -2;
            3, 7, 10, 18, 21, 24, 31, 34, 45, 48, 51, 58, 61, 72, 75, 78, 85, 92: Result := -3;
            15: Result := -5;
            else Result := -4;
          end;
  end;
end;

//Start at 94 True and
function TRSMouseScroll.GetStepValue7(StartZoom: Int32; Direction: Boolean): Int32;
begin
  case Direction of
    True: case StartZoom of
            1: Result := -1;
            2: Result := -2;
            45, 48, 51, 54, 58, 61, 68, 72, 75, 78, 81, 85, 92, 95: Result := -3;
            15, 17, 64, 67, 88, 91: Result := -5;
            else Result := -4;
          end;
  end;
end;



function TRSMouseScroll.SetZoomLevel(Level: Int32): Boolean;
var
  Direction: Boolean;
  ScrollAmount: Int32;
  //pixelshift
  I: int32;
begin
  if MM2MS.ZoomLevel = Level then
    Exit;

  Direction := MM2MS.ZoomLevel > Level;
  Writeln(Direction);
  repeat
    Writeln(MM2MS.ZoomLevel);
    MM2MS.ZoomLevel += Self.GetStepValue6(MM2MS.ZoomLevel, Direction);
    ScrollAmount += 1;
  until (not Direction and (MM2MS.ZoomLevel >= Level) or (Direction and (MM2MS.ZoomLevel <= Level)));

  Writeln();
  for I := 1 to ScrollAmount do
  begin
    Writeln(Options.GetZoomLevel);
    Mouse.Scroll(MainScreen.Bounds, 1, Direction);
  end;

  Result := True;
end;

function TRSMouseScroll.SetZoomLevel2(Level: Int32): Boolean;
var
  Direction: Boolean;
  ScrollAmount: Int32;
  //pixelshift
  I: int32;
begin
  if MM2MS.ZoomLevel = Level then
    Exit;

  Direction := MM2MS.ZoomLevel > Level;
  Writeln(Direction);
  repeat
    Writeln('MM2MS: ', MM2MS.ZoomLevel);
    MM2MS.ZoomLevel += Self.GetStepValue1(MM2MS.ZoomLevel, Direction);
    ScrollAmount += 1;
  until (not Direction and (MM2MS.ZoomLevel >= Level) or (Direction and (MM2MS.ZoomLevel <= Level)));

  Writeln('ScrollAmount: ', ScrollAmount);
  for I := 1 to ScrollAmount do
  begin
    Writeln('I: ', I, ' Options: ', Options.GetZoomLevel);
    Mouse.Scroll(MainScreen.Bounds, 1, Direction);
    //Wait(2000);
  end;

  Result := True;
end;
}
var
  MouseScroll: TRSMouseScroll;

(*
function TRSOptions.SetZoomLevel(Level: Int32): Boolean; override;
begin
  //Level := MM2MS.GetValidZoomLevel(Level);

  Result := Options.SetZoomLevel(Level);

  if Result then
    MM2MS.ZoomLevel := Level;
end;
*)
