(*
Stats
=====
Methods related to wasp-stats.
*)

{$DEFINE WL_STATS_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

(*
type TStatsPayload
~~~~~~~~~~~~~~~~~~

Type to help you handle stats submissions.
*)
type
  TStatsPayload = record
    ScriptID: String;
    Username: String;
    Password: String;
    Experience: Int32;
    Gold: Int32;
    RunTime: Int64;
    Banned: Boolean;
  end;

(*
StatsPayload.Reset
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TStatsPayload.Reset();

Resets StatsPayload. Automatically called by TStatsClient.SubmitStats() on a successful stats submission.
*)
procedure TStatsPayload.Reset();
begin
  Self.Experience := 0;
  Self.Gold := 0;
  Self.RunTime := 0;
end;

(*
StatsPayload.SetUsername
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TStatsPayload.SetUsername(user: String = '');

Sets StatsPayload username if it hasn't been set yet.
*)
procedure TStatsPayload.SetUsername(user: String = '');
begin
  if Self.Username = '' then
    Self.Username := user;
end;

(*
StatsPayload.Setup
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TStatsPayload.Setup(id, pw: String; user: String = '');

Sets StatsPayload up.
  - **id** should be your script id. If the script id is not in waspscripts.com database the submission will be rejected.
  - **pw** should be your account password. Passwordless accounts can exist but then anyone can submit data to them.
    A passwordless account will take in the first ever password submission it gets as it's password and will only accept future data
    if that password is included.
  - **user** sets a wasp-stats username.
*)
procedure TStatsPayload.Setup(id, pw: String; user: String = ''); overload;
begin
  Self.ScriptID := id;
  Self.SetUsername(user);
  Self.Password := pw;
end;



(*
StatsPayload.Update
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TStatsPayload.Update(xp, gp, time: Int32);
.. pascal:: procedure TStatsPayload.Update(ban: Boolean); overload;

Update StatsPayload data for the next submission.
You can update it several times before submitting it, however, keep in mind if the runtime is over 15mins the data will be rejected to
avoid exploitation.
Experience, Gold and Levels also have a limit of how much can be submitted on each request. This limit set by the scripter in waspscripts.com (not implemented yet... currently has some generous limits)

You can set the account as banned for tracking ban rates but it's not fully implemented yet.
If you set an account as banned you won't be able to submit more data to it until you set it as unbanned.
*)
procedure TStatsPayload.Update(xp, gp, time: Int32);
begin
  Self.Experience += xp;
  Self.Gold += gp;
  Self.RunTime += time;
end;

procedure TStatsPayload.Update(ban: Boolean); overload;
begin
  Self.Banned := ban;
end;

(*
StatsPayload.FormData
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TStatsPayload.FormData(): TStringArray;

Transforms the data in TStatsPayload into a TStringArray that can be used by a TStatsClient.
*)
function TStatsPayload.FormData(): TStringArray;
begin
  Result += 'script_id='  + Self.ScriptID;

  if Self.Username <> '' then
    Result += 'username='   + Self.Username;

  if Self.Password <> '' then
    Result += 'password='   + Self.Password;

  Result += 'experience=' + ToStr(Self.Experience);
  Result += 'gold='       + ToStr(Self.Gold);
  Result += 'runtime='    + ToStr(Self.RunTime);
  Result += 'banned='     + ToStr(Self.Banned);
end;

(*
var StatsPayload
~~~~~~~~~~~~~~~~

Global StatsPayload variable.
*)
var
  StatsPayload: TStatsPayload;

(*
type TStatsClient
~~~~~~~~~~~~~~~~~

Type responsible for stats submissions.
This is basically a simba wrapper for the waspscripts API.

You can find the API docs in https://api.waspscripts.com/docs if you need to read them
but the TStatsClient should be able to do everything for you.
*)
type
  TStatsClient = record(TSRLBaseRecord)
    Disabled: Boolean;
    HTTPClient: Int32;
    StatsServer: String;
    Timer: TCountDown;
    TimeStamp: UInt64;
    IsSetup: Boolean;
  end;

(*
StatsClient.Terminate
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TStatsClient.Terminate();

Internal method automatically called on script termination.
*)
procedure TStatsClient.Terminate();
begin
  FreeHTTPClient(Self.HTTPClient);
end;

(*
StatsClient.Setup
~~~~~~~~~~~~~~~~~
.. pascal:: procedure TStatsClient.Setup();

Internal method automatically called when attempting to use TStatsClient.GET() and TStatsClient.POST().
*)
procedure TStatsClient.Setup();
begin
  Self.Name := 'StatsClient';
  Self.HTTPClient := InitializeHTTPClient(False);
  Self.StatsServer := 'https://api.waspscripts.com/';

  AddOnTerminate(@Self.Terminate);

  Self.Timer.Setup(5 * ONE_MINUTE);

  Self.IsSetup := True;
end;


(*
StatsClient.GenerateBioHash
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.GenerateBioHash(biohash: Double = 0): String;

You can pass in an already generated biohash or let it generate it's own.
If you pass in an already generated biohash it is just converted to a string.

The BioHashes are used as the wasp-stats main identifier.
*)
function TStatsClient.GenerateBioHash(biohash: Double = 0): String;
var
  h, i: UInt32;
  k: String;
begin
  if biohash = 0 then
  begin
    if (Length(Login.Players) = 0) then
    begin
      Self.Disabled := True;
      Exit;
    end;

    k := Login.GetPlayer().User;
    h := $811C9DC5;
    for i:=1 to Length(k) do
      h := (h * $1000193) xor Ord(k[i]);

    biohash := h / $FFFFFFFF;
  end;

  Result := ToStr(biohash);

  Self.DebugLn('BioHash: ' + Result);
end;

(*
StatsClient.GeneratePassword
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.GeneratePassword(password: String = ''): String;

Generate a wasp-stats password from the password you pass in or the current user's password.

The generated password is a hash made with SHA1.
This makes the generated password unique and privacy friendly since it can't be reversed.

The generated password is also rehashed and salted by the server before being stored in the database.
For more info on what this means visit the wikipedia! (Sorry, it's out of the scope of this)
https://en.wikipedia.org/wiki/Salt_(cryptography)

What this means is that noone but you is able to know your wasp-stats password and only you can update your stats.
Even in the case of a data breach.
*)
function TStatsClient.GeneratePassword(password: String = ''): String;
begin
  if (Length(Login.Players) = 0) then
    Exit;

  if password = '' then
    password := Login.GetPlayer().Password;

  Result := SHA1String(password);

  Self.DebugLn('Password: ' + Result);
end;


(*
StatsClient.SetLocal
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TStatsClient.SetLocal();

Method only meant to be used if you are hosting a local stats server for debugging purposes.
*)
procedure TStatsClient.SetLocal();
begin
  Self.StatsServer := 'http://localhost:8080/';
end;


(*
StatsClient.GET
~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.GET(route: String): String;

Makes a GET request to the WaspScripts API in the specified **route**.
You probably don't need to use this method directly.
*)
function TStatsClient.GET(route: String): String;
begin
  Result := GetHTTPPage(Self.HTTPClient, Self.StatsServer + route);

  Self.DebugLn(Result);
end;

(*
StatsClient.POST
~~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.POST(route: String; payload: TStringArray): String;

Makes a POST request to the WaspScripts API in the specified **route**.
**payload** is an array of string with the following format:
  ['var1=value1', 'var2=value2', ...]

You probably don't need to use this method directly.
*)
function TStatsClient.POST(route: String; payload: TStringArray): String;
var
  i: Int32;
  finalPayload: String;
begin
  if Self.Disabled then
    Exit;

  for i := 0 to High(payload) do
  begin
    finalPayload += payload[i];

    if i < High(payload) then
      finalPayload += '&';
  end;

  Result := PostHTTPPage(Self.HTTPClient, Self.StatsServer + route, finalPayload);

  Self.DebugLn(Result);
end;


(*
StatsClient.HashPassword
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.HashPassword(password: String): String;

Returns a salted and hashed password.
This serves no purpose other than giving you a glimpse of what is stored in waspscripts database when you submit your password.

Try the example below, notice how everytime you run it you will have slightly different results.
That's the magic of "salting" passwords. You can read more about it on the wikipedia https://en.wikipedia.org/wiki/Salt_(cryptography).

Example
-------

  WriteLn StatsClient.HashPassword('helloworld');
  WriteLn StatsClient.HashPassword(StatsClient.GeneratePassword());
*)
function TStatsClient.HashPassword(password: String): String;
var
  route: String;
  payload: TStringArray;
begin
  route := 'stats/auth/hash/';
  payload += 'password=' + password;

  Result := Self.POST(route, payload);
end;

(*
StatsClient.CheckPassword
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.CheckPassword(bioHash: String; password: String): Boolean;

Simply returns true/false if the **password** you submit matches what is stored in waspscripts stats database for the specified **biohash**.

Example
-------

  WriteLn StatsClient.CheckPassword('0.999999999999999', 'helloworld');
  WriteLn StatsClient.CheckPassword(StatsClient.GenerateBioHash(), StatsClient.GeneratePassword());
*)
function TStatsClient.CheckPassword(bioHash: String; password: String): Boolean;
var
  route, msg: String;
  payload: TStringArray;
begin
  route := 'stats/auth/check/' + bioHash + '/';
  payload += 'password=' + password;

  msg := Self.POST(route, payload);

  Result := msg.Pos('message') = 0; //maybe a bad way to do this?
end;

(*
StatsClient.UpdatePassword
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.UpdatePassword(bioHash: String; password, newPassword: String): Boolean;

Because users passwords can be changed and that's what are used by default for
stats password a way to update the stats password is required.
That's what this method is for.

This will probably be complicated for regular users but an easier way can be
figured out in the future.

Example
-------

  WriteLn StatsClient.UpdatePassword('0.999999999999999', 'helloworld', 'helloworld2');
  WriteLn StatsClient.UpdatePassword(StatsClient.GenerateBioHash(), StatsClient.GeneratePassword('oldpassword'), StatsClient.GeneratePassword());
*)
function TStatsClient.UpdatePassword(bioHash: String; password, newPassword: String): Boolean;
var
  route, msg: String;
  payload: TStringArray;
begin
  route := 'stats/auth/update/' + bioHash + '/';

  payload += 'password=' + password;
  payload += 'new_password=' + newPassword;

  msg := Self.POST(route, payload);

  Result := msg.Pos('message') = 0; //again, maybe a bad way to do this
end;


(*
StatsClient.CheckStats
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.CheckStats(bioHash: string): String;

Returns the stats of the specified **biohash**.

Example
-------

  WriteLn StatsClient.CheckStats('0.999999999999999');
  WriteLn StatsClient.CheckStats(StatsClient.GenerateBioHash());
*)
function TStatsClient.CheckStats(bioHash: String): String;
var
  route: String;
begin
  route := 'stats/' + bioHash + '/';

  Result := Self.GET(route);
end;

(*
StatsClient.SubmitStats
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TStatsClient.SubmitStats(bioHash: String): Boolean;

Method to submit stats to wasp-stats with the help of **StatsPayload**.

Example
-------

  StatsPayload.Setup('SCRIPT_ID_HERE', StatsClient.GeneratePassword());
  StatsPayload.Update(100, 100, 5000);
  WriteLn StatsClient.SubmitStats(StatsClient.GenerateBioHash());
*)
function TStatsClient.SubmitStats(bioHash: String): Boolean;
var
  route, msg: String;
  currentTime: UInt64;
begin
  if Self.IsSetup and not Self.Timer.IsFinished() then //No point removing this, the server will reject you.
    Exit;

  route := 'stats/' + bioHash + '/';

  currentTime := GetTickCount();
  StatsPayload.Update(0, 0, currentTime - Self.TimeStamp);
  Self.TimeStamp := currentTime;

  msg := Self.POST(route, StatsPayload.FormData());

  Result := msg.Pos('limit') = 0;

  if Result then
  begin
    StatsPayload.Reset();
    Self.Timer.Restart();
  end;
end;

(*
var StatsClient
~~~~~~~~~~~~~~~

Global StatsClient variable.

Example
-------

  begin
    StatsPayload.Setup('SCRIPT_ID_HERE', StatsClient.GeneratePassword());
    StatsPayload.Update(100, 100, 5000);
    WriteLn StatsClient.SubmitStats(StatsClient.GenerateBioHash());
  end.
*)
var
  StatsClient: TStatsClient;

begin
  StatsClient.Setup();
end;
