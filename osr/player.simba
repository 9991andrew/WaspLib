{$DEFINE WL_PLAYER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSBaseStats = record(TSRLBaseRecord)
    Levels: TIntegerArray;
    IsSetup: Boolean;
  end;

procedure TRSBaseStats.Setup;
var
  i: Int32;
begin
  if IsSetup or not Stats.Open then
    Exit;

  Name := 'BaseStats';

  DebugLn('Caching player levels.');

  for i := Ord(ERSSkill.ATTACK) to Ord(ERSSkill.HUNTER) do
    Levels += Stats.GetCurrentLevel(ERSSkill(i));

  IsSetup := Levels <> [];
end;

function TRSBaseStats.GetCurrentLevel(Skill: ERSSkill): Int32;
begin
  if not IsSetup then
    Self.Setup;

  if IsSetup then
    Result := Levels[Ord(Skill)];
end;

var
  BaseStats: TRSBaseStats;


procedure TRSClient.CheckClientSettings();
begin
  if not WL.GameSettings.HighestPitch then
  begin
    WL.GameSettings.HighestPitch := True;
    MainScreen.SetHighestPitch();
  end;

  if not WL.GameSettings.MaxBrightness then
  begin
    WL.GameSettings.MaxBrightness := Options.SetMaxBrightness();

    if (MM2MS.ZoomLevel = -1) and Options.IsOpen() and (Options.GetCurrentTab() = ERSOptionsTab.DISPLAY) then
      MM2MS.ZoomLevel := Options.GetZoomLevel();
  end;

  if not WL.GameSettings.RoofsHidden then
    WL.GameSettings.RoofsHidden := Options.HideRoofs();

  if WL.XP.Previous = 0 then
    XPBar.Read();
end;

function TRSClient.IsLoggedIn(): Boolean; override;
begin
  Result := inherited;

  if Result then
    Self.CheckClientSettings();
end;
