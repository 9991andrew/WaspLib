{$DEFINE WL_ACHIEVEMENTS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSAchievementTab = (
    SUMMARY,
    QUESTS,
    DIARIES,
    FAVOUR
  );

  ERSSummaryButton = (
    QUESTS_COMPLETED,
    DIARIES_COMPLETED,
    COMBAT_ACHIEVEMENTS,
    COLLECTION_LOG,
    TIME_PLAYED
  );

  TRSAchievements = type TRSInterface;


procedure TRSAchievements.Setup(); override;
begin
  inherited;

  Self.Name := 'Achievements';
end;

procedure TRSAchievements.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;


function TRSAchievements.IsOpen(): Boolean;
begin
  Result := (GameTabs.GetCurrentTab = ERSGameTab.QUESTS);
end;

function TRSAchievements.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.QUESTS);
end;


function TRSAchievements.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[89,52], [182, 24]]);
end;

function TRSAchievements.GetButton(button: ERSSummaryButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if Length(Buttons) = Length(ERSSummaryButton) then
    Result := Buttons[Button];
end;


function TRSAchievements.GetTabs(): TBoxArray;
begin
  Result := Grid(4, 1, 41, 19, [5], [Self.X1+2, Self.Y1 + 5]);
end;

function TRSAchievements.GetCurrentTab(): ERSAchievementTab;
var
  tabs: TBoxArray;
  i: Int32;
begin
  tabs := Self.GetTabs();

  for i := 0 to High(tabs) do
  begin
    if SRL.CountColor(4741213, tabs[i]) < 50 then //finds the one without the bottom white line
      Exit(ERSAchievementTab(i));
  end
end;

function TRSAchievements.OpenTab(tab: ERSAchievementTab): Boolean;
var
  button: ERSSummaryButton;
begin
  if not Self.Open() then
    Exit(False);

  case Self.GetCurrentTab() of
    tab: Exit(True);
    SUMMARY:
      if ((tab = QUESTS) or (tab = DIARIES)) and Antiban.BioDice(MOUSE_GRAVITY) then //MOUSE_GRAVITY is not related to this at all but I figure I could use it.
      begin
        case tab of
          QUESTS:  button := QUESTS_COMPLETED;
          DIARIES: button := DIARIES_COMPLETED;
        end;

        Self.GetButton(button).Click();
        Exit(WaitUntil(Self.GetCurrentTab() = tab, SRL.TruncatedGauss(50, 1500), 3000));
      end;
  end;

  Mouse.Click(Self.GetTabs[tab], MOUSE_LEFT);
  Result := WaitUntil(Self.GetCurrentTab() = tab, SRL.TruncatedGauss(50, 1500), 3000);
end;

{$H-}
function TRSAchievements.GetScrollArea(scrollBar: TRSScrollBar): TBox; override;
var
  tab: ERSAchievementTab;
begin
  tab := Self.GetCurrentTab();
  if (tab <> QUESTS) and (tab <> DIARIES) then
    Exit;

  Result := Self.Bounds();

  if tab = QUESTS then
  begin
    Result.X1 += 9;
    Result.Y1 += 51;
    Result.X2 -= 6;
    Result.Y2 -= 45;
  end
  else
  begin
    Result.Y1 += 45;
    Result.Y2 -= 4;
  end;
end;
{$H+}


procedure TRSAchievements.Draw(bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  bitmap.DrawButtons(Self.GetButtons());
end;


var
  Achievements: TRSAchievements;


procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  Achievements.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  Achievements.Setup;
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Achievements.Draw(Bitmap);
end;


