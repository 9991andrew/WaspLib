{$DEFINE WL_BANK_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

//SHOULD ADD TO SRL
function TRSBank.GetTabBox(Tab: Int32): TBox;
var
  Tabs: TBoxArray := Self.GetTabBoxes();
begin
  if (Tab >= 0) and (Tab <= Length(Tabs)) then
    Result := Tabs[Tab];
end;

//SHOULD ADD TO SRL
function TRSBank.CountTabs: Int32;
var
  i: Integer;
  TPA: TPointArray;
begin
  Result := 0;

  for i := 9 downto 1 do
    if SRL.FindColors(TPA, CTS0(65536), Self.GetTabBox(i)) > 0 then
      Exit(i);
end;

//SHOULD ADD TO SRL
function TRSBank.GetCurrentTab: Int32;
var
  Tabs: TBoxArray := Self.GetTabBoxes;
  Tab: TBox;
  i: Int32;
begin
  for i := 0 to High(Tabs) do
  begin
    Tab := Tabs[i];
    Tab.Y2 +=1;
    if SRL.CountColor(CTS1(5334129, 0), Tab) = 0 then
      Exit(i);
  end;
end;

//SHOULD ADD TO SRL
function TRSBank.OpenTab(Tab: Int32): Boolean;
var
  TabBox: TBox;
begin
  if not Self.IsOpen then
    Exit;

  if Tab = Self.GetCurrentTab then
    Exit(True);

  TabBox := Self.GetTabBox(Tab);
  if TabBox <> [] then
  begin
    Mouse.Click(TabBox, MOUSE_LEFT);
    Result := WaitUntil((Tab = Self.GetCurrentTab), 100, 2000);
  end;
end;

//SHOULD ADD TO SRL
function TRSBank._FindWintertodt: T2DPointArray;
var
  Finder: TRSObjectFinder;
begin
  Finder.ColorClusters += [
    CTS2(3289384, 4, 0.51, 0.37),  //Dark hole
    CTS2(13025214, 17, 0.13, 0.11), //Snow color
    10
  ];

  Finder.ClusterDistance := 2;
  Finder.Grow := 3;
  Finder.Erode := 2;

  Result := MainScreen.FindObject(Finder);
  if Length(Result) = 0 then
    Exit;
  Result.SortByLongSide();
  Result := Result[0].Cluster(3);
  Result.SortByMiddle(Result.Merge.Mean());
end;


//SHOULD ADD TO SRL
function TRSBank.FindItem(Item: TRSItem): Boolean; overload;
var
  B: TBox;
begin
  Result := Self.FindItem(Item, B);
end;

//SHOULD ADD TO SRL
function TRSBank.FindItem(Item: TRSBankWithdrawItem): Boolean; overload;
begin
  Result := Self.FindItem(Item.Item);
end;

function TRSBank.FindItem(BankTab: Int32; Item: TRSItem; out Bounds: TBox): Boolean; overload;
begin
  if Self.OpenTab(BankTab) then
    Result := Self.FindItem(Item, Bounds);
end;

function TRSBank.FindItem(BankTab: Int32; Item: TRSItem): Boolean; overload;
begin
  if Self.OpenTab(BankTab) then
    Result := Self.FindItem(Item);
end;

function TRSBank.FindItem(BankTab: Int32; Item: TRSBankWithdrawItem): Boolean; overload;
begin
  if Self.OpenTab(BankTab) then
    Result := Self.FindItem(Item);
end;


function TRSBank._SimplifyItemName(Item: TRSItem): String;
var
  ItemStr: String := ToStr(Item);
  MaxLength, MinLength: Int32;
begin
  ItemStr := ItemStr.Before('(');
  ItemStr := ItemStr.Lower;
  MaxLength := ItemStr.Len;
  MinLength := MaxLength - Round(MaxLength/3);

  Result := Copy(ItemStr, 0, Random(MinLength, MaxLength));
end;


(*
 Possibly too custom to belong in SRL?

 Searches for an item "simplified name" and if found
 returns the tab it's on.

 Assuming someone as all the items a script needs in one tab
 this can be used to find it and it can be stored in a variable.

 SearchBox is a TBox of where the Tab text shows up.
*)
function TRSBank.FindItemTab(Item: TRSItem; OpenTab: Boolean = True): Int32;
var
  Box, SearchBox: TBox;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  TabsText: T2DPointArray;
begin
  if Self.FindItem(Item, Box) then
  begin
    if not Self.GetButton(ERSBankButton.SEARCH).Enabled then
      Exit(Self.GetCurrentTab)
    else
    begin
      Self.OpenSearch(600);
      Self.CloseSearch;
    end;
  end;

  if not Self.Search(Self._SimplifyItemName(Item)) or not Self.FindItem(Item, Box) then
    Exit(-1);

  SearchBox := [Self.X1 + 56, Self.Y1 + 77, Self.X1 + 84, Box.Y1];

  if SRL.FindColors(TPA, CTS0(10672356, 0), SearchBox) > 0 then
    TabsText += TPA;
  if SRL.FindColors(TPA, CTS0(16777215, 0), SearchBox) > 0 then
    TabsText += TPA;

  if TabsText = [] then //if we can see the item at this point
  begin                 //and there's no tab text, it's in tab0
    if OpenTab then
      Self.OpenTab(0);
    Exit(0);
  end;

  TPA := TabsText.Merge;
  TPA.SortByY(False);     //Sort the tabs text from bottom to top.

  ATPA := TPA.Cluster(6);
  //filter out anything that does not fit the size of the tab text.
  ATPA.FilterDimensions(24, 8, 26, 8);

  if ATPA = [] then Exit(-1);

  TPA := ATPA[0];
  TPA.SortByX(False);

  TPA := TPA.Cluster(1)[0];

  Result := OCR.RecognizeNumber(TPA.Bounds, TOCRColorRule.Create([10672356]), RS_FONT_PLAIN_11);
  if Result = 0 then
    Result := OCR.RecognizeNumber(TPA.Bounds, TOCRColorRule.Create([16777215]), RS_FONT_PLAIN_11);

  if (Result > 0) and OpenTab then
    Self.OpenTab(Result);
end;

function TRSBank.WithdrawItem(out Tab: Int32; Item: TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean; overload;
var
  ItemCount: Int32;
begin
  if not Self.IsOpen then
    Exit;

  if Inventory.IsFull and not Inventory.ItemIsStackable(Item.Item) then
    Exit;

  if not Self.FindItem(Item) then
  begin
    if Tab = -1 then
      Tab := Self.FindItemTab(Item.Item)
    else
      Self.OpenTab(Tab);

    if not Self.FindItem(Item) then
      Exit(False);
  end;

  ItemCount := Self.CountItemStack(Item.Item);
  if Self.WithdrawItem(Item, UseQuantityButtons) then
    Result := WaitUntil((Self.CountItemStack(Item.Item) < ItemCount), 50, 2000);
end;

function TRSBank.WithdrawItems(Tab: Int32; Items: array of TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean;
var
  Item: TRSBankWithdrawItem;
begin
  for Item in Items do
    if not Self.WithdrawItem(Tab, Item, UseQuantityButtons) then
      Exit(False);

  Result := True;
end;



function TRSBank.DepositItem(Tab: Int32; Item: TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean; overload;
var
  IsStackable: Boolean;
  ItemCount: Int32;
begin
  if not Self.IsOpen then
    Exit;

  if IsStackable := Inventory.ItemIsStackable(Item.Item) then
    ItemCount := Inventory.CountItemStack(Item.Item)
  else
    ItemCount := Inventory.CountItem(Item.Item);

  if Tab > -1 then
    Self.OpenTab(Tab);

  if Self.DepositItem(Item, UseQuantityButtons) then
  begin
    if IsStackable then
      Result := WaitUntil((Inventory.CountItemStack(Item.Item) <> ItemCount), 50, 2000)
    else
      Result := WaitUntil((Inventory.CountItem(Item.Item) <> ItemCount), 50, 2000);
  end;
end;

function TRSBank.DepositItem(Tab: Int32; Item: TRSItem; UseQuantityButtons: Boolean): Boolean; overload;
begin
  Result := Self.DepositItem(Tab, [Item, BANK_DEPOSIT_ALL], UseQuantityButtons);
end;

function TRSBank.DepositItemArray(Tab: Int32; ItemArray: array of TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean;
var
  Item: TRSBankDepositItem;
  ItemList: array of TRSBankDepositItem;
begin
  for Item in ItemArray do
    if Inventory.FindItem(Item.Item) then
      ItemList += Item;

  for Item in Itemlist do
    if not Self.DepositItem(Tab, Item, UseQuantityButtons) then
      Exit(False);

  Result := True;
end;

function TRSBank.DepositItemArray(Tab: Int32; ItemArray: TRSItemArray; UseQuantityButtons: Boolean): Boolean; overload;
var
  Item: TRSItem;
  ItemList: TRSItemArray;
begin
  for Item in ItemArray do
    if Inventory.FindItem(Item) then
      ItemList += Item;

  for Item in ItemList do
    if not Self.DepositItem(Tab, Item, UseQuantityButtons) then
      Exit(False);

  Result := True;
end;


function TRSBank.DepositAllBut(Tab: Int32; Items: TRSItemArray): Boolean;
var
  Item: TRSItem;
  Slots: TIntegerArray;
  DepositSlots: TIntegerArray;
begin
  if not Self.IsOpen then
    Exit;

  if Tab > -1 then
    Self.OpenTab(Tab);

  for Item in Items do
    Inventory.FindItem(Item, Slots);

  DepositSlots := Slots.Difference(Inventory.GetUsedSlots);

  if DepositSlots <> [] then
  repeat
    if not Self.IsOpen then //Exit in case the bank somehow closed.
      Exit;

    if Self.DepositSlot([DepositSlots[0], BANK_DEPOSIT_ALL], True) then
      WaitUntil(not Inventory.IsSlotUsed(DepositSlots[0]), 100, 2000);

    DepositSlots := Slots.Difference(Inventory.GetUsedSlots);
  until Result := (DepositSlots = []);
end;

function TRSBank.Close(Chance: Double): Boolean; overload;
var
  PressEscape: Boolean;
begin
  if Chance = BioHash then
    PressEscape := Antiban.BioDice
  else
    PressEscape := SRL.Dice(Chance);

  Result := Self.Close(PressEscape);
end;
