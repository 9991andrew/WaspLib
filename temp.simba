{$DEFINE SRL_USE_REMOTEINPUT}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

const
  MONTER_ATTACK_TYPES: TStringArray = [
    'MeleeAttack',
    'RangedAttack',
    'MagicAttack',
    'TypelessAttack'
  ];

type
  TRSItemData = record(TSRLBaseRecord)
    ItemNames: TStringList;
    WikiPricesJSON: TJSONObject;
    OSRSBoxItemJSON: TJSONObject;
    ReloadTimer: TCountDown;
    WikiPriceIsSetup: Boolean;
    OSRSBoxIsSetup: Boolean;
  end;

  ERSMonsterAttackType = (
    MELEE_ATTACK, RANGED_ATTACK, MAGIC_ATTACK, TYPELESS_ATTACK
  );

  TRSMonsterDrop = record
    Item: String;
    ID: String;
    Noted: Boolean;
  end;

  TRSMonsterData = record(TSRLBaseRecord)
    CurrentMonster: String;
    OSRSBoxMonsterJSON: TJSONObject;
    Size: Int32;
    Hitpoints: Int32;
    MaxHit: Int32;
    AttackTypes: array of ERSMonsterAttackType;
    Drops: array of TRSMonsterDrop;
    IsSetup: Boolean;
  end;

procedure TRSItemData.Free;
begin
  ItemNames.Free;
  WikiPricesJSON.Free;
end;


procedure TRSItemData.SetupWikiPrices;
begin
  if not WikiPriceIsSetup then
  begin
    Name := 'ItemData';
    ItemNames.Init;
    ItemNames.LoadFromFile(ITEM_FINDER_ITEM_NAMES_FILE);
    ItemNames.SetSorted(True);

    AddOnTerminate(@Self.Free);
    WikiPriceIsSetup := True;
    ReloadTimer.Setup(1200000);
  end;

  DebugLn('Loading item prices from the wiki API.');
  WikiPricesJSON.Init(GetPage('https://prices.runescape.wiki/api/v1/osrs/latest'));
  ReloadTimer.Restart;
end;

function TRSItemData.GetIDs(Item: String): TStringArray;
type
  TStringList = TStringList;

  function TStringList.NameFromIndex(Index: Int32): String; override;
  begin
    if (Index >= 0) and (Index < Self.GetCount()) then
      Result := Self.GetStrings(Index).Before('=');
  end;

  function TStringList.ValueFromIndex(Index: Int32): String; override;
  begin
    if (Index >= 0) and (Index < Self.GetCount()) then
      Result := Self.GetStrings(Index).After('=');
  end;

var
  ItemID: Int32;
begin
  if Item.IsDigit then
    Result := Result + Item
  else
  begin
    ItemID := Self.ItemNames.IndexOfName(Item);
    while SameText(Item, Self.ItemNames.NameFromIndex(ItemID)) do
    begin
      Result := Result + Self.ItemNames.ValueFromIndex(ItemID);

      Inc(ItemID);
    end;
  end;
end;

function TRSItemData.GetData(Item: String): TJSONObject;
begin
  if not WikiPriceIsSetup then
    Self.SetupWikiPrices;

  DebugLn('Getting ' + Item + ' data from OSRSBox API.');
  OSRSBoxItemJSON.Init(GetPage('https://www.osrsbox.com/osrsbox-db/items-json/' + Item + '.json'));
  Result := OSRSBoxItemJSON;

  if not OSRSBoxIsSetup then
  begin
    AddOnTerminate(@OSRSBoxItemJSON.Free);
    OSRSBoxIsSetup := True;
  end;
end;

function TRSItemData.GetTradeableID(Item: TRSItem): String;
var
  IDs: TStringArray;
begin
  if not WikiPriceIsSetup then
    Self.SetupWikiPrices;

  IDs := Self.GetIDs(Item);
  for Result in IDs do
  begin
    if Self.GetData(Result).getBoolean('tradeable_on_ge') then
      Exit(Result);
  end;

  Result := IDs[0];
end;

function TRSItemData.GetPrice(Item: TRSItem): TJSONObject;
begin
  if ReloadTimer.IsPaused or ReloadTimer.IsFinished then
    Self.SetupWikiPrices;

  Result := WikiPricesJSON.getJSONObject('data').getJSONObject(Self.GetTradeableID(Item));
end;


function TRSItemData.GetHigh(Item: TRSItem): Int32;
begin
  Result := Self.GetPrice(Item).getInt('high');
end;

function TRSItemData.GetLow(Item: TRSItem): Int32;
begin
  Result := Self.GetPrice(Item).getInt('low');
end;

function TRSItemData.GetAverage(Item: TRSItem): Int32;
var
  Low, High: Int32;
begin
  Low := Self.GetLow(Item);
  High := Self.GetHigh(Item);

  if (Low = 0) and (High = 0) then
    Exit;

  if High = 0 then
    Result := Low
  else if Low = 0 then
    Result := High
  else
    Result := Round((High + Low) / 2);
end;


function TRSItemData.GetCost(Item: TRSItem): Int32;
var
  Str: String := Self.GetTradeableID(Item);
begin
  Result := Self.GetData(Str).getInt('cost');
end;

function TRSItemData.GetLowAlch(Item: TRSItem): Int32;
var
  Str: String := Self.GetTradeableID(Item);
begin
  Result := Self.GetData(Str).getInt('lowalch');
end;

function TRSItemData.GetHighAlch(Item: TRSItem): Int32;
var
  Str: String := Self.GetTradeableID(Item);
begin
  Result := Self.GetData(Str).getInt('highalch');
end;

function TRSItemData.GetBuyLimit(Item: TRSItem): Int32;
var
  Str: String := Self.GetTradeableID(Item);
begin
  Result := Self.GetData(Str).getInt('buy_limit');
end;


function TRSItemData.GetHighAlchProfit(Item: TRSItem): Int32;
var
  Str: String := Self.GetTradeableID(Item);
begin
  Result := Self.GetHighAlch(Str) - Self.GetAverage(Item) - Self.GetAverage('561');
end;

function TRSItemData.GetLowAlchProfit(Item: TRSItem): Int32;
var
  Str: String := Self.GetTradeableID(Item);
begin
  Result := Self.GetLowAlch(Str) - Self.GetAverage(Item) - Self.GetAverage('561');
end;

var
  ItemData: TRSItemData;

procedure TRSMonsterData.Setup(Monster: String);
begin
  if not IsSetup then
  begin
    Name := 'MonsterData';
    AddOnTerminate(@OSRSBoxMonsterJSON.Free);
    IsSetup := True;
  end;

  if CurrentMonster = Monster then
    Exit;

  DebugLn('Loading ' + Monster + ' data from OSRSBox API.');
  OSRSBoxMonsterJSON.Init(GetPage('https://api.osrsbox.com/monsters?where={%20%22name%22:%20%22' + Monster +'%22,%20%22duplicate%22:%20false%20}'));
  CurrentMonster := Monster;
end;

function TRSMonsterData.GetSize(Monster: String): Int32;
begin
  Self.Setup(Monster);
  Result := OSRSBoxMonsterJSON.getJSONArray('_items').getJSONObject(0).getInt('size');
end;

var
  MonsterData: TRSMonsterData;


begin
  ItemData.SetupWikiPrices;
end;

begin
  WriteLn MonsterData.GetSize('Kraken');
end;
