(*
BaseScript
==========
BaseScript and it's derivants are template records to be used in scripts.
They also contain template functions and procedures that can be used as is or overriden with
"inherited" to add functionality.
*)

{$DEFINE WL_BASESCRIPT_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const
  WELCOME_SENTENCES: TStringArray = [
    'Join WaspScripts today!',
    'Road to max cape with',
    'No time to play legit?',
    'What are you waiting for?',
    'The best public color bots',
    'Learn how to make scripts at',
    'Get that 99 with',
    'Daily bans is not normal,',
    'Everything is open source',
    'Imagine AHK on steroids',
    'Unleash the power of Simba'
  ];

type
(*
type TBaseScript
~~~~~~~~~~~~~~~~
Record that holds common variables for most basic scripts.
The variables that are part of **TBaseScript** are the following:
 - **Name**: String that holds the script name to be displayed in the log and on screen progress report.
 - **Version**: String that holds the script version to be displayed in the log and on screen progress report.
 - **IsSetup**: Boolean that let us know if the our **TBaseScript** already set it's variables up.
 - **TimeRunning**: TStopwatch variable that holds how long our **TBaseScript** has been running.
 - **StatsDebugTick**: Integer variabled used to register the last tick we printed a progress report.
 - **Action**: String variable used to print in Simba output or on screen progress report the current action the script is performing.
 - **PreviousAction**: String variable used to register the previous action. This is used to avoid spamming the logs.
 - **ExtraInfo**: String variable we can use to print extra information in Simba output or in on screen progress report. E.G. current state of variables.
 - **ActionProfit**: Integer that holds information on how much profit (positive or negative) our script makes per action performed.
 - **TotalActions**: Integer used to count how many actions our script has done.
 - **TotalProfit**:  Integer that holds the total profit our script has done.
 - **TimeLimit**: Integer variable to set a time limit for our script in milliseconds before ending the current script.
 - **ActionLimit**: Integer variable to set total action limit before ending the script.
*)
  TBaseScript = record(TSRLBaseRecord)
    ID: String;
    Revision: String;
    Welcome: String;

    IsSetup: Boolean;

    TimeRunning: TStopwatch;
    StatsDebugTick: UInt64;

    Action: String;
    PreviousAction: String;

    ExtraInfo: String;

    ActionProfit: Int32;
    TotalActions: Int32;
    TotalProfit: Int32;

    TimeLimit: Int64;
    ActionLimit: Int32;
    BioHashStr: String;
  end;

(*
type TBaseWalkerScript
~~~~~~~~~~~~~~~~
Record that holds common variables for most scripts that use walker.
This record inherits from **TBaseScript** and has all of it's variables too.
The extra variables that are part of **TBaseWalkerScript** are:
 - **RSW**: TRSWalker variable that holds our walker, for more information check the following page: https://ollydev.github.io/SRL-Development/walker.html?highlight=walker
*)
  TBaseWalkerScript = record(TBaseScript)
    RSW: TRSWalker;
  end;

(*
type TBaseBankScript
~~~~~~~~~~~~~~~~
Record that holds common variables for most scripts that use a bank.
This record inherits from **TBaseWalkerScript** and has all of it's variables as well as **TBaseScript's**.
The extra variables that are part of **TBaseBankScript** are:
 - **ScriptBank**: PRSObject pointer that points to our current bank TRSObject, for more info check: https://torwent.github.io/WaspLib/waspobject.html#type-trsobject
 - **ScriptBanker**: PRSNPC pointer that points to our current banker TRSNPC, for more info check: https://torwent.github.io/WaspLib/waspobject.html#type-trsmmdot
 - **BankTab**: Integer variable used to cache the current bank tab that contains items for our script.
 - **ItemLeftAmount**: Integer variable used to cache items left to make/build/whatever to pre-hover the bank.
 - **HoveringBank**: Boolean variable that holds information if we are currently already hovering the bank. This is so we don't try to rehover the bank and don't need to check the uptext if we already are doing it.
 - **BankEmpty**: Boolean variable that that is set to true when we ran out of an item our script needs. This is used so next time we need to fetch the item we check the deposit box instead.
 - **CollectEmpty**: Boolean variable that that is set to true when the collect box is empty. Normally, if this and **BankEmpty** are true the script ends.
 - **CollectTimer**: TCountDown variable used to reset **CollectEmpty** after a couple of minutes.
*)
  TBaseBankScript = record(TBaseWalkerScript)
    ScriptBank:   TRSObject;
    ScriptBanker: TRSNPC;

    BankTab: Int32;

    ItemLeftAmount: Int32;
    HoveringBank: Boolean;
    BankEmpty: Boolean;       //Used to cache if Bank doesn't have more of a certain item.
    CollectEmpty: Boolean;    //Used to cache if CollectBox doesn't have more of a certain item.
    CollectTimer: TCountDown; //Used to reset CollectEmpty after a while.
  end;

procedure TBaseScript.Init(MaxActions: Int32; MaxTime: Int64); //override me to add more stuff.
var
  ScriptStr: String;
begin
  {$IFNDEF SCRIPT_CHAINER}
  ClearDebug();
  {$ENDIF}
  //Self.Name := ScriptFile.Before('.simba').Replace('_', ' ').Capitalize();

  AddOnTerminate(@SaveScreenshot);


  {$IFNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := ''}{$ENDIF}
  Self.ID := {$macro SCRIPT_ID};
  {$IFNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '1'}{$ENDIF}
  Self.Revision := {$macro SCRIPT_REVISION};

  GenerateLog(Self.Name);
  ScriptStr := ToStr(Self);
  ScriptStr := ScriptStr.Replace('{', '').Replace(', ', ',' + STR_NEW_LINE).Replace('}', '');
  ScriptStr += STR_NEW_LINE + STR_NEW_LINE;
  WriteFileContents(WL.LogFile, ScriptStr, True);

  Welcome := WELCOME_SENTENCES.Random;

  Self.ActionLimit := -1;
  if MaxActions > -1 then
    Self.ActionLimit := Self.TotalActions + MaxActions;

  TimeRunning.Start();
  PTimeRunning := @TimeRunning;

  if MaxTime > -1 then
    TimeLimit := TimeRunning.ElapsedTime + MaxTime
  else
    TimeLimit := -1;

  WL.Activity.Init(260000);

  if Self.IsSetup then
    Exit;

  Self.IsSetup := True;

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if WLSettings.RemoteInput.Enabled then
  begin
    RSClient.RemoteInput.Setup();
    if WLSettings.RemoteInput.HUDReport then
      ProgressReport.Setup();
  end;
  {$ENDIF}

  Antiban.Setup();

  //wasp-stats
  StatsClient.Disabled := not WLSettings.Stats;
  StatsPayload.Setup(Self.ID, StatsClient.GeneratePassword());
  StatsClient.TimeStamp := GetTickCount();
  //override me to add more stuff.
end;

function TBaseScript.DoAntiban(CheckBreaks: Boolean = True; CheckSleeps: Boolean = True): Boolean;
begin
  Antiban.DismissRandom;
  TimeRunning.Pause;
  WL.Activity.Pause;

  try
    Result := Antiban.DoAntiban(CheckBreaks, CheckSleeps);
  finally
    TimeRunning.Resume;
    WL.Activity.Resume;

    if not RSClient.IsLoggedIn then
      Login.LoginPlayer;
  end;
end;

procedure TBaseScript.ProcessWhileWaiting;
var
  Str: String;
  ElapsedTime: UInt64;
  PreviousProfit: Int32;
begin
  PreviousProfit := TotalProfit;
  Self.TotalProfit := (Self.TotalActions * Self.ActionProfit) - TotalConsumableCost;
  StatsPayload.Update(0, Self.TotalProfit - PreviousProfit, 0, 0);
  if not StatsClient.IsSetup or StatsClient.Timer.IsFinished() then
  begin
    if Self.BioHashStr = '' then
      Self.BioHashStr := StatsClient.GenerateBioHash(BioHash);

    StatsClient.SubmitStats(Self.BioHashStr);
  end;

  if (GetTickCount - StatsDebugTick) < 1000 then
    Exit;

  Self.DebugLn(Action, ExtraInfo);
  ElapsedTime := TimeRunning.ElapsedTime;

  ProgressTitle := Name;
  PadLength := ProgressTitle.Len + 6;

  ProgressTitle    := PadL((' ' + ProgressTitle + ' '), 10, ' ');
  ProgressTitle    := PadR(ProgressTitle, 90 - PadLength, ' ');

  PadLength := ProgressTitle.Len;

  ProgressArray := [];
  ProgressArray += ProgressTitle;

  Str := ' Action        : ' + Action;

  ProgressArray += PadR((' Action        : ' + Action), Round(PadLength/2), ' ') +
                         ' Runtime       : ' + SRL.MsToTime(ElapsedTime, Time_Short);

  if (ActionLimit = -1) then
    ProgressArray += PadR((' Total Actions : ' + ToStr(TotalActions)), Round(PadLength/2), ' ') +
                           ' Actions/Hour  : ' + ToStr(NumberPerHour(TotalActions, ElapsedTime))
  else
    ProgressArray += PadR((' Total Actions : ' + ToStr(TotalActions) + '/' + ToStr(ActionLimit)), Round(PadLength/2), ' ') +
                           ' Actions/Hour  : ' + ToStr(NumberPerHour(TotalActions, ElapsedTime));

  ProgressArray += PadR((' Total Profit  : ' + SRL.FormatNumber(TotalProfit)), Round(PadLength/2), ' ') +
                         ' Profit/Hour   : ' + SRL.FormatNumber(NumberPerHour(TotalProfit, ElapsedTime));

  ProgressArray += ' ' + Welcome + ' waspscripts.com';

  ProgressArray += ExtraInfo;

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if WLSettings.RemoteInput.Enabled and WLSettings.RemoteInput.HUDReport and
     not WLSettings.RemoteInput.ScriptDebug and (Action <> PreviousAction) then
    ProgressReport.Update(ProgressArray);
  {$ENDIF}

  for Str in ProgressArray do
    Writeln(Str);

  PreviousAction := Action;
  StatsDebugTick := GetTickCount();

  if WLSettings.RemoteInput.ScriptDebug then
    SRL.Debug(RSClient.Image);
end;

function TBaseScript.ShouldStop: Boolean;
begin
  Result := ((ActionLimit > -1) and (TotalActions >= ActionLimit)) or
            ((TimeLimit > -1) and (TimeRunning.ElapsedTime >= TimeLimit));

  if Result then
    SaveScreenshot('ScriptEnding/shouldstop' + Name, True);
end;




procedure TBaseWalkerScript.Init(MaxActions: Int32; MaxTime: Int64); override;//override me to add more stuff.
begin
  inherited;

  RSW.OnWalkingEvent := @WalkerTasks;
end;



procedure TBaseBankScript.Init(MaxActions: Int32; MaxTime: Int64); override;//override me to add more stuff.
begin
  inherited;

  BankTab := -1;
  CollectTimer.Init(600000);

  //override me to add more stuff.
end;

procedure TBaseBankScript.SetupWLBanks;
begin
  case WLSettings.BankLocation of
    AL_KHARID_BANK:
      begin
		    RSW.Setup('mainland');
		    ScriptBank := RSObjects.AlKharidBank;
      end;

    ARDOUGNE_NORTH_BANK:
      begin
		    RSW.Setup('x5723y3038');
		    ScriptBank := RSObjects.ArdougneNorthBank;
      end;

    ARDOUGNE_SOUTH_BANK:
      begin
		    RSW.Setup('x5723y3038');
		    ScriptBank := RSObjects.ArdougneSouthBank;
      end;

    CASTLE_WARS_BANK:
      begin
		    RSW.Setup('mainland');
		    ScriptBank := RSObjects.CastleWarsBank;
      end;

    CATHERBY_BANK:
      begin
		    RSW.Setup('mainland');
		    ScriptBank := RSObjects.CatherbyBank;
      end;

    CRAFT_GUILD_BANK:
      begin
		    RSW.Setup('x6953y3166');
		    ScriptBank := RSObjects.CraftGuildBank;
      end;

    DRAYNOR_BANK:
      begin
		    RSW.Setup('x7617y3214');
		    ScriptBank := RSObjects.DraynorBank;
      end;

    EDGEVILLE_BANK:
      begin
		    RSW.Setup('x7536y2363');
		    ScriptBank := RSObjects.EdgevilleBank;
      end;

    FALADOR_EAST_BANK:
      begin
		    RSW.Setup('x7051y2796');
		    ScriptBank := RSObjects.FaladorEastBank;
      end;

    FALADOR_WEST_BANK:
      begin
		    RSW.Setup('x7051y2796');
		    ScriptBank := RSObjects.FaladorWestBank;
      end;

    GRAND_EXCHANGE_BANK:
      begin
		    RSW.Setup('x7789y2306');
		    ScriptBank := RSObjects.GEBank;
      end;

    LUNAR_ISLAND_BANK:
      begin
		    RSW.Setup('x4127y1027');
		    ScriptBank := RSObjects.LunarBank;
      end;

    MINING_GUILD_BANK:
      begin
		    RSW.Setup('x6291y497');
		    ScriptBank := RSObjects.MiningGuildBank;
      end;

    PRIFDDINNAS_BANK:
      begin
		    RSW.Setup('x3583y1905');
		    ScriptBank := RSObjects.PrifddinasBank;
      end;

    SEERS_BANK:
      begin
		    RSW.Setup('mainland');
		    ScriptBank := RSObjects.SeersBank;
      end;

    TZHAAR_BANK:
      begin
		    RSW.Setup('x4333y310');
		    ScriptBank := RSObjects.TzhaarBank;
      end;

    VARROCK_EAST_BANK:
      begin
		    RSW.Setup('x7536y2363');
		    ScriptBank := RSObjects.VarrockEastBank;
      end;

    VARROCK_WEST_BANK:
      begin
		    RSW.Setup('x7789y2306');
		    ScriptBank := RSObjects.VarrockWestBank;
      end;

    WINTERTODT_BANK:
      begin
		    RSW.Setup('x1549y224');
		    ScriptBank := RSObjects.WintertodtBank;
      end;
  end;
end;


function TBaseBankScript.Terminate: Boolean;//override me to add more stuff.
begin
  for 0 to 5 do
  begin
    if MainScreen.HasInterface then
    begin
      if Result := Bank.IsOpen then Break
      else MainScreen.CloseInterface;
    end;

    if Result := Bank.WalkOpen(ScriptBank) then
      Break;
  end;
  //override me to add more stuff.
end;

procedure TBaseBankScript.CountItemsLeft(Item: TRSItem);
begin
  ItemLeftAmount := Inventory.CountItem(Item);
end;

function TBaseBankScript.ShouldHover: Boolean;
begin
  Result := ((ItemLeftAmount = 1) and SRL.Dice(10 + (90 * BioHash))) or
            ((ItemLeftAmount = 2) and SRL.Dice(5 + (75 * BioHash))) or
            ((ItemLeftAmount = 3) and SRL.Dice(5 + (60 * BioHash))) or
            ((ItemLeftAmount = 4) and SRL.Dice(45 * BioHash)) or
            ((ItemLeftAmount = 5) and SRL.Dice(30 * BioHash)) or
            ((ItemLeftAmount = 6) and SRL.Dice(10 * BioHash)) or
            SRL.Dice(5 * BioHash);
end;


function TBaseBankScript.Hover: Boolean;
begin
  Result := HoveringBank := Bank.Hover(ScriptBank);
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  MM2MS.SetupZoom;
  if (Bitmap = RSClient.Image) then
    Bitmap.Clear;

  inherited(Bitmap);
end;




