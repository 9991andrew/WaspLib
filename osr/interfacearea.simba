{$DEFINE WL_INTERFACEAREA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function TRSInterfaceArea.IsClassicOpen: Boolean;
begin
  Result := (SRL.CountColor(CTS0(3358536, 2), Self.Bounds) > 10000);
end;

function TRSInterfaceArea.IsScrollOpen: Boolean;
begin
  Result := (SRL.CountColor(CTS0(7904689, 17), Self.Bounds) > 10000);
end;

function TRSInterfaceArea.HasInterface: Boolean;
begin
  Result := Self.IsClassicOpen or Self.IsScrollOpen;
end;

//overriden to be able to pick Scroll UI Close button
function TRSInterface.FindButtons(Dimensions: TRSButtonDimensions): TRSButtonArray; override;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  I, W, H: Int32;
  B: TBox;
  Color: TCTS1Color;
  Boxes: TBoxArray;
begin
  B := Self.Bounds();

  for Color in Self.ButtonColors do
    if SRL.FindColors(TPA, Color, B) > 0 then
      ATPA += TPA;

  ATPA := ATPA.Merge().Cluster(1);

  for TPA in ATPA do
  begin
    if Length(TPA) < 50 then
      Continue;

    B := TPA.Bounds();
    B.GetDimensions(W, H);

    for I := 0 to High(Dimensions) do
    begin
      if ((W = Dimensions[I].Width) or (Dimensions[I].Width = 0)) and
         ((H = Dimensions[I].Height) or (Dimensions[I].Height = 0)) and
          (TPA.Frameness > 57) then
        Boxes += B;
    end;

    {$IFDEF SRL_DEBUG_FINDBUTTONS}
    Writeln(W, ', ', H);
    {$ENDIF}
  end;

  Boxes.SortByXY(10);

  SetLength(Result, Length(Boxes));
  for I := 0 to High(Boxes) do
  begin
    Result[I].Index := I;
    Result[I].Bounds := Boxes[I];
    Result[I].Middle := Boxes[I].Middle;
    Result[I].EnabledColors := Self.ButtonEnabledColors;
  end;
end;

function TRSInterfaceArea.GetButton: TRSButton;
var
  Buttons: TRSButtonArray := FindButtons([[21,21], [24,23]]);
begin
  if Buttons <> [] then
    Result := Buttons[High(Buttons)];
end;


function TRSInterfaceArea.ClickCloseButton(PressEscape: Boolean = False): Boolean;
var
  CloseButton: TRSButton := Self.GetButton;
begin
  Result := CloseButton <> [];

  if Result then
  begin
    case PressEscape of
      False: CloseButton.Click;
      True:  Keyboard.PressKey(VK_ESCAPE);
    end;
  end;
end;

function TRSInterfaceArea.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.HasInterface then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.HasInterface, SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;
