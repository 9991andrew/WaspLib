type
  Colors = record
  class const
    BLACK         = $000000;
    WHITE         = $FFFFFF;
    ORANGE        = $1F98FF;
    ORANGE_LIGHT  = $3EB7FE;
    RED           = $0000FF;
    YELLOW        = $00FFFF;
    BLUE          = $FF0000;

    GREEN_SPRING  = $80FF00;
    BLUE_OCEAN    = $BE9625;
    CYAN          = $FFFF00;
    DROPDOWN_BLACK= $0C0E0E;
    LIME          = $BE9625;
  end;

(*
GetNextCycleColor
~~~~~~~~~~~~~~~~~
.. pascal:: function GetNextCycleColor(color, step: Int32): Int32;

Not currently used for anything, just a fun experiment. Can be used to give an RGB cycle effect.
*)
function GetNextCycleColor(color, step: Int32): Int32;
var
  r, g, b: Int32;
begin
  ColorToRGB(color, r, g, b);

  if (r = 255) and (g = 0) and (b < 255) then
    b += step
  else if (r > 0)   and (g = 0)   and (b = 255) then
    r -= step
  else if (r = 0)   and (g < 255) and (b = 255) then
    g += step
  else if (r = 0)   and (g = 255) and (b > 0) then
    b -= step
  else if (r < 255) and (g = 255) and (b = 0) then
    r += step
  else if (r = 255) and (g > 0)   and (b = 0) then
    g -= step;

  if r < 0    then r := 0;
  if r > 255 then r := 255;

  if g < 0    then g := 0;
  if g > 255 then g := 255;

  if b < 0    then b := 0;
  if b > 255 then b := 255;

  Result := RGBtoColor(r, g, b);
end;

