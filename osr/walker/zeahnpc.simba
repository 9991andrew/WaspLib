type
  TZeahNPC = record
    CurrentNPC: record
      Tile: TPoint;
      PrimaryColor: TCTS2Color;
      SecondaryColor: TCTS2Color;
    end;

    Tiles: record
      LumbridgeCook: TPoint;
    end;

    Colors: record
      LumbridgeCook: TCTS2Color;
    end;
  end;

procedure TZeahNPC.SetCurrentNPC(Tile: TPoint; Color: TCTS2Color);
begin
  CurrentNPC.Tile := Tile;
  CurrentNPC.PrimaryColor := Color;
end;

procedure TZeahNPC.SetCurrentNPC(Tiles: TPointArray; Color: TCTS2Color); overload;
begin
  CurrentNPC.Tile := Tiles[Random(0, High(Tiles))];
  CurrentNPC.PrimaryColor := Color;
end;

procedure TZeahNPC.SetCurrentNPC(Tiles: T2DPointArray; Color: TCTS2Color); overload;
var
  i: Int32;
begin
  i := Random(0, High(Tiles));
  CurrentNPC.Tile := Tiles[i][Random(0, High(Tiles[i]))];
  CurrentNPC.PrimaryColor := Color;
end;


procedure TZeahNPC.SetCurrentNPC(Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color); overload;
begin
  CurrentNPC.Tile := Tile;
  CurrentNPC.PrimaryColor := PrimaryColor;
  CurrentNPC.SecondaryColor := SecondaryColor;
end;

procedure TZeahNPC.SetCurrentNPC(Tiles: TPointArray; PrimaryColor, SecondaryColor: TCTS2Color); overload;
begin
  CurrentNPC.Tile := Tiles[Random(0, High(Tiles))];
  CurrentNPC.PrimaryColor := PrimaryColor;
  CurrentNPC.SecondaryColor := SecondaryColor;
end;

procedure TZeahNPC.SetCurrentNPC(Tiles: T2DPointArray; PrimaryColor, SecondaryColor: TCTS2Color); overload;
var
  i: Int32;
begin
  i := Random(0, High(Tiles));
  CurrentNPC.Tile := Tiles[i][Random(0, High(Tiles[i]))];
  CurrentNPC.PrimaryColor := PrimaryColor;
  CurrentNPC.SecondaryColor := SecondaryColor;
end;






procedure TZeahNPC.LoadTiles;
begin
  Tiles.LumbridgeCook := [];
end;

procedure TZeahNPC.LoadColors;
begin
  Colors.LumbridgeCook := [];
end;

procedure TZeahNPC.Load;
begin
  Self.LoadTiles;
  Self.LoadColors;
end;

var
  ZeahNPC: TZeahNPC;
