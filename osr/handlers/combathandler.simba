(*
CombatHandler
=============
CombatHandler is a record made to handle certain things related to combat.
*)

{$DEFINE WL_COMBATHANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const
  WEAPONS: TRSItemArray = [
    'Ghrazi rapier', 'Blade of saeldor (c)', 'Inquisitor''s mace',
    'Toktz-xil-ak', 'Abyssal whip', 'Abyssal bludgeon',
    'Abyssal dagger', 'Abyssal dagger (p++)', 'Saradomin sword',
    'Dragon scimitar', 'Dragon sword', 'Dragon longsword',
    'Dharok''s greataxe', 'Sarachnis cudgel', 'Dinh''s bulwark',
    'Dragon hunter lance', 'Abyssal tentacle', 'Granite hammer',
    'Bow of faerdhinen (c)',
    'Toxic blowpipe', 'Magic shortbow (i)', 'Armadyl crossbow',
    'Dragon hunter crossbow', 'Dragon crossbow', 'Rune crossbow',
    'Adamant dart', 'Mithril dart', 'Rune scimitar', 'Dorgeshuun crossbow',
    'Leaf-bladed sword', 'Null'
  ];

  SHIELDS: TRSItemArray = [
    'Avernic defender', 'Dragon defender', 'Rune defender',
    'Adamant defender', 'Mithril defender', 'Black defender',
    'Steel defender', 'Iron defender', 'Bronze defender',
    'Dragonfire shield', 'Toktz-ket-xil', 'Twisted buckler',
    'Dragonfire ward', 'Odium ward', 'Book of law',
    'Book of darkness', 'Unholy book', 'Book of war', 'Rune kiteshield',
    'Null'
  ];

  SPEC_WEAPONS: TRSItemArray = [
    'Dragon claws', '4153', '12848', 'Granite maul', 'Abyssal dagger',
    'Abyssal dagger (p++)', 'Dragon dagger', 'Dragon dagger(p++)',
    'Dragon sword', 'Dragon longsword', 'Dinh''s bulwark', 'Abyssal tentacle',
    'Saradomin godsword', 'Granite hammer',
    'Toxic blowpipe', 'Magic shortbow (i)', 'Armadyl crossbow',
    'Dragon crossbow',
    'Null'
  ];

  BRACELETS: TRSItemArray = [
    'Bracelet of slaughter',
    'Expeditious bracelet',
    'Null'
  ];

  DWARF_CANNON: TRSItemArray = [
    'Cannon base',
    'Cannon stand',
    'Cannon barrels',
    'Cannon furnace'
  ];

  CANNON_BALLS: TRSItemArray = [
    'Cannonball',
    'Granite cannonball'
  ];

type
  TCombatHandler = record(TSRLBaseRecord)
    State: String;
    Monster: PRSMonster;

    BraceletTimer: TCountDown;
    InCombatTimer: TCountDown;
    CombatStyle: TRSCombatStyle;

    ManageGear: Boolean;

    Weapon: TRSItem;
    Shield: TRSItem;
    SpecWeapon: TRSItem;
    Bracelet: TRSItem;

    MinHitPoints: Int32;
    MinPrayPoints: Int32;
    WeaponSpec: Int32;
    GearIsSetup: Boolean;

    QuickPrayerIsSetup: Boolean;

    HandleHealth: Boolean;
    HandlePrayer: Boolean;
    HandlePoison: Boolean;
    HandleVenom: Boolean;
    HandleAntifire: Boolean;
    HandleBoosts: Boolean;

    HandleCannon: Boolean;
    CannonIsSetup: Boolean;
    DoingSpec: Boolean;
    SlayerTaskFinishedVisible: Boolean;
    SlayerTaskFinished: Boolean;
    LootEnabled: Boolean;
    LootHandler: TRSLootHandler;
    AttackMonsterDelay: Int32;
    IsSetup: Boolean;
  end;

procedure TCombatHandler.Setup(Timer: Int64 = 4000);
begin
  if IsSetup then
    Exit;

  Name := 'CombatHandler';

  InCombatTimer.Setup(Timer);

  if not RSClient.IsLoggedIn then
    Login.LoginPlayer;

  ChatButtons.Open(ERSChatButton.GAME_CHAT);
  SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);

  if HandleHealth := Inventory.FindItems(FOOD_ARRAY) then
  begin
    DebugLn('Food detected and will be used.');
    FoodManager.MinInvPoints := 1;
    FoodManager.Setup(ERSConsumable.HEALTH_CONSUMABLE);
  end;

  if HandleBoosts := Inventory.FindItems(BOOST_ARRAY) then
  begin
    DebugLn('Boost potions detected, they will be used.');
    BoostManager.MinInvPoints := 1;
    BoostManager.Setup(ERSConsumable.BOOST_CONSUMABLE);
  end;

  if HandlePrayer := Inventory.FindItems(PRAYER_ARRAY) then
  begin
    DebugLn('Prayer potions detected, prayer will be used.');
    PrayerManager.MinInvPoints := 1;
    PrayerManager.Setup(ERSConsumable.PRAYER_CONSUMABLE);
  end;

  if HandlePoison := Inventory.FindItems(ANTI_POISON_ARRAY) then
  begin
    DebugLn('Anti poison potions detected, they will be used.');
    PoisonManager.MinInvPoints := 1;
    PoisonManager.Setup(ERSConsumable.POISON_CONSUMABLE);
  end;

  if HandleVenom := Inventory.FindItems(ANTI_VENOM_ARRAY) then
  begin
    DebugLn('Anti venom potions detected, they will be used.');
    VenomManager.MinInvPoints := 1;
    VenomManager.Setup(ERSConsumable.VENOM_CONSUMABLE);
  end;

  if HandleAntifire := Inventory.FindItems(ANTI_FIRE_ARRAY) then
  begin
    DebugLn('Anti fire potions detected, they will be used.');
    AntifireManager.MinInvPoints := 1;
    AntifireManager.Setup(ERSConsumable.ANTI_FIRE_CONSUMABLE);
  end;

  HandleCannon := Inventory.FindAllItems(DWARF_CANNON) and
               Inventory.FindItems(CANNON_BALLS);

  if HandleCannon then
    DebugLn('Cannon and cannonballs detected. Cannon will be used.');

  IsSetup := True;
end;

procedure TCombatHandler.Setup(RSMonster: PRSMonster; Timer: Int64 = 4000); overload;
begin
  if IsSetup then
    Exit;

  Self.Setup(Timer);

  Monster := RSMonster;
  if (pos('RANGED_ATTACK', RSMonster.AttackTypes) > 0)
    or (pos('MAGIC_ATTACK', RSMonster.AttackTypes) > 0)
    and not Mainscreen.InMultiCombat then
      AttackMonsterDelay := 10000
      else
      AttackMonsterDelay := 5000;
end;


procedure TCombatHandler._SetupGear;
begin
  if GearIsSetup then
    Exit;

  ItemFinder.AddItemName('Saradomin godsword', '20372');

  for Weapon in WEAPONS do
  begin
    if (Weapon = 'Null') then
      Break;
    if Equipment.FindItem(Weapon) then
    begin
      Delete(RSAction.AlchItemArray, RSAction.AlchItemArray.Find(Weapon), 1);
      Break;
    end;
  end;
  DebugLn('Current weapon: ' + ToStr(Weapon) + '.');

  for Shield in SHIELDS do
  begin
    if (Shield = 'Null') then
      Break;
    if Equipment.FindItem(Shield) then
    begin
      Delete(RSAction.AlchItemArray, RSAction.AlchItemArray.Find(Shield), 1);
      Break;
    end;
  end;
  DebugLn('Current shield: ' + ToStr(Shield) + '.');

  if Equipment.FindItem('Bonecrusher necklace') then
    Antiban.Skills += ERSSkill.PRAYER;

  for SpecWeapon in SPEC_WEAPONS do
  begin
    if (SpecWeapon = 'Null') then
      Break;
    if Inventory.FindItem(SpecWeapon) then
    begin
      Delete(RSAction.AlchItemArray, RSAction.AlchItemArray.Find(SpecWeapon), 1);
      Break;
    end;
  end;

  if Inventory.FindItems(
     ['Bonecrusher',
      'Bonecrusher necklace',
      'Ash sanctifier']) then
    Antiban.Skills += ERSSkill.PRAYER;

  if SpecWeapon <> 'Null' then
  begin
    case SpecWeapon of
      'Granite maul': WeaponSpec := 50;
      '4153', '12848': WeaponSpec := 60;
      else WeaponSpec := WeaponData.GetSpec(SpecWeapon);
    end;

    DebugLn('Current spec weapon: ' + ToStr(SpecWeapon) +
            '. With ' + ToStr(WeaponSpec) + '% spec.');
  end
  else
  begin
    case Weapon of
      'Granite maul': WeaponSpec := 50;
      '4153', '12848': WeaponSpec := 60;
      'Null': WeaponSpec := 110; 
      else WeaponSpec := WeaponData.GetSpec(Weapon);
    end;

    if WeaponSpec <= 100 then
    begin
      SpecWeapon := Weapon;
      DebugLn('Current spec weapon: ' + ToStr(SpecWeapon) +
              '. With ' + ToStr(WeaponSpec) + '% spec.');
    end;
  end;

  for Bracelet in BRACELETS do
    if (Bracelet = 'Null') or Inventory.FindItem(Bracelet) then Break;

  if (Bracelet <> 'Null') then
  begin
    DebugLn('Current slayer bracelet: ' + ToStr(Bracelet) + '.');
    BraceletTimer.Setup(15 * ONE_MINUTE);
  end;

  GearIsSetup := (Weapon <> 'Null') or (Shield <> 'Null') or
                 (SpecWeapon <> 'Null') or (Bracelet <> 'Null');
end;

procedure TCombatHandler.Setup(Manage: Boolean; RSMonster: PRSMonster; LootValue: Int32 = 5000;Timer: Int64 = 4000); overload;
begin
  if IsSetup then
    Exit;

  Self.Setup(RSMonster, Timer);

  if Manage then
  begin
    ManageGear := True;
    Self._SetupGear;
    LootHandler.Setup(RSMonster, LootValue);
    LootEnabled := LootHandler.IsSetup;
  end;

  DebugMonsterArray += RSMonster;
end;


procedure TCombatHandler.MarkCurrentEnemy;
begin

end;


function TCombatHandler.AttackMonster: Boolean;
begin
  if Monster^.SelectOption(['Attack'], 3) then
  begin
    Minimap.WaitMoving;
    Result := MainScreen.WaitInCombat(AttackMonsterDelay);
  end;

  if Result then
  begin
    if DoingSpec then
      DoingSpec := False;
    InCombatTimer.Restart(Random(0, 2000));
  end;
end;

function TCombatHandler.WalkAttackMonster: Boolean;
begin
  if Monster^.WalkSelectOption(['Attack'], 3) then
  begin
    Minimap.WaitMoving;
    Result := MainScreen.WaitInCombat(AttackMonsterDelay);
  end;

  if Result then
  begin
    if DoingSpec then
      DoingSpec := False;
    InCombatTimer.Restart(Random(0, 2000));
  end;
end;


function TCombatHandler.Loot: Boolean;
begin
  if Result := LootHandler.CheckLoot then
  begin
    Wait(400, 600);
    if Inventory.FindItems(RSAction.AlchItemArray) and
       RSAction.AlchItems(RSAction.AlchItemArray) then
      Wait(600, 800);
  end;
end;



function TCombatHandler.CheckBracelet: Boolean;
begin
  if not ManageGear then
    Exit;

  if not GearIsSetup then
  begin
    Self._SetupGear;
    ManageGear := GearIsSetup;
    if not GearIsSetup then
      Exit;
  end;

  Result := (Bracelet <> 'Null') and Equipment.FindItem(Bracelet);

  if Result then
    BraceletTimer.Restart(Random((-2 * ONE_MINUTE), (2 * ONE_MINUTE)));
end;

function TCombatHandler.NeedBracelet: Boolean;
begin
  if not ManageGear or not GearIsSetup then
    Exit;

  Result := (Bracelet <> 'Null') and
            BraceletTimer.IsFinished and
            Inventory.FindItem(Bracelet) and not Self.CheckBracelet;
end;

function TCombatHandler.EquipBracelet: Boolean;
begin
  if not ManageGear or not GearIsSetup or (Bracelet = 'Null') then
    Exit;

  Result := Inventory.ClickItem(Bracelet);

  if Result then
  begin
    BraceletTimer.Restart;
    InCombatTimer.Timeout := GetTickCount;
  end;
end;


function TCombatHandler.NeedRegear: Boolean;
begin
  if not ManageGear then
    Exit;

  if not GearIsSetup then
  begin
    Self._SetupGear;
    ManageGear := GearIsSetup;
    if not GearIsSetup then
      Exit;
  end;

  Result := ((Weapon <> 'Null') and Inventory.FindItem(Weapon)) or
            ((Shield <> 'Null') and Inventory.FindItem(Shield));

  DoingSpec := not Result;
end;

function TCombatHandler.ReGear: Boolean;
begin
  if not ManageGear or not GearIsSetup then
    Exit;

  repeat
    if (Weapon <> 'Null') then
      Inventory.ClickItem(Weapon);
    if (Shield <> 'Null') then
      Inventory.ClickItem(Shield);
    Result := WaitUntil(not Self.NeedRegear, 100, 5000);
  until Result;

  InCombatTimer.Timeout := GetTickCount;
end;


function TCombatHandler.CanSpec: Boolean;
begin
  if not ManageGear then
    Exit;

  if not GearIsSetup then
  begin
    Self._SetupGear;
    ManageGear := GearIsSetup;
    if not GearIsSetup then
      Exit;
  end;

  Result := (Minimap.GetSpecLevel >= WeaponSpec) and
            ((SpecWeapon = Weapon) or Inventory.FindItem(Weapon) or
            (Inventory.FindItem(SpecWeapon) and Inventory.HasSpace(1)));
  DoingSpec := Result;
end;

function TCombatHandler.DoSpec: Boolean;
begin
  if ManageGear and not GearIsSetup then
  begin
    Self._SetupGear;
    ManageGear := GearIsSetup;
    if not GearIsSetup then
      Exit;
  end;

  if (SpecWeapon <> Weapon) and Inventory.ClickItem(SpecWeapon) then
    if not WaitUntil(Inventory.FindItem(Weapon), 100, 4000) then
      Exit;

  InCombatTimer.Timeout := GetTickCount;
  Result := DoingSpec := Minimap.EnableSpec(WeaponSpec);

  case SpecWeapon of
    'Granite maul', '4153', '12848':
      begin
        Result := DoingSpec := True;
        Wait(50, 100);
      end;
    else
      Wait(300, 400);
  end;

  if Result and (Minimap.GetSpecLevel < WeaponSpec) then
    Self.Regear;
end;




function TCombatHandler.NeedAntiPoison: Boolean;
begin
  if not HandlePoison and not HandleVenom then
    Exit;

  Result := PoisonManager.NeedToConsume or
            VenomManager.NeedToConsume or
            Minimap.IsPoisoned or
            Minimap.IsEnvenomed;
end;

function TCombatHandler.NeedAntifire: Boolean;
begin
  Result := HandleAntifire and AntifireManager.NeedToConsume;
end;

function TCombatHandler.NeedBoost: Boolean;
begin
  Result := HandleBoosts and BoostManager.NeedToConsume;
end;


function TCombatHandler.Terminate: Boolean;
begin
  if not MainScreen.FindGrave then
  begin
    Magic.CastSpell(ERSSpell.VARROCK_TELEPORT);
    Wait(10000);
  end;

  Result := Logout.ClickLogout;
  Self.Fatal('Last state: ' + State);
end;


procedure TCombatHandler.CheckSlayerTask;
begin
  if not SlayerTaskFinishedVisible and SlayerTaskFinished then
    Exit;

  if SlayerTaskFinishedVisible then
    SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED])
  else
    SlayerTaskFinished := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);
end;

//Check for pending action combat handler is taking care of.
function TCombatHandler.GetState: String;
var
  PrayCache: Int32;
begin
  if (Minimap.GetHPLevel <= MinHitPoints) then
  begin
    if HandleHealth then
    begin
      State := 'EAT_FOOD';
      Exit(State);
    end;

    State := 'LOW_HEALTH';
    Exit(State);
  end;

  if HandlePrayer then
  begin
    PrayCache := Minimap.GetPrayerLevel;

    if (PrayCache > 0) and not Minimap.IsPrayerEnabled then
    begin
      State := 'ENABLE_QPRAY';
      Exit(State);
    end;

    if (PrayCache <= MinPrayPoints) then
    begin
      if Inventory.FindConsumable(ERSConsumable.PRAYER_CONSUMABLE) then
      begin
        State := 'DRINK_PRAYER';
        Exit(State);
      end;

      State := 'LOW_PRAYER';
      Exit(State);
    end;
  end;

  if Self.NeedAntifire then
  begin
    if Inventory.FindConsumable(ERSConsumable.ANTI_FIRE_CONSUMABLE) then
    begin
      State := 'DRINK_ANTIFIRE';
      Exit(State);
    end;

    State := 'NO_ANTIFIRE';
    Exit(State);
  end;

  if Self.NeedAntiPoison then
  begin
    if HandleVenom and Inventory.FindConsumable(ERSConsumable.VENOM_CONSUMABLE) then
    begin
      State := 'DRINK_ANTIVENOM';
      Exit(State);
    end;

    if HandlePoison and Inventory.FindConsumable(ERSConsumable.POISON_CONSUMABLE) then
    begin
      State := 'DRINK_ANTIPOISON';
      Exit(State);
    end;
  end;

  if MainScreen.FindGrave then
    Exit('PLAYER_DEAD');

  Self.CheckSlayerTask;

  if Self.NeedBracelet then
    Exit('NEED_BRACELET');

  if Self.NeedBoost then
  begin
    State := 'DRINK_BOOST';
    Exit(State);
  end;

  if DoingSpec and Self.CanSpec then
  begin
    State := 'SPEC_MONSTER';
    Exit(State);
  end;

  if Self.CanSpec then
  begin
    State := 'USE_SPECIAL_ATT';
    Exit(State);
  end;

  if Self.NeedRegear then
  begin
    State := 'REEQUIP_GEAR';
    Exit(State);
  end;

  if not MainScreen.InCombat then
  begin
    State := 'ATTACK_MONSTER';
    Exit(State);
  end;

  Result := 'WAIT_IN_COMBAT';
end;


//Check for pending action combat handler is taking care of and do them.
procedure TCombatHandler.DoActions(HandlerState: String = '');
begin
  if HandlerState = '' then
    HandlerState := Self.GetState;

  case HandlerState of
    'EAT_FOOD':         Inventory.Consume(ERSConsumable.HEALTH_CONSUMABLE);
    'DRINK_PRAYER':     Inventory.Consume(ERSConsumable.PRAYER_CONSUMABLE);
    'DRINK_ANTIFIRE':   Inventory.Consume(ERSConsumable.ANTI_FIRE_CONSUMABLE);
    'DRINK_ANTIVENOM':  Inventory.Consume(ERSConsumable.VENOM_CONSUMABLE);
    'DRINK_ANTIPOISON': Inventory.Consume(ERSConsumable.POISON_CONSUMABLE);
    'DRINK_BOOST':      Inventory.Consume(ERSConsumable.BOOST_CONSUMABLE);
    'ENABLE_QPRAY':     Minimap.EnablePrayer;
    'NEED_BRACELET':    Self.EquipBracelet;
    'SPEC_MONSTER':     Self.WalkAttackMonster;
    'USE_SPECIAL_ATT':  Self.DoSpec;
    'REEQUIP_GEAR':     Self.ReGear;
    'ATTACK_MONSTER':   Self.WalkAttackMonster;
    'WAIT_IN_COMBAT':   MainScreen.WaitInCombat(InCombatTimer.Length);
    'LOW_HEALTH', 'LOW_PRAYER', 'NO_ANTIFIRE', 'PLAYER_DEAD':
      Self.Terminate;
  end;

  if LootEnabled and not DoingSpec then
    case HandlerState of
      'EAT_FOOD', 'DRINK_PRAYER', 'DRINK_ANTIFIRE', 'DRINK_ANTIVENOM',
      'DRINK_ANTIPOISON', 'DRINK_BOOST', 'ENABLE_QPRAY', 'NEED_BRACELET',
      'ATTACK_MONSTER', 'WAIT_IN_COMBAT':
      Self.Loot;
    end;
end;

var
  CombatHandler: TCombatHandler;

function TRSXPBar.EarnedXP: Boolean; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and Result then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;

function TRSMainScreen.FindHitsplats: TRSHitsplatArray; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and (Result <> []) then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;

function TRSMainScreen.FindDepletedHPBar: Boolean;
var
  Bar: TRSHPBar;
begin
  for Bar in Self.FindHPBars do
    if Bar.Percent = 0 then
      Exit(True);
end;

function TRSMainScreen.InCombat: Boolean; override;
begin
  Result := (CombatHandler.IsSetup and not CombatHandler.InCombatTimer.IsFinished)
            or XPBar.EarnedXP or (Self.FindHitsplats <> []);
end;
