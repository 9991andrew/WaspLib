{$DEFINE WL_MAGIC_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function TRSMagic.CastSpell(Spell: ERSStandardSpell): Boolean; override;
var
  Selected: ERSStandardSpell;
begin
  if not Self.Open() or not Self.IsSpellBook(ERSSpellBook.STANDARD) then
    Exit(False);

  if (Selected := Self.GetSelectedStandardSpell()) = Spell then
    Exit(True);

  if (Selected <> ERSStandardSpell.UNKNOWN) then
    Mouse.Click(Self.GetSpellBox(Selected), MOUSE_LEFT);

  Mouse.Click(Self.GetSpellBox(Spell), MOUSE_LEFT);

  Result := WaitUntil((Self.IsOpen and (Self.GetSelectedStandardSpell = Spell)) or Inventory.IsOpen, 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSMagic.CastSpell(Spell: ERSAncientSpell): Boolean; override;
var
  Selected: ERSAncientSpell;
begin
  if not Self.Open() or not Self.IsSpellBook(ERSSpellBook.ANCIENT) then
    Exit(False);

  if (Selected := Self.GetSelectedAncientSpell()) = Spell then
    Exit(True);

  if (Selected <> ERSAncientSpell.UNKNOWN) then
    Mouse.Click(Self.GetSpellBox(Selected), MOUSE_LEFT);

  Mouse.Click(Self.GetSpellBox(Spell), MOUSE_LEFT);

  Result := WaitUntil((Self.IsOpen and (Self.GetSelectedAncientSpell = Spell)) or Inventory.IsOpen, 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSMagic.CastSpell(Spell: ERSLunarSpell): Boolean; override;
var
  Selected: ERSLunarSpell;
begin
  if not Self.Open() or not Self.IsSpellBook(ERSSpellBook.LUNAR) then
    Exit(False);

  if (Selected := Self.GetSelectedLunarSpell()) = Spell then
    Exit(True);

  if (Selected <> ERSLunarSpell.UNKNOWN) then
    Mouse.Click(Self.GetSpellBox(Selected), MOUSE_LEFT);

  Mouse.Click(Self.GetSpellBox(Spell), MOUSE_LEFT);

  Result := WaitUntil((Self.IsOpen and (Self.GetSelectedLunarSpell = Spell)) or Inventory.IsOpen, 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSMagic.CastSpell(Spell: ERSArceuusSpell): Boolean; override;
var
  Selected: ERSArceuusSpell;
begin
  if not Self.Open() or not Self.IsSpellBook(ERSSpellBook.ARCEUUS) then
    Exit(False);

  if (Selected := Self.GetSelectedArceuusSpell()) = Spell then
    Exit(True);

  if (Selected <> ERSArceuusSpell.UNKNOWN) then
    Mouse.Click(Self.GetSpellBox(Selected), MOUSE_LEFT);

  Mouse.Click(Self.GetSpellBox(Spell), MOUSE_LEFT);

  Result := WaitUntil((Self.IsOpen and (Self.GetSelectedArceuusSpell = Spell)) or Inventory.IsOpen, 50, SRL.TruncatedGauss(1000, 2000));
end;


function TRSMagic.RandomSpellNearby(Spell: ERSStandardSpell): ERSStandardSpell;
var
  SpellBox: TBox := Self.GetSpellBox(Spell);
  SpellsBoxes: TBoxArray := Self.GetSpellBoxes;
  I: Int32;
  Points: TPointArray;
begin
  SpellsBoxes.Remove(SpellBox);
  if SpellsBoxes = [] then
    Self.Fatal('RandomSpellNearby: No Spell to choose from');

  SetLength(Points, Length(SpellsBoxes));
  for I := 0 to High(Points) do
    Points[I] := SRL.RandomPoint(SpellsBoxes[I]);

  Points.Sort(Self.GetSpellBox(Spell).Middle);

  Result := ERSStandardSpell(Self.PointToSpell(Points[SRL.TruncatedGauss(0, High(SpellsBoxes))]));
end;

function TRSMagic.RandomSpellNearby(Spell: ERSAncientSpell): ERSAncientSpell; overload;
var
  SpellBox: TBox := Self.GetSpellBox(Spell);
  SpellsBoxes: TBoxArray := Self.GetSpellBoxes;
  I: Int32;
  Points: TPointArray;
begin
  SpellsBoxes.Remove(SpellBox);
  if SpellsBoxes = [] then
    Self.Fatal('RandomSpellNearby: No Spell to choose from');

  SetLength(Points, Length(SpellsBoxes));
  for I := 0 to High(Points) do
    Points[I] := SRL.RandomPoint(SpellsBoxes[I]);

  Points.Sort(Self.GetSpellBox(Spell).Middle);

  Result := ERSAncientSpell(Self.PointToSpell(Points[SRL.TruncatedGauss(0, High(SpellsBoxes))]));
end;

function TRSMagic.RandomSpellNearby(Spell: ERSLunarSpell): ERSLunarSpell; overload;
var
  SpellBox: TBox := Self.GetSpellBox(Spell);
  SpellsBoxes: TBoxArray := Self.GetSpellBoxes;
  I: Int32;
  Points: TPointArray;
begin
  SpellsBoxes.Remove(SpellBox);
  if SpellsBoxes = [] then
    Self.Fatal('RandomSpellNearby: No Spell to choose from');

  SetLength(Points, Length(SpellsBoxes));
  for I := 0 to High(Points) do
    Points[I] := SRL.RandomPoint(SpellsBoxes[I]);

  Points.Sort(Self.GetSpellBox(Spell).Middle);

  Result := ERSLunarSpell(Self.PointToSpell(Points[SRL.TruncatedGauss(0, High(SpellsBoxes))]));
end;

function TRSMagic.RandomSpellNearby(Spell: ERSArceuusSpell): ERSArceuusSpell; overload;
var
  SpellBox: TBox := Self.GetSpellBox(Spell);
  SpellsBoxes: TBoxArray := Self.GetSpellBoxes;
  I: Int32;
  Points: TPointArray;
begin
  SpellsBoxes.Remove(SpellBox);
  if SpellsBoxes = [] then
    Self.Fatal('RandomSpellNearby: No Spell to choose from');

  SetLength(Points, Length(SpellsBoxes));
  for I := 0 to High(Points) do
    Points[I] := SRL.RandomPoint(SpellsBoxes[I]);

  Points.Sort(Self.GetSpellBox(Spell).Middle);

  Result := ERSArceuusSpell(Self.PointToSpell(Points[SRL.TruncatedGauss(0, High(SpellsBoxes))]));
end;
