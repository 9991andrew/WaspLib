{$DEFINE WL_STRING_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

procedure String.Spacer(CharAmount: Int32 = 10);
var
  i: Int32;
begin
  for i := 0 to (CharAmount - Self.Len()) do
    Self += ' ';
end;

procedure String.Spacer(Char: String; CharAmount: Int32 = 10); overload;
var
  i: Int32;
begin
  for i := 0 to (CharAmount - Self.Len()) do
    Self += Char;
end;


function StringSpacer(S: String; CharAmount: Int32 = 10): String;
begin
  Result := S;
  Result.Spacer(CharAmount);
end;

function StringSpacer(Number: Int64; CharAmount: Int32 = 10): String; overload;
begin
  Result := IntToStr(Number);
  Result.Spacer(CharAmount);
end;

function StringSpacer(Number: Extended; CharAmount: Int32 = 10): String; overload;
begin
  Result := IntToStr(Round(Number));
  Result.Spacer(CharAmount);
end;



function StringSpacer(S, Char: String; CharAmount: Int32 = 10): String; overload;
begin
  Result := S;
  Result.Spacer(Char, CharAmount);
end;

function StringSpacer(Number: Int64; Char: String; CharAmount: Int32 = 10): String; overload;
begin
  Result := IntToStr(Number);
  Result.Spacer(Char, CharAmount);
end;

function StringSpacer(Number: Extended; Char: String; CharAmount: Int32 = 10): String; overload;
begin
  Result := IntToStr(Round(Number));
  Result.Spacer(Char, CharAmount);
end;


function String.Contains(SubString: String): Boolean;
begin
  Result := Self.Pos(SubString) > 0;
end;

function String.Contains(SubStrings: TStringArray): Boolean; overload;
var
  Str: String;
begin
  Result := False;
  for Str in SubStrings do
    if Self.Contains(Str) then
      Exit(True);
end;

