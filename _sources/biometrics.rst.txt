
Biometrics
==========
Methods related to biometrics that make your account behave in a unique way.


------------

var BioHash
~~~~~~~~~~~
  Global BioHash variable.
  BioHash is sort of a unique ID of each account and can be used to influence several things.


------------

Antiban.SetupBiometrics
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAntiban.SetupBiometrics;

This comes straight from older SRL versions.
This basically sets up our BioHash which is a hash of the current player login username. Because usernames are unique, so will the BioHash.


------------

Antiban.GetInfluencer
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TAntiban.GetInfluencer: Extended;

This generates a random number that is influenced by BioHash.
There are times you will not want to use BioHash itself because it's value is static, this function let's you get a number that is random but heavily influenced by BioHash.

Example
-------
.. code-block:: pascal  

  Wait(Round(3000 * Antiban.GetInfluencer)));


------------

Antiban.GetUniqueNumber
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TAntiban.GetUniqueNumber(Input: Extended): Extended;
  function TAntiban.GetUniqueNumber(Input, Sum: Extended): Extended; overload;
  function TAntiban.GetUniqueNumber(Input, Min, Max: Extended): Extended; overload;

This generates a unique number based on your **Input**.
The overloaded functions allow you to use some extra parameters for this like:
  Sum an amount to the result, so **Sum** will always be the minimum value you get.
  Min and Max cap. The number generated will be between **Min** and **Max**.

Example
-------
.. code-block:: pascal  

  FoodAmount := Antiban.GetUniqueNumber(7, 3, 15);


------------

Antiban.GetUniqueAverage
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TAntiban.GetUniqueAverage(Input: Extended; Iterations: Integer): Extended;
  function TAntiban.GetUniqueAverage(Input, Sum: Extended; Iterations: Integer): Extended; overload;
  function TAntiban.GetUniqueAverage(Input, Min, Max: Extended; Iterations: Integer): Extended; overload;

Functions to test **Antiban.GetUniqueNumber**.
It will run Antiban.GetUniqueNumber for how many **Iterations** you specify and average the results out.
Useful to know more or less what result to expect from your input.

Example
-------
.. code-block:: pascal  

  WriteLn Antiban.GetUniqueAverage(7, 3, 15, 500);


------------

Antiban.BioDice
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TAntiban.BioDice: Boolean;

Throws a **SRL.Dice** heavily skewed in certain directions depending on your BioHash.
BioHashes smaller than **0.15** will always return **False**.
BioHashes bigger than **0.80** will always return **True**.
BioHashes between 0.15 and 0.80 will randomly return True or False with true being more probable for higher BioHashes.

Example
-------
.. code-block:: pascal  

  UseBankEarly := Antiban.BioDice;


------------

Antiban.InvertedBioDice
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TAntiban.InvertedBioDice: Boolean;

Inverted **Antiban.BioDice**.


------------
