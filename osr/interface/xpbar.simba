{$DEFINE WL_XPBAR_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const
  XPDROP_COLORS: TIntegerArray = [
    $FFFFFF,
    $FFC8C8,
    $FF00FF,
    $C8FFC8,
    $64FF64,
    $40FFFF,
    $1F98FF,
    $C8C8FF
  ];

var
  XPDropColor: Int32;

function TRSXPBar.Open: Boolean;
begin
  if Self.IsOpen then Exit(True);

  Mouse.Click(Self.GetButtonCircle, MOUSE_LEFT);

  Result := Self.IsOpen;
end;

function TRSXPBar.FindXPDrop: Boolean;
var
  TPA: TPointArray;
  B: TBox := [Self.X2 - 20, Self.Y2, Self.X2, Self.Y2 + 105];
  i: Int32;
begin
  if XPDropColor <> 0 then
    Result := FindColors(TPA, XPDropColor, B)
  else
  begin
    for i := 0 to High(XPDROP_COLORS) do
    begin
      Result := FindColors(TPA, XPDROP_COLORS[i], B);
      if Result then
      begin
        XPDropColor := XPDROP_COLORS[i];
        Break;
      end;
    end;
  end;
end;

function TRSXPBar.WaitXPDrop(WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindXPDrop, Interval, WaitTime);
end;

procedure TRSXPBar.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  with Self.GetButtonCircle() do
    Bitmap.DrawCircle([X, Y], Radius, $00FFFF);
  Bitmap.DrawBox([Self.X2 - 20, Self.Y2, Self.X2, Self.Y2 + 105], $FFFFFF);
  inherited;
end;
