{$DEFINE WL_ANTIBANEXTRA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}


//Antiban overrides:

//Makes inventory patterns more common to each player based on their BioHash.
function TRSInventory.RandomPattern: TIntegerArray; override;
const
  PATTERNS: T2DIntegerArray = [
    DROP_PATTERN_SNAKE, DROP_PATTERN_SPIRAL,
    DROP_PATTERN_REGULAR, DROP_PATTERN_TOPDOWN,
    DROP_PATTERN_SNAKE_R, DROP_PATTERN_TOPDOWN_R
  ];
var
  RandomCase: Double;
begin
  RandomCase := Antiban.GetUniqueNumber(Random(0, High(PATTERNS)), 0, High(PATTERNS));

  Result := Patterns[Round(RandomCase)];
end;

//overriden to use Bank.Close with biohash.
function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;
begin
  if Self.GetCurrentTab = Tab then
    Exit(True);

  if MainScreen.HasInterface and (Bank.IsOpen(False) or DepositBox.IsOpen) then
    MainScreen.CloseInterface;

  Result := inherited(Tab);
end;


function TRSAnvil.Close(Chance: Double = BioHash): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(Chance);
end;

function TRSCollectBox.Close(Chance: Double = BioHash): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(Chance);
end;

function TRSGrandExchange.Close(Chance: Double): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(Chance);
end;


function TRSChat.ClickOption(Text: String; Chance: Double; Colors: TIntegerArray = [CHAT_COLOR_BLACK, CHAT_COLOR_WHITE]): Boolean; overload;
var
  UseKeyboard: Boolean;
begin
  if Chance = BioHash then
    UseKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_CHANCE)
  else
    UseKeyboard := SRL.Dice(Chance);

  Result := Self.ClickOption(Text, UseKeyboard, Colors);
end;

function TRSChat.HandleLevelUp(Chance: Double = BioHash): Boolean; overload;
var
  UseKeyboard: Boolean;
begin
  if Chance = BioHash then
    UseKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_CHANCE)
  else
    UseKeyboard := SRL.Dice(Chance);

  Result := Self.HandleLevelUp(UseKeyboard);
end;

function TRSChat.ClickContinue(Chance: Double): Boolean; overload;
var
  UseKeyboard: Boolean;
begin
  if Chance = BioHash then
    UseKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_CHANCE)
  else
    UseKeyboard := SRL.Dice(Chance);

  Result := Self.ClickContinue(UseKeyboard);
end;


function TRSChooseOption.Select(Text: TStringArray; MouseAction: Int32 = MOUSE_LEFT; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean; override;
var
  Choices: TRSChooseOption_OptionArray;
  I, J: Int32;
begin
  if Self.Open then
  begin
    case Antiban.GetChance(EBioBehavior.REACTION_SPEED) of
      0.00..0.30: Wait(0, 1000 + Antiban.GetUniqueNumber(1500, 500, 2000), wdRight);
      0.30..0.70: Wait(0, 500 + Antiban.GetUniqueNumber(1000, 500, 2000), wdMean);
      else        Wait(0, 500 + Antiban.GetUniqueNumber(750, 500, 1000), wdLeft);
    end;

    Choices := Self.GetOptions;

    for I := 0 to High(Choices) do
      for J := 0 to High(Text) do
        if (CaseSensitive and (Text[J] in Choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[J]) in Lowercase(Choices[I].Text))) then
        begin
          Self.Select(Choices[I], MouseAction);

          Exit(True);
        end;

    if CloseIfNotFound then
    begin
      WaitEx(500, 250);

      Self.Close;
    end;
  end;
end;

function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean; override;
var
  P: TPoint;
begin
  Result := True;

  if Self.ScreenWalk then
  begin
    Mouse.Move(Minimap.PointToMsRect(MinimapPoint).Mean);

    if not MainScreen.IsUpText('Walk here') then
      Exit(ChooseOption.Select('Walk here'));
  end else
  begin
    P := MinimapPoint.Random(-Randomness, Randomness);
    while not Minimap.IsPointOn(P) do
      P := MinimapPoint.Random(-Randomness, Randomness);

    Mouse.Move(P);
  end;

  Mouse.Click(MOUSE_LEFT);

  if (Randomness > 0) and (Random < Antiban.GetUniqueNumber(0.15, 0.1, 0.2)) then
    for 0 to Round(Antiban.GetUniqueNumber(2, 1, 3)) do
    begin
      Mouse.Click(Mouse.Position, MOUSE_LEFT);

      Wait(20, 150, wdLeft);
    end;
end;
