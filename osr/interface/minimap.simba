(*
Minimap
=======
Methods to handle Minimap. Extends SRL's Minimap.
*)

{$DEFINE WL_MINIMAP_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
Minimap.WaitMoving
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMinimap.WaitMoving(DoAntiban: Boolean = True);

Gives **Minimap.WaitPlayerMoving** the ability to perform antiban tasks while moving.

Example
-------

.. code-block:: pascal

  Minimap.WaitMoving;
*)
procedure TRSMinimap.WaitMoving(DoAntiban: Boolean = True);
var
  Timeout, Countdown: TCountDown;
  Moving: Boolean;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));
  Countdown.Timeout := GetTickCount + Round(SRL.TruncatedGauss(2500, 3500));

  repeat
    //Self.CheckRunEnergy();

    if DoAntiban then
      Antiban.WaitMovingTasks;

    Moving := Minimap.IsPlayerMoving;

    if Moving then Countdown.Restart;

  until Timeout.IsFinished or Countdown.IsFinished or not Minimap.HasFlag or not Moving;
end;

(*
Minimap.HasStamina
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.HasStamina;

**Minimap.HasStamina** returns true if we are stamina boosted.

Example
-------

.. code-block:: pascal

  WriteLn Minimap.HasStamina;
*)
function TRSMinimap.HasStamina: Boolean;
begin
  Result := SRL.CountColor(CTS0(2709951, 38), Self.GetRunCircle.Bounds) > 0;
end;

(*
Minimap.OnGroundLevel
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.OnGroundLevel;

**Minimap.OnGroundLevel** returns true if we are likely to be on the ground level.
This works by counting the amount of black in the minimap and might give false positives/negatives if there's more than 3500 black pixels on the minimap.

Example
-------

.. code-block:: pascal

  WriteLn Minimap.OnGroundLevel;
*)
function TRSMinimap.OnGroundLevel: Boolean;
var
  P: TPoint;
  TPA, FinalTPA: TPointArray;
begin
  if SRL.FindColors(TPA, 0, Minimap.Bounds) = 0 then
    Exit(True);

  for P in TPA do
    if SRL.PointInPoly(P, Minimap.GetPolygon) then
      FinalTPA += P;

  Result := Length(FinalTPA) < 3300;
end;


(*
Minimap.InPOH
~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.InPOH;

**Minimap.InPOH** returns true if we are in a POH.
This might give false positives if you are upstairs or in a place with few colors on the minimap.
It might also give false negatives if the POH is crowded.

Example
-------

.. code-block:: pascal

  WriteLn Minimap.InPOH;
*)
function TRSMinimap.InPOH: Boolean;
var
  TPA: TPointArray;
  ColorArray: TIntegerArray;
  BlackAmount: Int32;
  ColorAmount: Int32;
begin
  TPA := Self.GetPolygon.Connect;
  TPA.Fill;
  TPA := TPA.Erode(10);

  ColorArray := GetColors(TPA);
  BlackAmount := Length(ColorArray.FindAll(0));

  ClearSameIntegers(ColorArray);

  ColorAmount := Length(ColorArray);
  Result := (ColorAmount > 3) and (ColorAmount < 25) and (BlackAmount < 3500);
end;


(*
Minimap.FindRedArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.FindRedArrow(out TPA: TPointArray): Boolean;
.. pascal:: function TRSMinimap.FindRedArrow: Boolean; overload;

Returns true if there's a red arrow on minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow.

Example
-------

  Writeln Minimap.FindRedArrow;
*)
function TRSMinimap.FindRedArrow(out TPA: TPointArray): Boolean;
begin
  Result := (SRL.FindColors(TPA, CTS0(255, 0), Self.Bounds) > 0) and
            (Length(TPA) <= 84);

end;

function TRSMinimap.FindRedArrow: Boolean; overload;
var
  TPA: TPointArray;
begin
  Result := (SRL.FindColors(TPA, CTS0(255, 0), Self.Bounds) > 0) and
            (Length(TPA) <= 84);
end;

(*
Minimap.FindYellowArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.FindYellowArrow(out TPA: TPointArray): Boolean;
.. pascal:: function TRSMinimap.FindYellowArrow: Boolean; overload;

Returns true if there's a yellow arrow on minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow tip.

Example
-------

  Writeln Minimap.FindYellowArrow;
*)
function TRSMinimap.FindYellowArrow(out TPA: TPointArray): Boolean;
begin
  Result := (SRL.FindColors(TPA, CTS0(1767418, 0), Self.Bounds) > 0) and
            (Length(TPA) <= 16);

end;

function TRSMinimap.FindYellowArrow: Boolean; overload;
var
  TPA: TPointArray;
begin
  Result := (SRL.FindColors(TPA, CTS0(1767418, 0), Self.Bounds) > 0) and
            (Length(TPA) <= 16);
end;

(*
MainScreen.FindArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.FindArrow(out TPA: TPointArray): Boolean;
.. pascal:: function TRSMainScreen.FindArrow: Boolean; overload;

Returns true if there's a red or yellow arrow on screen.
If a TPointArray is passed as a parameter it will return with the location of the arrow.

Example
-------

  Writeln MainScreen.FindArrow;
*)
function TRSMinimap.FindArrow(out TPA: TPointArray): Boolean;
begin
  Result := Self.FindYellowArrow(TPA) or Self.FindRedArrow(TPA);
end;

function TRSMinimap.FindArrow: Boolean; overload;
begin
  Result := Self.FindYellowArrow or Self.FindRedArrow;
end;


(*
Minimap.WaitRedArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.WaitRedArrow(TPA: TPointArray; WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;
.. pascal:: function TRSMinimap.WaitRedArrow(WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;

Waits **WaitTime** for a Red arrow to appear on Minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow tip.

Example
-------

  Writeln Minimap.WaitRedArrow;
*)
function TRSMinimap.WaitRedArrow(out TPA: TPointArray; WaitTime: Int32 = 120; Interval: Int32 = -1): Boolean;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindRedArrow(TPA), Interval, WaitTime);
end;

function TRSMinimap.WaitRedArrow(WaitTime: Int32 = 120; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindRedArrow, Interval, WaitTime);
end;

(*
Minimap.WaitYellowArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.WaitYellowArrow(TPA: TPointArray; WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;
.. pascal:: function TRSMinimap.WaitYellowArrow(WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;

Waits **WaitTime** for a yellow arrow to appear on Minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow tip.

Example
-------

  Writeln Minimap.WaitYellowArrow;
*)
function TRSMinimap.WaitYellowArrow(out TPA: TPointArray; WaitTime: Int32 = 120; Interval: Int32 = -1): Boolean;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindYellowArrow(TPA), Interval, WaitTime);
end;

function TRSMinimap.WaitYellowArrow(WaitTime: Int32 = 120; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindYellowArrow, Interval, WaitTime);
end;

(*
Minimap.WaitArrow
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.WaitArrow(TPA: TPointArray; WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;
.. pascal:: function TRSMinimap.WaitArrow(WaitTime: Int32 = 600; Interval: Int32 = -1): Boolean;

Waits **WaitTime** for a yellow or red arrow to appear on Minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow.

Example
-------

  Writeln Minimap.WaitArrow;
*)
function TRSMinimap.WaitArrow(out TPA: TPointArray; WaitTime: Int32 = 120; Interval: Int32 = -1): Boolean;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindArrow(TPA), Interval, WaitTime);
end;

function TRSMinimap.WaitArrow(WaitTime: Int32 = 120; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindArrow, Interval, WaitTime);
end;


