{$DEFINE WL_MAINSCREEN_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

//I'm not sure if this is a good name, but this removed any size limit set in a finder.
procedure TRSObjectFinder.Unlimit;
begin
  Self.MinLongSide := 0;
  Self.MaxLongSide := 0;
  Self.MinShortSide := 0;
  Self.MaxShortSide := 0;
end;

function TRSObjectFinder.Unlimited: TRSObjectFinder;
begin
  Result := Self;
  Result.MinShortSide := 0;
  Result.MaxShortSide := 0;
  Result.MinLongSide := 0;
  Result.MaxLongSide := 0;
end;

function TRSMainScreen.IsVisible(P: TPoint): Boolean; override;
begin
  Result := Self.Bounds.Contains(P);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if InterfaceArea.HasInterface and InterfaceArea.Bounds.Contains(P) then
    begin
      if Bank.IsOpen and Bank.Bounds.Contains(P) then
        Exit(False);
      if Anvil.IsOpen and Anvil.Bounds.Contains(P) then
        Exit(False);
    end;
    if Chat.IsOpen() and Chat.Bounds().Contains(P) then
      Exit(False);
    if ChatButtons.Bounds().Contains(P) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(P) then
      Exit(False);
    if GameTabs.Bounds().Contains(P) then
      Exit(False);
  end;
end;

function TRSMainScreen.IsVisible(TPA: TPointArray): Boolean; overload;
begin
  Result := Self.Bounds.Contains(TPA);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if InterfaceArea.HasInterface and InterfaceArea.Bounds.Contains(TPA) then
    begin
      if Bank.IsOpen and Bank.Bounds.Contains(TPA) then
        Exit(False);
      if Anvil.IsOpen and Anvil.Bounds.Contains(TPA) then
        Exit(False);
    end;
    if Chat.IsOpen and Chat.Bounds.Contains(TPA) then
      Exit(False);
    if ChatButtons.Bounds.Contains(TPA) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(TPA) then
      Exit(False);
    if GameTabs.Bounds.Contains(TPA) then
      Exit(False);
  end;
end;

function TRSMainScreen.IsVisible(B: TBox): Boolean; overload;
begin
  Result := Self.Bounds.Contains(B);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if InterfaceArea.HasInterface and InterfaceArea.Bounds.Contains(B) then
    begin
      if Bank.IsOpen and Bank.Bounds.Contains(B) then
        Exit(False);
      if Anvil.IsOpen and Anvil.Bounds.Contains(B) then
        Exit(False);
    end;
    if Chat.IsOpen() and Chat.Bounds().Contains(B) then
      Exit(False);
    if ChatButtons.Bounds().Contains(B) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(B) then
      Exit(False);
    if GameTabs.Bounds().Contains(B) then
      Exit(False);
  end;
end;

function TRSMainScreen.IsVisible(Rect: TRectangle): Boolean; overload;
begin
  Result := Self.Bounds.Contains(Rect);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if InterfaceArea.HasInterface and InterfaceArea.Bounds.Contains(Rect) then
    begin
      if Bank.IsOpen and Bank.Bounds.Contains(Rect) then
        Exit(False);
      if Anvil.IsOpen and Anvil.Bounds.Contains(Rect) then
        Exit(False);
    end;
    if Chat.IsOpen() and Chat.Bounds().Contains(Rect) then
      Exit(False);
    if ChatButtons.Bounds().Contains(Rect) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(Rect) then
      Exit(False);
    if GameTabs.Bounds().Contains(Rect) then
      Exit(False);
  end;
end;


function TRSMainScreen.GetAdjacentTiles: TRectArray;
var
  Tiles: TPointArray;
  Tile: TPoint;
begin

  Tiles := [
    [Minimap.Center.X + 4, Minimap.Center.Y],
    [Minimap.Center.X - 4, Minimap.Center.Y],
    [Minimap.Center.X, Minimap.Center.Y + 4],
    [Minimap.Center.X, Minimap.Center.Y - 4]
  ];

  for Tile in Tiles do
    Result += Minimap.StaticToMsRect(Tile, 0);
end;

procedure TRSMainScreen.DebugAdjacentTiles;
var
  Bitmap: TMufasaBitmap;
  Rects: array of TRectangle;
  Rect: TRectangle;
begin

  Rects := Self.GetAdjacentTiles;

  Bitmap.FromClient;

  for Rect in Rects do
    Bitmap.DrawRect(Rect, $ffffff);

  ShowBitmap(Bitmap);
  Bitmap.Free;
end;

function TRSMainScreen.InMultiCombat: Boolean;
var
  B: TBox;
begin
  case RSClient.Mode of
    ERSClientMode.FIXED:
      begin
        B := InterfaceArea.Bounds;
        B.X1 := B.X2 - 30;
        B.Y1 := B.Y2 - 30;
      end;
    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        B := Minimap.Bounds;
        B.X1 := B.X2 - 30;
        B.Y1 := B.Y2 + 5;
        B.Y2 := B.Y1 + 30;
      end;
  end;

  Result := (SRL.CountColor(CTS0(4902655, 0), B) > 0) and (SRL.CountColor(CTS0(19109, 0), B) > 0)
end;
