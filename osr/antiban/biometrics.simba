{$DEFINE WL_BIOMETRICS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

var
  BioHash: Extended;

// This biometrics "system" are straight out of older SRL versions.
procedure TAntiban.SetupBiometrics;
var
  h, i: UInt32;
  k: String;
begin
  if (Length(Login.Players) = 0) or (BioHash <> 0) then
    Exit;

  k := Login.GetPlayer.User;
  h := $811C9DC5;
  for i:=1 to Length(k) do
    h := (h * $1000193) xor Ord(k[i]);

  BioHash := h / $FFFFFFFF;
end;


//Get a random multiplier based on the player BioHash.
function TAntiban.GetInfluencer: Extended;
begin
  Result := (Random + BioHash) * BioHash * BioHash;
end;

//Influence a number with BioHash.
function TAntiban.GetUniqueNumber(Input: Extended): Extended;
begin
  Result := Input * Self.GetInfluencer;
end;

//Influence a number with BioHash and add Sum to it.
function TAntiban.GetUniqueNumber(Input, Sum: Extended): Extended; overload;
begin
  Result := Input * Self.GetInfluencer + Sum;
end;

//Influence a number with BioHash without going below Min or over Max.
function TAntiban.GetUniqueNumber(Input, Min, Max: Extended): Extended; overload;
begin
  repeat
    Result := Input * Self.GetInfluencer;
  until (Result >= Min) or (Result <= Max);
end;


//Tools to test TAntiban.GetUniqueNumber
function TAntiban.GetUniqueAverage(Input: Extended; Iterations: Integer): Extended;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input);

  Result := RandomCases.Mean;
end;

function TAntiban.GetUniqueAverage(Input, Sum, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input, Sum);

  Result := RandomCases.Mean;
end;

function TAntiban.GetUniqueAverage(Input, Min, Max, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input, Min, Max);

  Result := RandomCases.Mean;
end;


//Probability based on player's BioHash. Useful for close with escape, etc.
function TAntiban.BioDice: Boolean;
begin
  case BioHash of
    0.00..0.15: Result := False;
    0.15..0.50: Result := SRL.Dice(BioHash * 90);
    0.50..0.80: Result := SRL.Dice(BioHash * 110);
    else        Result := True;
  end;
end;

function TAntiban.InvertedBioDice: Boolean;
begin
  Result := not Self.BioDice;
end;

