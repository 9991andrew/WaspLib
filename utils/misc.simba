{$DEFINE WL_MISC_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
  TRSItemInfo = record
    WikiRealTimeInfo: String;
    WikiMappingInfo: String;
    LastCheckTick: UInt64;

    RSItem: TRSItem;
    ItemID: String;

    HighPrice: Int32;
    LowPrice: Int32;

    StoreValue: Int32;
    LowAlchemy: Int32;
    HighAlchemy: Int32;
    GELimit: Int32;
  end;


procedure TRSItemInfo.Setup;
begin
  WikiRealTimeInfo := GetPage('https://prices.runescape.wiki/api/v1/osrs/latest');
  WikiMappingInfo  := GetPage('https://prices.runescape.wiki/api/v1/osrs/mapping');
  LastCheckTick    := GetTickCount;
end;


function TRSItemInfo.GetRealTime: String;
begin
  Result := WikiRealTimeInfo.After('"' + ItemID + '":').Before('},');
end;

function TRSItemInfo.GetMapping: String;
begin
  Result := WikiMappingInfo.After('"id":' + ItemID + ',').Before('},');
end;


procedure TRSItemInfo.SetInfo(Item: TRSItem);
begin
  if Item = RSItem then
    Exit;

  if (LastCheckTick + 1200000) < GetTickCount then
    Self.Setup;

  Item := VarToStr(Item);

  if VarToStr(Item).IsDigit() then
    ItemID := Item
  else
  begin
    ItemID := ItemFinder.ItemNames.GetValues(Item);
    if (ItemID = '') then
      ItemFinder.Fatal('Unknown item: ' + Item);
  end;

  HighPrice := StrToInt(Self.GetRealTime.After('"high":').Before(','));
  LowPrice := StrToInt(Self.GetRealTime.After('"low":').Before(','));

  StoreValue := StrToInt(Self.GetMapping.After('"value":').Before(','));
  LowAlchemy := StrToInt(Self.GetMapping.After('"lowalch":').Before(','));
  HighAlchemy := StrToInt(Self.GetMapping.After('"highalch":').Before(','));
  GELimit := StrToInt(Self.GetMapping.After('"limit":').Before(','));
end;


function TRSItemInfo.GetHighPrice(Item: TRSItem): Int32;
begin
  if Item <> RSItem then
    Self.SetInfo(Item);

  Result := HighPrice;
end;

function TRSItemInfo.GetLowPrice(Item: TRSItem): Int32;
begin
  if Item <> RSItem then
    Self.SetInfo(Item);

  Result := LowPrice;
end;


function TRSItemInfo.GetStoreValue(Item: TRSItem): Int32;
begin
  if Item <> RSItem then
    Self.SetInfo(Item);

  Result := StoreValue;
end;

function TRSItemInfo.GetHighAlchemy(Item: TRSItem): Int32;
begin
  if Item <> RSItem then
    Self.SetInfo(Item);

  Result := HighAlchemy;
end;

function TRSItemInfo.GetLowAlchemy(Item: TRSItem): Int32;
begin
  if Item <> RSItem then
    Self.SetInfo(Item);

  Result := LowAlchemy;
end;

function TRSItemInfo.GetGELimit(Item: TRSItem): Int32;
begin
  if Item <> RSItem then
    Self.SetInfo(Item);

  Result := GELimit;
end;


function TRSItemInfo.GetAveragePrice(Item: TRSItem): Int32;
begin
  if Item <> RSItem then
    Self.SetInfo(Item);

  if ((HighPrice = 0) and (LowPrice = 0)) then
    Exit
  else if HighPrice = 0 then
    Result := LowPrice
  else if LowPrice = 0 then
    Result := HighPrice
  else
    Result := Round((HighPrice + LowPrice) / 2);
end;



function NumberPerHour(Number: UInt64): Int32;
begin
  Result := Round((Number / GetTimeRunning) * ONE_HOUR);
end;

function NumberPerHour(Number: Extended): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number));
end;

function NumberPerHour(Number, Timer: UInt64): Int32; overload;
begin
  Result := Round((Number / Timer) * ONE_HOUR);
end;

function NumberPerHour(Number: Extended; Timer: UInt64): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number), Timer);
end;


procedure TWaspLib.UpdateClientState;
begin
  RSClient.DetectClientMode(True);
  RSClient.ClientModeChanged;
  if Options.IsOpen and (Options.GetCurrentTab = ERSOptionsTab.CONTROLS) then
    MM2MS.ZoomLevel := Options.GetZoomLevel;
end;

function TWaspLib.DoAntiban(CheckBreaks: Boolean = True; CheckSleeps: Boolean = True): Boolean;
begin
  Antiban.DismissRandom;
  Self.Activity.Pause();

  try
    Result := Antiban.DoAntiban(CheckBreaks, CheckSleeps);
  finally
    Self.Activity.Resume();
  end;
end;

procedure TWaspLib.ProcessWhileWaiting;
var
  TitleStr, ActionStr, RunTimeStr: String;
  TActionsStr, TActionHourStr, TProfitStr, TProfitHourStr: String;
  TitleLength: Int32;
begin
  TotalProfit := TotalActions * ActionProfit;

  if (GetTickCount - StatsDebugTick) > 1000 then
  begin
    ClearDebug;

    TitleStr := ScriptFile.After(ScriptPath).Before('.simba');
    TitleLength := TitleStr.Len;
    TitleStr := '+' + PadL( ('|  ' + TitleStr + '  |'), 40, '=');
    TitleStr := PadR(TitleStr, 80 - TitleLength, '=') + '+';

    TitleLength := TitleStr.Len;
    ActionStr   := PadR((' Action        : ' + Action), Round(TitleLength/2));
    RunTimeStr  :=       ' Runtime       : ' + SRL.MsToTime(GetTimeRunning, Time_Short);
    TActionsStr := PadR((' Total Actions : ' + ToStr(TotalActions)), Round(TitleLength/2));
    TActionHourStr :=    ' Actions/Hour  : ' + ToStr(NumberPerHour(TotalActions));
    TProfitStr  := PadR((' Total Profit  : ' + SRL.FormatNumber(TotalProfit)), Round(TitleLength/2));
    TProfitHourStr :=    ' Profit/Hour   : ' + SRL.FormatNumber(NumberPerHour(TotalProfit));

    WriteLn(TitleStr);
    Writeln(ActionStr, RunTimeStr);
    Writeln(TActionsStr, TActionHourStr);
    Writeln(TProfitStr, TProfitHourStr);
    if ExtraInfo.Len > 0 then
      Writeln(ExtraInfo);

    WriteLn('+', PadR('-', TitleLength - 2, '-'),'+');

    StatsDebugTick := GetTickCount();
  end;
end;

var
  ItemInfo: TRSItemInfo;
