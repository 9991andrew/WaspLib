{$DEFINE WL_BASESCRIPT_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TBaseScript = record
    Name: String;
    Version: String;

    IsSetup: Boolean;

    TimeRunning: TStopwatch;
    StatsDebugTick: Int64;

    Action: String;
    ExtraInfo: String;

    ActionProfit: Int32;
    TotalActions: Int32;
    TotalProfit: Int32;
  end;

  TBaseWalkerScript = record(TBaseScript)
    RSW: TRSWalker;
  end;

  TBaseBankScript = record(TBaseWalkerScript)
    ScriptBank: PRSObject;    //Current bank for the script.
    BankTab: Int32;           //BankTab cache.

    ItemLeftAmount: Int32;         //Used to cache items left to make/build/whatever to pre-hover the bank.
    HoveringBank: Boolean;    //Used to cache uptext result.
    BankEmpty: Boolean;       //Used to cache if Bank doesn't have more of a certain item.
    CollectEmpty: Boolean;    //Used to cache if CollectBox doesn't have more of a certain item.
    CollectTimer: TCountDown; //Used to reset CollectEmpty after a while.
  end;


procedure TBaseScript.Init; //override me to add more stuff.
begin
  if IsSetup then Exit;
  IsSetup := True;

  {$IFDEF SRL_USE_REMOTEINPUT}
  if RemoteInputEnabled then RSClient.RemoteInput.Setup();
  {$ENDIF}

  Antiban.Setup;
  WL.Activity.Init(260000);
  TimeRunning.Start;
  //override me to add more stuff.
end;

function TBaseScript.DoAntiban(CheckBreaks: Boolean = True; CheckSleeps: Boolean = True): Boolean;
begin
  Antiban.DismissRandom;
  TimeRunning.Pause;
  WL.Activity.Pause;

  try
    Result := Antiban.DoAntiban(CheckBreaks, CheckSleeps);
  finally
    TimeRunning.Resume;
    WL.Activity.Resume;
  end;
end;

procedure TBaseScript.ProcessWhileWaiting;
var
  TitleStr, ActionStr, RunTimeStr: String;
  ActionsStr, ActionHourStr, ProfitStr, ProfitHourStr, AccoundIDStr: String;
  TitleLength: Int32;
  ElapsedTime: UInt64;
begin
  TotalProfit := TotalActions * ActionProfit;

  if (GetTickCount - StatsDebugTick) > 1000 then
  begin
    ClearDebug;
    ElapsedTime := TimeRunning.ElapsedTime;

    TitleStr    := Name + ' ' + Version;
    TitleLength := TitleStr.Len;
    TitleStr    := '+' + PadL( ('|  ' + TitleStr + '  |'), 40, '=');
    TitleStr    := PadR(TitleStr, 80 - TitleLength, '=') + '+';

    TitleLength   := TitleStr.Len;
    ActionStr     := PadR((' Action        : ' + Action), Round(TitleLength/2));
    RunTimeStr    :=       ' Runtime       : ' + SRL.MsToTime(ElapsedTime, Time_Short);
    ActionsStr    := PadR((' Total Actions : ' + ToStr(TotalActions)), Round(TitleLength/2));
    ActionHourStr :=       ' Actions/Hour  : ' + ToStr(NumberPerHour(TotalActions, ElapsedTime));
    ProfitStr     := PadR((' Total Profit  : ' + SRL.FormatNumber(TotalProfit)), Round(TitleLength/2));
    ProfitHourStr :=       ' Profit/Hour   : ' + SRL.FormatNumber(NumberPerHour(TotalProfit, ElapsedTime));
    AccoundIDStr  :=       ' BioHash       : ' + ToStr(BioHash);

    WriteLn(TitleStr);
    Writeln(ActionStr, RunTimeStr);
    Writeln(ActionsStr, ActionHourStr);
    Writeln(ProfitStr, ProfitHourStr);
    Writeln(AccoundIDStr);

    if ExtraInfo.Len > 0 then Writeln(ExtraInfo);

    WriteLn('+', PadR('-', TitleLength - 2, '-'),'+');

    StatsDebugTick := GetTickCount;
  end;
end;


procedure TBaseBankScript.Init; override;//override me to add more stuff.
begin
  inherited;

  BankTab := -1;
  CollectTimer.Init(600000);
  //override me to add more stuff.
end;


function TBaseBankScript.Terminate: Boolean;//override me to add more stuff.
begin
  for 0 to 5 do
  begin
    if InterfaceArea.HasInterface then
    begin
      if Result := Bank.IsOpen then Break
      else InterfaceArea.Close(SRL.Dice(90));
    end;

    if Result := Bank.WalkOpen(ScriptBank) then Break;
  end;
  //override me to add more stuff.
end;

procedure TBaseBankScript.CountItemsLeft(Item: TRSItem);
begin
  ItemLeftAmount := Inventory.CountItem(Item);
end;

function TBaseBankScript.ShouldHover: Boolean;
begin
  Result := ((ItemLeftAmount = 1) and SRL.Dice(10 + (90 * BioHash))) or
            ((ItemLeftAmount = 2) and SRL.Dice(5 + (75 * BioHash))) or
            ((ItemLeftAmount = 3) and SRL.Dice(5 + (60 * BioHash))) or
            ((ItemLeftAmount = 4) and SRL.Dice(45 * BioHash)) or
            ((ItemLeftAmount = 5) and SRL.Dice(30 * BioHash)) or
            ((ItemLeftAmount = 6) and SRL.Dice(10 * BioHash)) or
            SRL.Dice(5 * BioHash);
end;


function TBaseBankScript.Hover: Boolean;
begin
  Result := HoveringBank := Bank.Hover(ScriptBank);
end;
