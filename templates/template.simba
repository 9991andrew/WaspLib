{$DEFINE SRL_USE_REMOTEINPUT}
{$IFDEF WINDOWS}{$DEFINE SCRIPT_GUI}{$ENDIF}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex     := 0;
  AntibanEnabled        := True; //Enables Most Antiban
  BreaksEnabled         := True; //Enables Short Breaks
  SleepEnabled          := True; //Enables Sleep Breaks
  RemoteInputEnabled    := True; //Enables Remote Input
  ProgressReportEnabled := True; //Enables Graphical Progress Report
  ScriptDebugEnabled    := False; //Enables Script Debugging
end;

//Enum of tasks the script does.
type
  ETask = (
    TASK_TO_DO
  );

//setup current task in code. it also sets the default option in the GUI if everything is edited properly.
var
  CurrentTask: ETask := ETask.TASK_TO_DO;

//Enum of script states. used in the GetState() function to decide what we got to do next.
type
  EState = (
    WAIT_STATE
  );

//script record, all variables of the script should go here.
  TScript = record(TBaseWalkerScript)
    State: EState;
  end;

//Extra antiban specifically for this script.
procedure TAntiban.Setup; override;
begin
  inherited;

  Antiban.Skills := [ERSSkill.TOTAL];
  Antiban.MinZoom := 15;
  Antiban.MaxZoom := 40;
end;

//Script init function, use this to setup your variables.
procedure TScript.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  Self.Name :='Template Script';

  inherited;

  Self.RSW.Setup('mainland');

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();
end;

//GetState() is responsible for figuring out what we are doing and what we will be doing next.
function TScript.GetState(): EState;
begin
  Exit(EState.WAIT_STATE);
end;

//Main loop.
procedure TScript.Run(MaxActions: Int32; MaxTime: Int64);
begin
  ClearDebug();
  Self.Init(MaxActions, MaxTime);

  repeat
    Self.State := Self.GetState();
    Self.Action := ToStr(Self.State);  //Action printed on the proggie. maybe I should unwrap this some day and just use strings in Script.GetState() anyway

    //Run the appropiate command for each state.
    case Self.State of
      WAIT_STATE: Wait(500, 800);
    end;

    Self.DoAntiban();
  until Self.ShouldStop();  //Stops if MaxAtions or MaxTime have been reached.
end;

var
  Script: TScript;

type
  TConfig = record(TScriptForm)
    Selector: TLabeledCombobox;
  end;

procedure TConfig.StartScript(Sender: TObject);
begin
  Self.Init(Sender);

  CurrentTask := ETask(Self.Selector.Combobox.getItemIndex());

  MaxActions := StrToInt(Self.WLPanel.ActionLimit.GetText());
  MaxTime    := StrToInt64(Self.WLPanel.TimeLimit.GetText());
end;

procedure TConfig.Setup; override;
begin
  inherited;

  with Self.Selector do
  begin
    Init(Self.SSPanel.Panel);
    SetCaption('Task:');
    SetLeft(15);
    SetTop(25);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    Combobox.getItems.Add('Task to do');
    Combobox.setItemIndex(Ord(CurrentTask));
  end;

  Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
end;

procedure TConfig.Run; override;
begin
  Self.Setup(); //Extra panels can be added here by adding parameters.

  inherited;
end;

var
  Config: TConfig;

begin
  {$IFDEF SCRIPT_GUI}
  Sync(@Config.Run);
  {$ENDIF}
  Script.Run(MaxActions, MaxTime);
end.
