(*
Biometrics
==========
Methods related to biometrics that make your account behave in a unique way.
*)

{$DEFINE WL_BIOMETRICS_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

(*
var BioHash
~~~~~~~~~~~
  Global BioHash variable.
  BioHash is sort of a unique ID of each account and can be used to influence several things.
*)

var
  BioHash: Extended;
  Endurance: Double;
  Patience: Double;
  EnergyLevel: Double;
  EnergyDrain: Double;

  BioHashOverride: Extended;

  AntibanEnabled: Boolean := True;
  BreaksEnabled:  Boolean := True;
  SleepEnabled:   Boolean := True;

  SleepHour: String;
  SleepLength: Double;

  SleepLengthOverride: Double;
  SleepHourOverride: String;

  ABCamera:   Boolean := True;
  ABMouse:    Boolean := True;
  ABChat:     Boolean := True;
  ABGameTabs: Boolean := True;
  ABBank:     Boolean := True;
(*
Antiban.SetupBiometrics
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAntiban.SetupBiometrics;

This comes straight from older SRL versions.
This basically sets up our **BioHash** which is a hash of the current player login username. Because usernames are unique, so will the BioHash.
It also sets up **Endurance** and **Patience** which are also unique to each login username.
*)

type
  EBioBehavior = (
    MOUSE_SPEED=1,
    MOUSE_GRAVITY,
    MOUSE_WIND,
    MOUSE_MISS,

    FKEY_CHANCE,            //Chance to use FKeys
    ESCAPE_CHANCE,          //Chance to use Escape to close interfaces
    KEYBOARD_CHAT_CHANCE,   //Chance to use to handle chat options with the keyboard.

    REACTION_SPEED,       //Decides how long the player will wait after things like changing tabs, opening choose options menu, etc.
    SPAM_CLICK_CHANCE,    //Chance to spam click things (walking, eating, etc).
    DROP_PATTERN,
    CONSUME_IN_BANK
  );

procedure TAntiban.SetupBiometrics();
var
  h, i: UInt32;
  k: String;
begin
  BioHash := BioHashOverride;

  if BioHash = 1 then
    BioHash := 0.999999999999999;

  if BioHash = 0 then
  begin
    if (Length(Login.Players) = 0) or (BioHash <> 0) then
      Exit;

    k := Login.GetPlayer.User;
    h := $811C9DC5;
    for i:=1 to Length(k) do
      h := (h * $1000193) xor Ord(k[i]);

    BioHash := h / $FFFFFFFF;
  end;

  Endurance := Cos(BioHash * PI / 2);
  Patience  := Sin(BioHash * PI / 1);

  Self.DebugLn('Biohash: ' + ToStr(BioHash));
  Self.DebugLn('Endurance: ' + ToStr(Endurance));
  Self.DebugLn('Patience: ' + ToStr(Patience));

  EnergyLevel := 1;
  EnergyDrain := 1 / ONE_DAY;
end;



function TAntiban.GetBehavior(Behavior: EBioBehavior): Int32;
begin
  Result := GetDigit(BioHash, Ord(Behavior));
end;

function TAntiban.GetChance(Behavior: EBioBehavior): Double;
begin
  Result := GetDigit(BioHash, Ord(Behavior)) / 10;
end;


(*
Antiban.GetInfluencer
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TAntiban.GetInfluencer: Extended;

This generates a random number that is influenced by BioHash.
There are times you will not want to use BioHash itself because it's value is static, this function let's you get a number that is random but heavily influenced by BioHash.

Example
-------

  Wait(Round(3000 * Antiban.GetInfluencer)));
*)
function TAntiban.GetInfluencer: Extended;
begin
  Result := (Random + BioHash) * BioHash * BioHash;
end;

(*
Antiban.GetUniqueNumber
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TAntiban.GetUniqueNumber(Input: Extended): Extended;
  function TAntiban.GetUniqueNumber(Input, Sum: Extended): Extended; overload;
  function TAntiban.GetUniqueNumber(Input, Min, Max: Extended): Extended; overload;

This generates a unique number based on your **Input**.
The overloaded functions allow you to use some extra parameters for this like:
  Sum an amount to the result, so **Sum** will always be the minimum value you get.
  Min and Max cap. The number generated will be between **Min** and **Max**.

Example
-------

  FoodAmount := Antiban.GetUniqueNumber(7, 3, 15);
*)
function TAntiban.GetUniqueNumber(Input: Extended): Extended;
begin
  Result := Input * Self.GetInfluencer;
end;

function TAntiban.GetUniqueNumber(Input, Sum: Extended): Extended; overload;
begin
  Result := Self.GetUniqueNumber(Input) + Sum;
end;

function TAntiban.GetUniqueNumber(Input, Min, Max: Extended): Extended; overload;
begin
  Result := Input * Self.GetInfluencer;

  if Result < Min then
    Result := Min
  else if Result > Max then
    Result := Max;
end;


(*
Antiban.GetUniqueAverage
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TAntiban.GetUniqueAverage(Input: Extended; Iterations: Integer): Extended;
  function TAntiban.GetUniqueAverage(Input, Sum: Extended; Iterations: Integer): Extended; overload;
  function TAntiban.GetUniqueAverage(Input, Min, Max: Extended; Iterations: Integer): Extended; overload;

Functions to test **Antiban.GetUniqueNumber**.
It will run Antiban.GetUniqueNumber for how many **Iterations** you specify and average the results out.
Useful to know more or less what result to expect from your input.

Example
-------

  WriteLn Antiban.GetUniqueAverage(7, 3, 15, 500);
*)
function TAntiban.GetUniqueAverage(Input: Extended; Iterations: Integer): Extended;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input);

  Result := RandomCases.Mean;
end;

function TAntiban.GetUniqueAverage(Input, Sum, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input, Sum);

  Result := RandomCases.Mean;
end;

function TAntiban.GetUniqueAverage(Input, Min, Max, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input, Min, Max);

  Result := RandomCases.Mean;
end;


(*
Antiban.BioDice
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TAntiban.BioDice: Boolean;

Throws a **SRL.Dice** heavily skewed in certain directions depending on your BioHash.
BioHashes smaller than **0.15** will always return **False**.
BioHashes bigger than **0.80** will always return **True**.
BioHashes between 0.15 and 0.80 will randomly return True or False with true being more probable for higher BioHashes.

Example
-------

  UseBankEarly := Antiban.BioDice;
*)
function TAntiban.BioDice: Boolean;
begin
  case BioHash of
    0.00..0.15: Result := False;
    0.15..0.50: Result := SRL.Dice(BioHash * 90);
    0.50..0.80: Result := SRL.Dice(BioHash * 110);
    else        Result := True;
  end;
end;

function TAntiban.BioDice(Behaviour: EBioBehavior): Boolean; overload;
var
  Chance: Double := Self.GetChance(Behaviour);
begin
  case Chance of
    0.0..0.2: Result := False;
    0.2..0.5: Result := SRL.Dice(Chance * 90);
    0.5..0.8: Result := SRL.Dice(Chance * 110);
    else        Result := True;
  end;
end;

(*
Antiban.InvertedBioDice
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TAntiban.InvertedBioDice: Boolean;

Inverted **Antiban.BioDice**.
*)
function TAntiban.InvertedBioDice: Boolean;
begin
  Result := not Self.BioDice;
end;

function TAntiban.InvertedBioDice(Behaviour: EBioBehavior): Boolean; overload;
begin
  Result := not Self.BioDice(Behaviour);
end;


procedure TAntiban.SetSleepHour;
var
  Sleep: UInt64;
begin
  if SleepHourOverride <> '' then
  begin
    SleepHour := SleepHourOverride;
    Exit;
  end;

  Sleep := (((22 + Round(5 * BioHash)) * ONE_HOUR) +
    (Round(59 * BioHash) * ONE_MINUTE));

  if Sleep > ONE_DAY then
    Sleep -= ONE_DAY;

  SleepHour := SRL.MsToTime(Sleep, Time_Bare);
end;

procedure TAntiban.SetSleepLength;
begin
  if SleepLengthOverride <> 0 then
  begin
    SleepLength := SleepLengthOverride * ONE_HOUR;
    Exit;
  end;

  SleepLength := (5 * ONE_HOUR) + ((200 * ONE_MINUTE) * BioHash);
end;

