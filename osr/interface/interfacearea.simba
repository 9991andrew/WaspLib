{$DEFINE WL_INTERFACEAREA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

var
  EscapeCloseEnabled: Boolean;

//Checks for open classic interface
function TRSMainScreen.IsClassicOpen: Boolean;
begin
  Result := (SRL.CountColor(CTS0(3358536, 2), InterfaceArea.Bounds()) > 10000);
end;

//Checks for open scroll interface
function TRSMainScreen.IsScrollOpen(): Boolean;
begin
  Result := (SRL.CountColor(CTS2(8693433, 5, 0.10, 1.17), InterfaceArea.Bounds()) > 35000);
end;

//Checks for any open interface
function TRSMainScreen.HasInterface(): Boolean;
begin
  Result := Self.IsClassicOpen() or Self.IsScrollOpen();
end;

function TRSMainScreen.ClickCloseButton(pressEscape: Boolean): Boolean;
var
  b: TBox;
  x1, y1, x2, y2: Integer;
begin
  // Top right corner
  b := InterfaceArea.Bounds();
  b.X1 += Round(b.Width()/2);
  b.Y2 -= Round(b.Height()/2);

  if Result := FindBitmapToleranceIn(RSBitmaps.CloseInterfaceButton, x1, y1, b, 45) then
  begin
    if PressEscape then
    begin
      Keyboard.PressKey(VK_ESCAPE);
      Exit;
    end;

    x2 := x1 + RSBitmaps.CloseInterfaceButton.GetWidth();
    y2 := y1 + RSBitmaps.CloseInterfaceButton.GetHeight();
  end
  else
  if Result := FindBitmapToleranceIn(RSBitmaps.CloseScrollInterfaceButton, x1, y1, b, 25) then
  begin
    if PressEscape then
    begin
      Keyboard.PressKey(VK_ESCAPE);
      Exit;
    end;

    x2 := x1 + RSBitmaps.CloseScrollInterfaceButton.GetWidth();
    y2 := y1 + RSBitmaps.CloseScrollInterfaceButton.GetHeight();
  end;

  if Result then
    Mouse.Click(Box(x1, y1, x2, y2), MOUSE_LEFT);
end;


//Close any open Interface
function TRSMainScreen.CloseInterface(PressEscape: Boolean): Boolean;
begin
  if not MainScreen.HasInterface() then
    Exit(True);

  if Self.ClickCloseButton(PressEscape) then
    Result := WaitUntil(not MainScreen.HasInterface(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));

  if (not Result and (PressEscape and EscapeCloseEnabled)) then
    EscapeCloseEnabled := False;
end;

function TRSMainScreen.CloseInterface(Chance: Double = -1): Boolean; overload;
var
  PressEscape: Boolean;
begin
  if Chance = -1 then
    PressEscape := Antiban.BioDice(EBioBehavior.ESCAPE_CHANCE)
  else
    PressEscape := SRL.Dice(Chance);

  Result := Self.CloseInterface(PressEscape);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  EscapeCloseEnabled := True;
end;
