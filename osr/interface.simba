{$DEFINE WL_INTERFACE_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSClassicInterface = record(TRSInterface)
    CloseButtonDTM: Int32;
  end;

function TRSClassicInterface.IsOpen: Boolean;
begin
  Result := SRL.CountColor(CTS0(3358536, 2), InterfaceArea.Bounds) > 10000;
end;

function TRSClassicInterface.Close(PressEscape: Boolean = False): Boolean;
var
  x, y: Int32;
begin
  if not Self.IsOpen then
    Exit(True);

  if not FindDTM(Self.CloseButtonDTM, x, y, InterfaceArea.Bounds) then
    Exit;

  case PressEscape of
    False: Mouse.Click(x, y, MOUSE_LEFT);
    True:  Keyboard.PressKey(VK_ESCAPE);
  end;

  Result := WaitUntil(not Self.IsOpen, SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

procedure TRSClassicInterface.Setup; override;
begin
  Self.CloseButtonDTM := DTMFromString('mEQIAAHicxc9LCoAwDATQ8QAuKn7Rjfe/kgsVaVE3HsEJjJALqIUHbYYktAMQM2ChnVa6ZJKNkvLksuhyq82a8/RZ7aCTWu4pZKCRcrG75aUyqzVUu6yi3vUFvYObAWQfeP/8+osbh+YZAg==');
end;

var
  ClassicUI: TRSClassicInterface;

procedure TSRL.Setup; override;
begin
  inherited;

  ClassicUI.Setup;
end;




type
  TRSScrollInterface = record(TRSInterface)
    CloseButtonDTM: Int32;
  end;

function TRSScrollInterface.IsOpen: Boolean;
begin
  Result := SRL.CountColor(CTS0(7904689, 17), InterfaceArea.Bounds) > 10000;
end;

function TRSScrollInterface.Close(PressEscape: Boolean = False): Boolean;
var
  x, y: Int32;
begin
  if not Self.IsOpen then
    Exit(True);

  if not FindDTM(Self.CloseButtonDTM, x, y, InterfaceArea.Bounds) then
    Exit;

  case PressEscape of
    False: Mouse.Click(x, y, MOUSE_LEFT);
    True:  Keyboard.PressKey(VK_ESCAPE);
  end;

  Result := WaitUntil(not Self.IsOpen, SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

procedure TRSScrollInterface.Setup; override;
begin
  Self.CloseButtonDTM := DTMFromString('mOwIAAHicvc9LCsIwFIXh26lofQyCpEhdg8tzZV1OZ1JFB63SUm3xD56Cow5z4Qs3Jy+SmVmTmI24SOjv6FBLiwoDXup7fPDA9e/cTWut8nDnG0843kuxwlGcbJBhiS0WOMBrn9falIdsL7nmId9hjbI4MyZRnCxexfnRz0x9Ad8dHqY=');
end;


var
  ScrollUI: TRSScrollInterface;

procedure TSRL.Setup; override;
begin
  inherited;

  ScrollUI.Setup;
end;

