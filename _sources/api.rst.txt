
API
===
Methods related to wasp-api.


------------

type StatsPayload
~~~~~~~~~~~~~~~~~

Type to help you handle stats submissions.


------------

StatsPayload.Reset
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure StatsPayload.Reset();

Resets StatsPayload. Automatically called by APIClient.SubmitStats() on a successful stats submission.


------------

StatsPayload.SetUsername
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure StatsPayload.SetUsername(user: String = '');

Sets StatsPayload username if it hasn't been set yet.


------------

StatsPayload.Setup
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure StatsPayload.Setup(id, pw: String; user: String = '');

Sets StatsPayload up.
  - **id** should be your script id. If the script id is not in waspscripts.com database the submission will be rejected.
  - **pw** should be your account password. Passwordless accounts can exist but then anyone can submit data to them.
    A passwordless account will take in the first ever password submission it gets as it's password and will only accept future data
    if that password is included.
  - **user** sets a wasp-stats username.


------------

StatsPayload.Update
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure StatsPayload.Update(xp, gp, time: Int32);
.. code-block:: pascal

 procedure StatsPayload.Update(ban: Boolean); overload;

Update StatsPayload data for the next submission.
You can update it several times before submitting it, however, keep in mind if the runtime is over 15mins the data will be rejected to
avoid exploitation.
Experience, Gold and Levels also have a limit of how much can be submitted on each request. This limit set by the scripter in waspscripts.com (not implemented yet... currently has some generous limits)

You can set the account as banned for tracking ban rates but it's not fully implemented yet.
If you set an account as banned you won't be able to submit more data to it until you set it as unbanned.


------------

StatsPayload.FormData
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function StatsPayload.FormData(): TStringArray;

Transforms the data in StatsPayload into a TStringArray that can be used by a APIClient.


------------

type APIClient
~~~~~~~~~~~~~~~~~

Type responsible for stats submissions.
This is basically a simba wrapper for the waspscripts API.

You can find the API docs in https://api.waspscripts.com/docs if you need to read them
but the APIClient should be able to do everything for you.


------------

APIClient.Terminate
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure APIClient.Terminate();

Internal method automatically called on script termination.


------------

APIClient.Setup
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure APIClient.Setup();

Internal method automatically called when attempting to use APIClient.GET() and APIClient.POST().


------------

APIClient.GetUUID
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function APIClient.GetUUID(): String;

Returns your UUID

Example
-------
.. code-block:: pascal  

  WriteLn APIClient.GetUUID();


------------

APIClient.SetLocal
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure APIClient.SetLocal(port: Int32 = 8080); static;

Method only meant to be used if you are hosting a local stats server for debugging purposes.


------------

APIClient.GET
~~~~~~~~~~~~~~~
.. code-block:: pascal

 function APIClient.GET(route: String): String;

Makes a GET request to the WaspScripts API in the specified **route**.
You probably don't need to use this method directly.


------------

APIClient.POST
~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function APIClient.POST(route: String; payload: TStringArray): String;

Makes a POST request to the WaspScripts API in the specified **route**.
**payload** is an array of string with the following format:
  ['var1=value1', 'var2=value2', ...]

You probably don't need to use this method directly.


------------

APIClient.HashPassword
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function APIClient.HashPassword(password: String): String;

Returns a salted and hashed password.
This serves no purpose other than giving you a glimpse of what is stored in waspscripts database when you submit your password.

Try the example below, notice how everytime you run it you will have slightly different results.
That's the magic of "salting" passwords. You can read more about it on the wikipedia https://en.wikipedia.org/wiki/Salt_(cryptography).

Example
-------
.. code-block:: pascal  

  WriteLn APIClient.HashPassword('helloworld');
  WriteLn APIClient.HashPassword(StatsPayload.Password);


------------

APIClient.CheckPassword
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function APIClient.CheckPassword(uuid: String; password: String): Boolean;

Simply returns true/false if the **password** you submit matches what is stored in waspscripts stats database for the specified **uuid**.

Example
-------
.. code-block:: pascal  

  WriteLn APIClient.CheckPassword('0.999999999999999', 'helloworld');
  WriteLn APIClient.CheckPassword(APIClient.Generateuuid(), APIClient.GeneratePassword());


------------

APIClient.UpdatePassword
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function APIClient.UpdatePassword(uuid: String; password, newPassword: String): Boolean;

Because users passwords can be changed and that's what are used by default for
stats password a way to update the stats password is required.
That's what this method is for.

This will probably be complicated for regular users but an easier way can be
figured out in the future.

Example
-------
.. code-block:: pascal  

  WriteLn APIClient.UpdatePassword('0.999999999999999', 'helloworld', 'helloworld2');
  WriteLn APIClient.UpdatePassword(APIClient.Generateuuid(), APIClient.GeneratePassword('oldpassword'), APIClient.GeneratePassword());


------------

APIClient.CheckStats
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function APIClient.CheckStats(uuid: string): String;

Returns the stats of the specified **uuid**.

Example
-------
.. code-block:: pascal  

  WriteLn APIClient.CheckStats('0.999999999999999');
  WriteLn APIClient.CheckStats(APIClient.Generateuuid());


------------

APIClient.SubmitStats
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function APIClient.SubmitStats(uuid: String): Boolean;

Method to submit stats to wasp-stats with the help of **StatsPayload**.

Example
-------
.. code-block:: pascal  

  StatsPayload.Setup('SCRIPT_ID_HERE', APIClient.GeneratePassword());
  StatsPayload.Update(100, 100, 5000);
  WriteLn APIClient.SubmitStats(APIClient.Generateuuid());


------------
