{$DEFINE WL_OPTIONS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSOptionsExtended = record(TRSOptions)
  class const
    ELEMENT_PLAYER_ATTACK_DD: TRSInterfaceDropDown = [14, 111, 162, 20,, 78];
    ELEMENT_NPC_ATTACK_DD: TRSInterfaceDropDown = [14, 150, 162, 20,, 63];
  end;

var
  OptionsExtended: TRSOptionsExtended;

function TRSOptions.LeaveHouse(): Boolean;
begin
  if not Self.OpenHouseOptions() then
    Exit;

  Self.ElementFinder.Click(Self.ELEMENT_HOUSE_LEAVE);

  Result := WaitUntil(not Self.IsHouseOptionsOpen(), SRL.TruncatedGauss(50, 1500), 5000);
end;

function TRSOptions.CallServant(): Boolean;
var
  s: String;
begin
  if not Self.OpenHouseOptions() then
    Exit;

  Self.ElementFinder.Click(Self.ELEMENT_HOUSE_SERVANT);

  Result := WaitUntil(((s := Chat.GetChatTitle()) = 'Demon buttler') or
                       (s = 'Repeat last task?'), SRL.TruncatedGauss(50, 1500), 5000);
end;

procedure TRSOptions.RenderSelf();
begin
  if SRL.CountColor(CHAT_COLOR_BLUE, Chat.ElementFinder.Bounds(Chat.ELEMENT_LINE_INPUT)) > 14 then
    Keyboard.PressKey(VK_ENTER);  //Clear input line.

  Keyboard.Send('::renderself', VK_ENTER);
end;

function TRSOptions.GetRoofsState(): Boolean;
var
  s: String;
begin
  s := {$IFDEF WINDOWS}GetEnvironmentVariable('userprofile'){$ELSE}GetEnvironmentVariable('HOME'){$ENDIF};
  s := ReadFileContents(s + '\jagexcache\oldschool\LIVE\preferences.dat');

  if s.Length() >= 2 then
    Result := Boolean(s[2]);
end;

procedure TRSOptions.ToggleRoofs();
begin
  if SRL.CountColor(CHAT_COLOR_BLUE, Chat.ElementFinder.Bounds(Chat.ELEMENT_LINE_INPUT)) > 14 then
    Keyboard.PressKey(VK_ENTER); //Clear input line.

  Keyboard.Send('::toggleroofs', VK_ENTER);
end;



function TRSOptions.GetPlayerAttackOption(): String;
begin
  if not Self.Open() and not Self.OpenTab(ERSOptionsTab.CONTROLS) then
    Exit;

  Result := Self.ElementFinder.ReadText(OptionsExtended.ELEMENT_PLAYER_ATTACK_DD, [RSColors.TEXT_ORANGE, RSColors.TEXT_ORANGE_LIGHT], [5, 5], RS_FONT_PLAIN_11);
end;

function TRSOptions.GetNPCAttackOption(): String;
begin
  if not Self.Open() and not Self.OpenTab(ERSOptionsTab.CONTROLS) then
    Exit;

  Result := Self.ElementFinder.ReadText(OptionsExtended.ELEMENT_NPC_ATTACK_DD, [RSColors.TEXT_ORANGE, RSColors.TEXT_ORANGE_LIGHT], [5, 5], RS_FONT_PLAIN_11);
end;

function TRSOptions.CloseDropDowns(): Boolean;
var
  elements: TRSInterfaceDropDownArray;
  e: TRSInterfaceDropDown;
begin
  if not Self.IsOpen() and not Self.OpenTab(ERSOptionsTab.CONTROLS) then
    Exit;

  elements := [OptionsExtended.ELEMENT_PLAYER_ATTACK_DD, OptionsExtended.ELEMENT_NPC_ATTACK_DD];

  Result := True;
  for e in elements do
    if Self.IsOpen() then
      Exit(Self.ElementFinder.Close(e));
end;

function TRSOptions.SetPlayerAttackOption(setting: String): Boolean;
begin
  setting := setting.Replace('l', 'I');
  if setting in Self.GetPlayerAttackOption() then
    Exit(True);

  OptionsExtended.ElementFinder.Close(OptionsExtended.ELEMENT_NPC_ATTACK_DD);

  Result := Self.ElementFinder.SelectSetting(setting, OptionsExtended.ELEMENT_PLAYER_ATTACK_DD, [RSColors.TEXT_ORANGE, RSColors.TEXT_ORANGE_LIGHT], RS_FONT_PLAIN_11);
end;

function TRSOptions.SetNPCAttackOption(setting: String): Boolean;
begin
  setting := setting.Replace('l', 'I');
  if setting in Self.GetNPCAttackOption() then
    Exit(True);

  OptionsExtended.ElementFinder.Close(OptionsExtended.ELEMENT_PLAYER_ATTACK_DD);

  Result := Self.ElementFinder.SelectSetting(setting, OptionsExtended.ELEMENT_NPC_ATTACK_DD, [RSColors.TEXT_ORANGE, RSColors.TEXT_ORANGE_LIGHT], RS_FONT_PLAIN_11);
end;


procedure TRSOptions.Draw(Bitmap: TMufasaBitmap); override;
var
  elements: TRSInterfaceDropDownArray;
  e: TRSInterfaceDropDown;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  elements := [OptionsExtended.ELEMENT_PLAYER_ATTACK_DD, OptionsExtended.ELEMENT_NPC_ATTACK_DD];

  for e in elements do
  begin
    Bitmap.DrawBox(OptionsExtended.ElementFinder.Bounds(e), Colors.YELLOW);
    if OptionsExtended.ElementFinder.IsOpen(e) then
      Bitmap.DrawBox(OptionsExtended.ElementFinder.DDBounds(e), Colors.WHITE);
  end;
end;

begin
  OptionsExtended.Setup('OptionsExtended');
end;
