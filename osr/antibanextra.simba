{$DEFINE WL_ANTIBANEXTRA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function Antiban.GetUniqueNumber(Input: Integer): Extended;
var
  RandomCase: Extended;
begin
  RandomCase := (Random + BioHash) * BioHash * BioHash;

  Result := Input * RandomCase;
end;

function TAntiban.GetUniqueNumber(Input, Sum: Integer): Extended; overload;
var
  RandomCase: Extended;
begin
  RandomCase := (Random + BioHash) * BioHash * BioHash;

  Result := Input * RandomCase + Sum;
end;

function TAntiban.GetUniqueNumber(Input, Min, Max: Integer): Extended; overload;
var
  RandomCase: Extended;
begin
  RandomCase := (Random + BioHash) * BioHash * BioHash;

  Result := Input * RandomCase;

  if Result < Min then Result := Min
  else if Result > Max then Result := Max;
end;

function TAntiban.GetUniqueAverage(Input, Iterations: Integer): Extended;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input);

  Result := RandomCases.Mean;
end;

function TAntiban.GetUniqueAverage(Input, Sum, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input, Sum);

  Result := RandomCases.Mean;
end;

function TAntiban.GetUniqueAverage(Input, Min, Max, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input, Min, Max);

  Result := RandomCases.Mean;
end;


procedure TAntiban.SmallRandomMouse; override;
var
  B: TBox;
  P: TPoint;
begin
  Self.DebugLn('Random Mouse (Small)');

  B := Box(Mouse.Position(), 350, 350);
  repeat
    P := SRL.RandomPoint(B);
  until P.DistanceTo(B.Middle) < 50; // Make sure we move at least 50 distance

  ASyncMouse.Move(P);
end;



//Makes inventory patterns more common to each player based on their BioHash.
function TRSInventory.RandomPattern: TIntegerArray; override;
var
  Patterns: T2DIntegerArray;
  RandomCase: Double;
begin

  Patterns := [
    DROP_PATTERN_SNAKE, DROP_PATTERN_SPIRAL,
    DROP_PATTERN_REGULAR, DROP_PATTERN_TOPDOWN,
    DROP_PATTERN_SNAKE_R, DROP_PATTERN_TOPDOWN_R
  ];

  RandomCase := Antiban.GetUniqueNumber(Random(0, High(Patterns)), 0, High(Patterns));

  Result := Patterns[Round(RandomCase)];
end;

