(*
MainScreen
====
Methods to interact with the MainScreen.
*)

{$DEFINE WL_MAINSCREEN_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
ObjectFinder.Unlimit
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSObjectFinder.Unlimit;

Resets ObjectFinder size limits
*)
procedure TRSObjectFinder.Unlimit;
begin
  Self.MinLongSide := 0;
  Self.MaxLongSide := 0;
  Self.MinShortSide := 0;
  Self.MaxShortSide := 0;
end;

(*
ObjectFinder.Unlimited
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSObjectFinder.Unlimited: TRSObjectFinder;

Returns a copy of the ObjectFinder with the size limits removed.
*)
function TRSObjectFinder.Unlimited: TRSObjectFinder;
begin
  Result := Self;
  Result.MinShortSide := 0;
  Result.MaxShortSide := 0;
  Result.MinLongSide := 0;
  Result.MaxLongSide := 0;
end;


(*
MainScreen.IsVisible
~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMainScreen.IsVisible(P: TPoint): Boolean; override;
  function TRSMainScreen.IsVisible(TPA: TPointArray): Boolean; overload;
  function TRSMainScreen.IsVisible(B: TBox): Boolean; overload;
  function TRSMainScreen.IsVisible(Rect: TRectangle): Boolean; overload;

Checks if the given TPoint, TPointArray, TBox or TRectangle is visible in the MainScreen.
It will return true if it's not behind an interface otherwise returns false.

Example
-------

  Writeln MainScreen.IsVisible(P);
*)
function TRSMainScreen.IsVisible(P: TPoint): Boolean; override;
begin
  Result := Self.Bounds.Contains(P);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if Self.HasInterface then
    begin
      if Bank.IsOpen and Bank.Bounds.Contains(P) then
        Exit(False);
      if Anvil.IsOpen and Anvil.Bounds.Contains(P) then
        Exit(False);
    end;
    if Chat.IsOpen() and Chat.Bounds().Contains(P) then
      Exit(False);
    if ChatButtons.Bounds().Contains(P) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(P) then
      Exit(False);
    if GameTabs.Bounds().Contains(P) then
      Exit(False);
  end;
end;

function TRSMainScreen.IsVisible(TPA: TPointArray): Boolean; overload;
begin
  Result := Self.Bounds.Contains(TPA);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if Self.HasInterface then
    begin
      if Bank.IsOpen and Bank.Bounds.Contains(TPA) then
        Exit(False);
      if Anvil.IsOpen and Anvil.Bounds.Contains(TPA) then
        Exit(False);
    end;
    if Chat.IsOpen and Chat.Bounds.Contains(TPA) then
      Exit(False);
    if ChatButtons.Bounds.Contains(TPA) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(TPA) then
      Exit(False);
    if GameTabs.Bounds.Contains(TPA) then
      Exit(False);
  end;
end;

function TRSMainScreen.IsVisible(B: TBox): Boolean; overload;
begin
  Result := Self.Bounds.Contains(B);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if Self.HasInterface then
    begin
      if Bank.IsOpen and Bank.Bounds.Contains(B) then
        Exit(False);
      if Anvil.IsOpen and Anvil.Bounds.Contains(B) then
        Exit(False);
    end;
    if Chat.IsOpen() and Chat.Bounds().Contains(B) then
      Exit(False);
    if ChatButtons.Bounds().Contains(B) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(B) then
      Exit(False);
    if GameTabs.Bounds().Contains(B) then
      Exit(False);
  end;
end;

function TRSMainScreen.IsVisible(Rect: TRectangle): Boolean; overload;
begin
  Result := Self.Bounds.Contains(Rect);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if Self.HasInterface then
    begin
      if Bank.IsOpen and Bank.Bounds.Contains(Rect) then
        Exit(False);
      if Anvil.IsOpen and Anvil.Bounds.Contains(Rect) then
        Exit(False);
    end;
    if Chat.IsOpen() and Chat.Bounds().Contains(Rect) then
      Exit(False);
    if ChatButtons.Bounds().Contains(Rect) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(Rect) then
      Exit(False);
    if GameTabs.Bounds().Contains(Rect) then
      Exit(False);
  end;
end;


(*
MainScreen.Filter
~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMainScreen.Filter(TPA: TPointArray): TPointArray;
  function TRSMainScreen.Filter(BoxArray: TBoxArray): TBoxArray; overload;
  function TRSMainScreen.Filter(RectArray: TRectArray): TRectArray; overload;
  function TRSMainScreen.Filter(PolyArray: TPolyArray): TPolyArray; overload;

Filters the given TPointArray, TBoxArray, TRectArray or TPolyArray and returns only those that are visible in the MainScreen.
*)
function TRSMainScreen.Filter(TPA: TPointArray): TPointArray;
var
  P: TPoint;
begin
  for P in TPA do
    if Self.IsVisible(P) then
      Result += P;
end;

function TRSMainScreen.Filter(BoxArray: TBoxArray): TBoxArray; overload;
var
  B: TBox;
begin
  for B in BoxArray do
    if Self.IsVisible(B) then
      Result += B;
end;

function TRSMainScreen.Filter(RectArray: TRectArray): TRectArray; overload;
var
  Rect: TRectangle;
begin
  for Rect in RectArray do
    if Self.IsVisible(Rect) then
      Result += Rect;
end;

function TRSMainScreen.Filter(PolyArray: TPolyArray): TPolyArray; overload;
var
  Poly: TPoly;
begin
  for Poly in PolyArray do
    if Self.IsVisible(Poly) then
      Result += Poly;
end;


(*
MainScreen.GetAdjacentTiles
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.GetAdjacentTiles: TRectArray;

Returns the 4 tiles adjacent to the player in form of a TRectArray.
*)
function TRSMainScreen.GetAdjacentTiles: TRectArray;
var
  Tiles: TPointArray;
  Tile: TPoint;
begin

  Tiles := [
    [Minimap.Center.X + 4, Minimap.Center.Y],
    [Minimap.Center.X - 4, Minimap.Center.Y],
    [Minimap.Center.X, Minimap.Center.Y + 4],
    [Minimap.Center.X, Minimap.Center.Y - 4]
  ];

  for Tile in Tiles do
    Result += Minimap.StaticToMsRect(Tile, 0);
end;

(*
MainScreen.DebugAdjacentTiles
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMainScreen.DebugAdjacentTiles;

Debugs MainScreen.GetAdjacentTiles.

Example
-------

  MainScreen.DebugAdjacentTiles;
*)
procedure TRSMainScreen.DebugAdjacentTiles;
var
  Bitmap: TMufasaBitmap;
  Rect: TRectangle;
begin
  Bitmap.FromClient;

  for Rect in Self.GetAdjacentTiles do
    Bitmap.DrawRect(Rect, $ffffff);

  ShowBitmap(Bitmap);
  Bitmap.Free;
end;

(*
MainScreen.InMultiCombat
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.InMultiCombat: Boolean;

Returns true if we are in multi combat false if not.

Example
-------

  Writeln MainScreen.InMultiCombat;
*)
function TRSMainScreen.InMultiCombat: Boolean;
var
  B: TBox;
begin
  case RSClient.Mode of
    ERSClientMode.FIXED:
      begin
        B := InterfaceArea.Bounds;
        B.X1 := B.X2 - 30;
        B.Y1 := B.Y2 - 30;
      end;
    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        B := Minimap.Bounds;
        B.X1 := B.X2 - 30;
        B.Y1 := B.Y2 + 5;
        B.Y2 := B.Y1 + 30;
      end;
  end;

  Result := (SRL.CountColor(CTS0(4902655, 0), B) > 0) and (SRL.CountColor(CTS0(19109, 0), B) > 0);
end;

(*
MainScreen.HasGrave
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.HasGrave: Boolean;

Returns true if we died and there's a grave available somewhere, false otherwise.

Example
-------

  Writeln MainScreen.HasGrave;
*)
function TRSMainScreen.HasGrave: Boolean;
var
  A: TPoint;
  B: TBox;
begin
  case RSClient.Mode of
    ERSClientMode.FIXED:
      begin
        B := InterfaceArea.Bounds;
        B.X1 := B.X2 - 30;
        B.Y1 := B.Y2 - 30;
      end;
    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        A := Minimap.Center();
        B.X1 := A.X - 20;
        B.X2 := A.X;
        B.Y1 := A.Y + 80;
        B.Y2 := A.Y + 100;
      end;
  end;
  Result :=  (Round(SRL.CountColor(CTS0(11448498, 0), B) / SRL.CountColor(CTS0(4013888, 0), B)) >= 4);
end;

(*
MainScreen.LoadingPOH
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.LoadingPOH: Boolean;

Returns true if we are loading a poh.

Example
-------

  Writeln MainScreen.LoadingPOH;
*)
function TRSMainScreen.LoadingPOH: Boolean;
begin
  Result := (SRL.CountColor(CTS0(13127, 0), Self.Bounds) = 892) and
            (SRL.CountColor(CTS0(8247, 0), Self.Bounds) = 900);
end;

(*
MainScreen.WaitLoadingPOH
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMainScreen.WaitLoadingPOH: Boolean;

Waits for the POH loading screen returns true if we find a loading screen and successfully wait for it to finish.

Example
-------

  Writeln MainScreen.WaitLoadingPOH;
*)
function TRSMainScreen.WaitLoadingPOH(WaitTime: Int32; Interval: Int32 = -1): Boolean;
var
  t: UInt64;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  t := GetTickCount;
  if WaitUntil(Self.LoadingPOH, Interval, WaitTime) then
  begin
    WaitTime := WaitTime - (GetTickCount - t);
    Result := WaitUntil(not Self.LoadingPOH, Interval, WaitTime);
  end;
end;

