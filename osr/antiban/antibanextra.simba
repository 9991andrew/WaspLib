{$DEFINE WL_ANTIBANEXTRA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}


//Antiban overrides:

//Makes inventory patterns more common to each player based on their Login.Players[Login.PlayerIndex].BioHash.
function TRSInventory.RandomPattern(): TIntegerArray; override;
const
  PATTERNS: T2DIntegerArray = [
    DROP_PATTERN_SNAKE, DROP_PATTERN_SPIRAL,
    DROP_PATTERN_REGULAR, DROP_PATTERN_TOPDOWN,
    DROP_PATTERN_SNAKE_R, DROP_PATTERN_TOPDOWN_R
  ];
var
  i: Double;
begin
  i := Antiban.GetUniqueNumber(Random(0, High(PATTERNS)), 0, High(PATTERNS));

  Result := PATTERNS[Round(i)];
end;

(* TODO: Fix craft and silverscreen
function TRSCraftScreen.Close(Chance: Double = -1): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(Chance);
end;

function TRSSilverScreen.Close(Chance: Double = -1): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(Chance);
end;
*)


function TRSChatDialog.ClickOption(text: String; chance: Double): Boolean; overload;
var
  useKeyboard: Boolean;
begin
  if chance = -1 then
    useKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_CHANCE)
  else
    useKeyboard := SRL.Dice(chance);

  Result := Self.ClickOption(text, useKeyboard);
end;

function TRSChatDialog.HandleLevelUp(chance: Double = -1): Boolean; overload;
var
  useKeyboard: Boolean;
begin
  if chance = -1 then
    useKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_CHANCE)
  else
    useKeyboard := SRL.Dice(chance);

  Result := Self.HandleLevelUp(useKeyboard);
end;

function TRSChatDialog.ClickContinue(chance: Double): Boolean; overload;
var
  useKeyboard: Boolean;
begin
  if chance = -1 then
    useKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_CHANCE)
  else
    useKeyboard := SRL.Dice(chance);

  Result := Self.ClickContinue(useKeyboard);
end;

function TRSChatDialog.SkipChat(chance: Int32 = -1): Boolean; overload;
var
  useKeyboard: Boolean;
begin
  if chance = -1 then
    useKeyboard := Antiban.BioDice(EBioBehavior.KEYBOARD_CHAT_CHANCE)
  else
    useKeyboard := SRL.Dice(chance);

  Result := Self.SkipChat(useKeyboard);
end;



function TRSChooseOption.Select(text: TStringArray; MouseAction: Int32 = MOUSE_LEFT; CaseSensitive: Boolean = True; closeIfNotFound: Boolean = True): Boolean; override;
var
  choices: TRSChooseOption_OptionArray;
  i, j: Int32;
begin
  if Self.Open() then
  begin
    case Antiban.GetChance(EBioBehavior.REACTION_SPEED) of
      0.00..0.30: BioWait(200, 3000, wdRight);
      0.30..0.70: BioWait(250, 2500, wdMean);
      else        BioWait(250, 2000, wdLeft);
    end;

    choices := Self.GetOptions();

    for i := 0 to High(choices) do
      for j := 0 to High(text) do
        if (CaseSensitive and (text[j] in choices[i].text)) or ((not CaseSensitive) and (Lowercase(text[j]) in Lowercase(choices[i].text))) then
        begin
          Self.Select(choices[i], MouseAction);

          Exit(True);
        end;

    if closeIfNotFound then
    begin
      WaitEx(500, 250);

      Self.Close();
    end;
  end;
end;

function TRSWalker.Click(MinimapPoint: TPoint; Randomness: Int32): Boolean; override;
var
  P: TPoint;
begin
  Result := True;

  if Self.ScreenWalk then
  begin
    Mouse.Move(Minimap.PointToMsRect(MinimapPoint).Mean());

    if not MainScreen.IsUpText('Walk here') then
      Exit(ChooseOption.Select('Walk here'));
  end else
  begin
    P := MinimapPoint.Random(-Randomness, Randomness);
    while not Minimap.IsPointOn(P) do
      P := MinimapPoint.Random(-Randomness, Randomness);

    Mouse.Move(P);
  end;

  Mouse.Click(MOUSE_LEFT);

  if (Randomness > 0) and (Random < Antiban.GetUniqueNumber(0.15, 0.1, 0.2)) then
    for 0 to Round(Antiban.GetUniqueNumber(2, 1, 3)) do
    begin
      Mouse.Click(Mouse.Position, MOUSE_LEFT);

      Wait(20, 150, wdLeft);
    end;
end;


(*
GameTabs.Open
~~~~~~~~~~~~~
.. pascal:: function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;

Overrides **GameTabs.Open** to close Bank, Anvil or Store interfaces if they are open.
*)
function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;
begin
  if MainScreen.HasInterface() then
  begin
    if Bank.IsOpen() or Anvil.IsOpen() or Store.IsOpen() then
    begin
      if (Tab = ERSGameTab.INVENTORY) then
        Exit(True);

      MainScreen.CloseInterface();
    end;
  end;

  if Self.GetCurrentTab() = Tab then
    Exit(True);

  if Keybindings.UseKeybinds then
    Result := Self.FKeyOpen(Tab);

  if not Result then
  begin
    if Self.GetCurrentTab() = Tab then
      Exit(True);

    for 1 to 3 do
    begin
      Mouse.Click(Self.GetTabBox(Tab), MOUSE_LEFT, SRL.Dice(50));
      if WaitUntil(Self.GetCurrentTab() = Tab, RandomLeft(100, 1000), 2500) then
        Exit(True);
    end;
  end;
end;

procedure TRSOptions.SetNPCAttackOption(offensive: Boolean); overload;
var
  setting: String;
  options: TStringArray;
begin
  case offensive of
    True : options := ['Depends', 'Left'];
    False: options := ['Always', 'Hidden'];
  end;

  case Antiban.BioDice() of
    True : setting := options[0];
    False: setting := options[1];
  end;

  Self.SetNPCAttackOption(setting);
end;
