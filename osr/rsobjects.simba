{$DEFINE WL_OBJECT_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$I walker/worldobject.simba}
{$I walker/zeahobject.simba}

type
  TRSObject = record
    Map: TRSWalker;
    WorldLocations: TPointArray;  //tiles on the world map
    Finder: TRSObjectFinder;     //must have color
  end;

procedure TRSObject.SetupFinder();
begin
  Self.Finder.ClusterDistance := 3;
  Self.Finder.Grow := 4;
  Self.Finder.Erode := 2;
end;

// Searches for an object with ObjectFinder in the MainScreen with the
// help of RSWalker. Good when objects don't move and precision is needed.
function TRSObject.Find(Expand: Int32 = 0): T2DPointArray;
var
  Tile, Me: TPoint;
  Rect: TRectangle;
  Locations: TPointArray;
begin
  Me := Self.Map.GetMyPos();
  Locations := Copy(Self.WorldLocations);
  Locations.Sorted(Me);

  for Tile in Locations do
  begin
    Rect := Self.Map.GetTileMSEx(Me, Tile, 1).Expand(Expand);
    if InterfaceArea.Bounds.Contains(Rect.Bounds) then
      Result += MainScreen.FindObject(Finder, Rect.Bounds);
  end;
  if Length(Result) = 0 then
    Exit;
  Result.SortByMiddle(MainScreen.GetPlayerBox.Middle);
end;



// Searches for an object with ObjectFinder in a certain tile and hovers it if found.
function TRSWalker.HoverRSObject(Tile: TPoint; Color: TCTS2Color; UpText: TStringArray; Attempts: Int32 = 2): Boolean;
var
  Finder: TRSObjectFinder;
  RSObject: TRSObject;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if ChooseOption.IsOpen and ChooseOption.HasOption(UpText) then
    Exit(True);

  if not Self.MakeTileVisible(Tile) then
    Exit(False);


  Finder.Colors += Color;
  RSObject := [Self, [Tile], Finder];
  RSObject.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSObject.Find;
    if Length(ATPA) = 0 then
      Exit(False);

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    Result := MainScreen.IsUpText(UpText);
    if Result then
      Exit(True);
  end;
end;

// Searches for an object with ObjectFinder in several tiles and hovers it if found.
function TRSWalker.HoverRSObject(Tiles: TPointArray; Color: TCTS2Color; UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSObject: TRSObject;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if ChooseOption.IsOpen and ChooseOption.HasOption(UpText) then
    Exit(True);

  if not Self.MakeTileVisible(Tiles) then
    Exit(False);

  Finder.Colors += Color;
  RSObject := [Self, Tiles, Finder];
  RSObject.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSObject.Find;
    if Length(ATPA) = 0 then
      Exit(False);

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    Result := MainScreen.IsUpText(UpText);
    if Result then
      Exit(True);
  end;
end;

// Searches for an object with 2 colors with ObjectFinder in a certain tile and hovers it if found.
function TRSWalker.HoverRSObject(Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSObject: TRSObject;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if ChooseOption.IsOpen and ChooseOption.HasOption(UpText) then
    Exit(True);

  if not Self.MakeTileVisible(Tile) then
    Exit(False);

  Finder.ColorClusters += [PrimaryColor, SecondaryColor, 30];
  RSObject := [Self, [Tile], Finder];
  RSObject.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSObject.Find;
    if Length(ATPA) = 0 then
      Exit(False);

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    Result := MainScreen.IsUpText(UpText);
    if Result then
      Exit(True);
  end;
end;

// Searches for an object with 2 colors with ObjectFinder in several tiles and hovers it if found.
function TRSWalker.HoverRSObject(Tiles: TPointArray; PrimaryColor, SecondaryColor: TCTS2Color; UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSObject: TRSObject;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if ChooseOption.IsOpen and ChooseOption.HasOption(UpText) then
    Exit(True);

  if not Self.MakeTileVisible(Tiles) then
    Exit(False);

  Finder.ColorClusters += [PrimaryColor, SecondaryColor, 30];
  RSObject := [Self, Tiles, Finder];
  RSObject.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSObject.Find;
    if Length(ATPA) = 0 then
      Exit(False);

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    Result := MainScreen.IsUpText(UpText);
    if Result then
      Exit(True);
  end;
end;


// Searches for an object with ObjectFinder in a certain tile and clicks it if found.
function TRSWalker.ClickRSObject(Tile: TPoint; Color: TCTS2Color; UpText: TStringArray; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean;
begin
  if not Self.HoverRSObject(Tile, Color, UpText, Attempts) then
    Exit(False);

  if ChooseOption.IsOpen and ChooseOption.Select(UpText) then
    Exit(True);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick or (ChooseOption.Open() and ChooseOption.Select(UpText));
end;

// Searches for an object with ObjectFinder in several tiles and clicks it if found.
function TRSWalker.ClickRSObject(Tiles: TPointArray; Color: TCTS2Color; UpText: TStringArray; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSObject(Tiles, Color, UpText, Attempts) then
    Exit(False);

  if ChooseOption.IsOpen and ChooseOption.Select(UpText) then
    Exit(True);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick or (ChooseOption.Open() and ChooseOption.Select(UpText));
end;

// Searches for an object with ObjectFinder in a certain tile and clicks it if found.
function TRSWalker.ClickRSObject(Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; UpText: TStringArray; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSObject(Tile, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if ChooseOption.IsOpen and ChooseOption.Select(UpText) then
    Exit(True);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick or (ChooseOption.Open() and ChooseOption.Select(UpText));
end;

// Searches for an object with ObjectFinder in several tiles and clicks it if found.
function TRSWalker.ClickRSObject(Tiles: TPointArray; PrimaryColor, SecondaryColor: TCTS2Color; UpText: TStringArray; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSObject(Tiles, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if ChooseOption.IsOpen and ChooseOption.Select(UpText) then
    Exit(True);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick or (ChooseOption.Open() and ChooseOption.Select(UpText));
end;


function TRSWalker.SelectRSObjectOption(Tile: TPoint; Color: TCTS2Color; Action, UpText: TStringArray; Attempts: Int32 = 2): Boolean;
begin
  if not Self.HoverRSObject(Tile, Color, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function TRSWalker.SelectRSObjectOption(Tiles: TPointArray; Color: TCTS2Color; Action, UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSObject(Tiles, Color, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function TRSWalker.SelectRSObjectOption(Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; Action, UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSObject(Tile, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function TRSWalker.SelectRSObjectOption(Tiles: TPointArray; PrimaryColor, SecondaryColor: TCTS2Color; Action, UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSObject(Tiles, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;



// Searches for an object with ObjectFinder in a certain tile and hovers it if found.
function TRSWalker.WalkHoverRSObject(Tile: TPoint; Color: TCTS2Color; UpText: TStringArray; Attempts: Int32 = 2): Boolean;
var
  Finder: TRSObjectFinder;
  RSObject: TRSObject;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
  Attempt: Int32;
begin
  if ChooseOption.IsOpen and ChooseOption.HasOption(UpText) then
    Exit(True);

  if not Self.MakeTileVisible(Tile) then
    if not Self.WebWalk(Tile, 30, 0.2) then
      Exit(False);

  Finder.Colors += Color;
  RSObject := [Self, [Tile], Finder];
  RSObject.SetupFinder;

  for Attempt := 0 to Attempts do
  begin
    ATPA := RSObject.Find;
    if ATPA = [] then
    begin
      if not Self.AtTile(Tile, 50) or ((Attempt = Attempts) and not Self.AtTile(Tile, 30)) then
        Self.WebWalk(Tile, 10, 0.2)
      else
        Minimap.SetCompassAngle(Random(Minimap.GetCompassAngle - 50, Minimap.GetCompassAngle + 50) , 10);
      Continue;
    end;

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    if MainScreen.IsUpText(UpText) then
      Exit(True);

    if not Self.AtTile(Tile, 30) then
      Self.WebWalk(Tile, 10, 0.2)
    else
      Minimap.SetCompassAngle(Random(Minimap.GetCompassAngle - 50, Minimap.GetCompassAngle + 50) , 10);
  end;
end;

// Searches for an object with ObjectFinder in several tiles and hovers it if found.
function TRSWalker.WalkHoverRSObject(Tiles: TPointArray; Color: TCTS2Color; UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSObject: TRSObject;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
  Tile: TPoint := Self.GetClosestTile(Tiles);
begin
  if ChooseOption.IsOpen and ChooseOption.HasOption(UpText) then
    Exit(True);

  if not Self.MakeTileVisible(Tile) then
    if not Self.WebWalk(Tile, 30, 0.2) then
      Exit(False);

  Finder.Colors += Color;
  RSObject := [Self, Tiles, Finder];
  RSObject.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSObject.Find;
    if ATPA = [] then
    begin
      if Self.AtTile(Tile, 10) then
        Self.WebWalk(Tile, 10, 0.2);
      Continue;
    end;

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    if MainScreen.IsUpText(UpText) then
      Exit(True);

    if not Self.AtTile(Tiles, 10) then
      Self.WebWalk(Tile, 10, 0.2);
  end;
end;

// Searches for an object with 2 colors with ObjectFinder in a certain tile and hovers it if found.
function TRSWalker.WalkHoverRSObject(Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSObject: TRSObject;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if ChooseOption.IsOpen and ChooseOption.HasOption(UpText) then
    Exit(True);

  if not Self.MakeTileVisible(Tile) then
    if not Self.WebWalk(Tile, 30, 0.2) then
      Exit(False);

  Finder.ColorClusters += [PrimaryColor, SecondaryColor, 30];
  RSObject := [Self, [Tile], Finder];
  RSObject.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSObject.Find;
    if ATPA = [] then
    begin
      if Self.AtTile(Tile, 10) then
        Self.WebWalk(Tile, 10, 0.2);
      Continue;
    end;

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    if MainScreen.IsUpText(UpText) then
      Exit(True);

    if not Self.AtTile(Tile, 10) then
      Self.WebWalk(Tile, 10, 0.2);
  end;
end;

// Searches for an object with 2 colors with ObjectFinder in several tiles and hovers it if found.
function TRSWalker.WalkHoverRSObject(Tiles: TPointArray; PrimaryColor, SecondaryColor: TCTS2Color; UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSObject: TRSObject;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
  Tile: TPoint := Self.GetClosestTile(Tiles);
begin
  if ChooseOption.IsOpen and ChooseOption.HasOption(UpText) then
    Exit(True);

  if not Self.MakeTileVisible(Tile) then
    if not Self.WebWalk(Tile, 30, 0.2) then
      Exit(False);

  Finder.ColorClusters += [PrimaryColor, SecondaryColor, 30];
  RSObject := [Self, Tiles, Finder];
  RSObject.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSObject.Find;
    if ATPA = [] then
    begin
      if Self.AtTile(Tile, 10) then
        Self.WebWalk(Tile, 10, 0.2);
      Continue;
    end;

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    if MainScreen.IsUpText(UpText) then
      Exit(True);

    if not Self.AtTile(Tiles, 10) then
      Self.WebWalk(Tile, 10, 0.2);
  end;
end;


// Searches for an object with ObjectFinder in a certain tile and clicks it if found.
function TRSWalker.WalkClickRSObject(Tile: TPoint; Color: TCTS2Color; UpText: TStringArray; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean;
begin
  if not Self.WalkHoverRSObject(Tile, Color, UpText, Attempts) then
    Exit(False);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick or ChooseOption.Open();
end;

// Searches for an object with ObjectFinder in several tiles and clicks it if found.
function TRSWalker.WalkClickRSObject(Tiles: TPointArray; Color: TCTS2Color; UpText: TStringArray; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.WalkHoverRSObject(Tiles, Color, UpText, Attempts) then
    Exit(False);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick or ChooseOption.Open();
end;

// Searches for an object with ObjectFinder in a certain tile and clicks it if found.
function TRSWalker.WalkClickRSObject(Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; UpText: TStringArray; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.WalkHoverRSObject(Tile, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick or ChooseOption.Open();
end;

// Searches for an object with ObjectFinder in several tiles and clicks it if found.
function TRSWalker.WalkClickRSObject(Tiles: TPointArray; PrimaryColor, SecondaryColor: TCTS2Color; UpText: TStringArray; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.WalkHoverRSObject(Tiles, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := MainScreen.DidRedClick or ChooseOption.Open();
end;


function TRSWalker.WalkSelectRSObjectOption(Tile: TPoint; Color: TCTS2Color; Action, UpText: TStringArray; Attempts: Int32 = 2): Boolean;
begin
  if not Self.WalkHoverRSObject(Tile, Color, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function TRSWalker.WalkSelectRSObjectOption(Tiles: TPointArray; Color: TCTS2Color; Action, UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.WalkHoverRSObject(Tiles, Color, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function TRSWalker.WalkSelectRSObjectOption(Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; Action, UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.WalkHoverRSObject(Tile, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function TRSWalker.WalkSelectRSObjectOption(Tiles: TPointArray; PrimaryColor, SecondaryColor: TCTS2Color; Action, UpText: TStringArray; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.WalkHoverRSObject(Tiles, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;







procedure TRSWalker.Setup(Map: String; Manage: Boolean = True; Scaling: Int32 = 9); override;
begin
  inherited;

  case Map.Lower() of
    'world': WorldObjects.Load;
    'zeah': ZeahObjects.Load;
  end;
end;
