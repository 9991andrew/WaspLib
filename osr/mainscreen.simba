{$DEFINE WL_MAINSCREEN_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function TRSMainScreen.IsVisible(P: TPoint): Boolean; override;
begin
  Result := Self.Bounds.Contains(P);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if Chat.IsOpen() and Chat.Bounds().Contains(P) then
      Exit(False);
    if ChatButtons.Bounds().Contains(P) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(P) then
      Exit(False);
    if GameTabs.Bounds().Contains(P) then
      Exit(False);
  end;
end;

function TRSMainScreen.IsVisible(Rect: TRectangle): Boolean; overload;
begin
  Result := Self.Bounds.Contains(Rect);

  if Result and (RSClient.Mode <> ERSClientMode.FIXED) then
  begin
    if Chat.IsOpen() and Chat.Bounds().Contains(Rect) then
      Exit(False);
    if ChatButtons.Bounds().Contains(Rect) then
      Exit(False);
    if Minimap.Bounds.Expand(50).Contains(Rect) then
      Exit(False);
    if GameTabs.Bounds().Contains(Rect) then
      Exit(False);
  end;
end;

function MainScreen.GetAdjacentTiles: TRectArray;
var
  Tiles: TPointArray;
  Tile: TPoint;
begin

  Tiles := [
    [Minimap.Center.X + 4, Minimap.Center.Y],
    [Minimap.Center.X - 4, Minimap.Center.Y],
    [Minimap.Center.X, Minimap.Center.Y + 4],
    [Minimap.Center.X, Minimap.Center.Y - 4]
  ];

  for Tile in Tiles do
    Result += Minimap.StaticToMsRect(Tile, 0);
end;

procedure MainScreen.DebugAdjacentTiles;
var
  Bitmap: TMufasaBitmap;
  Rects: array of TRectangle;
  Rect: TRectangle;
begin

  Rects := Self.GetAdjacentTiles;

  Bitmap.FromClient;

  for Rect in Rects do
    Bitmap.DrawRect(Rect, $ffffff);

  ShowBitmap(Bitmap);
  Bitmap.Free;
end;

