{$DEFINE WL_MISC_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
  TRSItemInfo = Pointer;

function TRSItemInfo.GetRSBuddyPage(Item: TRSItem): String;
var
  ItemID: String;
begin
  Item := VarToStr(Item);

  if VarToStr(Item).IsDigit() then
    ItemID := Item
  else
  begin
    ItemID := ItemFinder.ItemNames.GetValues(Item);
    if (ItemID = '') then
      ItemFinder.Fatal('Unknown item: ' + Item);
  end;

  Result := GetPage('https://rsbuddy.com/exchange?id=' + ItemID);
end;

function TRSItemInfo.GetOSRSBoxPage(Item: TRSItem): String;
var
  ItemID: String;
begin
  if VarToStr(Item).IsDigit() then
    ItemID := Item
  else
  begin
    ItemID := ItemFinder.ItemNames.GetValues(Item);
    if (ItemID = '') then
      ItemFinder.Fatal('Unknown item: ' + Item);
  end;

  Result := GetPage('https://www.osrsbox.com/osrsbox-db/items-json/' + ItemID + '.json');
end;

function TRSItemInfo.GetBuyPrice(Item: TRSItem): Int32;
var
  Link, Price: String;
begin
  Link := Self.GetRSBuddyPage(Item);
  Price := Between('buy-price" class="col-md-7">'#13#10, #13#10, Link);
  Price := Replace(Price, ' ', '', [rfReplaceAll]);
  Result := StrToInt(Price);
end;

function TRSItemInfo.GetSellPrice(Item: TRSItem): Int32;
var
  Link, Price: String;
begin

  Link := Self.GetRSBuddyPage(Item);
  Price := Between('sell-price" class="col-md-7">'#13#10, #13#10, Link);
  Price := Replace(Price, ' ', '', [rfReplaceAll]);
  Result := StrToInt(Price);
end;

function TRSItemInfo.GetCost(Item: TRSItem): Int32;
var
  Link: String;
begin
  Link := Self.GetOSRSBoxPage(Item);
  Result := StrToInt(Between('cost": ', ',', Link));
end;

function TRSItemInfo.GetLowAlch(Item: TRSItem): Int32;
begin
  Result := Round(Self.GetCost(Item) * 0.4);
end;

function TRSItemInfo.GetHighAlch(Item: TRSItem): Int32;
begin
  Result := Round(Self.GetCost(Item) * 0.6);
end;


function ConvertToRSGP(Amount: Int64): String;
var
  StringLength: Int32;
  Divider: UInt32;
  Suffix: String;
begin
  Result := '';
  StringLength := Length(IntToStr(Amount));
  if StringLength <= 3 then
  begin
    Suffix := '';
    Divider := 1;
  end
  else if (StringLength >= 4) and (StringLength <= 6) then
  begin
    Suffix := 'k';
    Divider := 1000;
  end
  else if (StringLength >= 7) and (StringLength <= 9) then
  begin
    Suffix := 'm';
    Divider := 1000000;
  end
  else if (StringLength >= 10) and (StringLength <= 12) then
  begin
    Suffix := 'b';
    Divider := 1000000000;
  end
  else Exit();

  Result := FloatToStr(Round(Amount/Divider, 2)) + Suffix;
end;

function ConvertToRSGP(Amount: Extended): String; overload;
begin
  Result := ConvertToRSGP(Trunc(Amount));
end;


procedure TWaspLib.UpdateClientState;
begin
  RSClient.DetectClientMode(True);
  RSClient.ClientModeChanged;
  if Options.IsOpen and (Options.GetCurrentTab = ERSOptionsTab.CONTROLS) then
    MM2MS.ZoomLevel := Options.GetZoomLevel;
end;

procedure TWaspLib.ProcessWhileWaiting(DoAntiBan: Boolean = True);
begin
  if (GetTickCount - StatsDebugTick) > 500 then
  begin
    ClearDebug;
    WriteLn('+---| STATS |----------------------------------------');
    WriteLn('|- Script Runtime    : ', SRL.MsToTime(GetTimeRunning, Time_Short));
    WriteLn('|- Action            : ', Action);
    WriteLn('+----------------------------------------------------');
    StatsDebugTick := GetTickCount();
  end;
  Antiban.DismissRandom();
  if DoAntiban and Antiban.DoAntiban then
    Login.LoginPlayer;
end;

var
  ItemInfo: TRSItemInfo;
