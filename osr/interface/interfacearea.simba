{$DEFINE WL_INTERFACEAREA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

//Get buttons on any interface
function TRSMainScreen.GetButton: TRSButton;
var
  Buttons: TRSButtonArray := FindButtons([[21,21], [24,23]]);
begin
  if Buttons <> [] then
    Result := Buttons[High(Buttons)];
end;

//Checks for open classic interface
function TRSMainScreen.IsClassicOpen: Boolean;
begin
  Result := (SRL.CountColor(CTS0(3358536, 2), Self.Bounds) > 10000);
end;

//Checks for open scroll interface
function TRSMainScreen.IsScrollOpen: Boolean;
begin
  Result := (SRL.CountColor(CTS2(8693433, 5, 0.10, 1.17), Self.Bounds) > 35000);
end;

//Checks for any open interface
function TRSMainScreen.HasInterface: Boolean;
begin
  Result := Self.IsClassicOpen or Self.IsScrollOpen;
end;


function TRSMainScreen.ClickCloseButton(PressEscape: Boolean = False): Boolean;
var
  CloseButton: TRSButton := Self.GetButton;
begin
  Result := CloseButton <> [];

  if Result then
  begin
    case PressEscape of
      False: CloseButton.Click;
      True:  Keyboard.PressKey(VK_ESCAPE);
    end;
  end;
end;


//Close any open Interface
function TRSMainScreen.CloseInterface(PressEscape: Boolean): Boolean;
begin
  if not MainScreen.HasInterface then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not MainScreen.HasInterface, SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSMainScreen.CloseInterface(Chance: Double = BioHash): Boolean; overload;
var
  PressEscape: Boolean;
begin
  if Chance = BioHash then
    PressEscape := Antiban.BioDice
  else
    PressEscape := SRL.Dice(Chance);

  Result := Self.CloseInterface(PressEscape);
end;

