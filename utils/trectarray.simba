{$DEFINE WL_TRECTARRAY_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

function TRectArray.ToTPA(): TPointArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    Result.Extend(Self[i].ToTPA());
end;

//Joins any possible rectangles that are next to each other or within distance.
procedure TRectArray.Join(Dist: Int32 = 1);
var
  tpa: TPointArray;
  atpa: T2DPointArray;
begin
  atpa := Self.ToTPA().Cluster(dist);
  Self := [];

  for tpa in atpa do
    Self += tpa.MinAreaRect();
end;

function TRectArray.GetPolys(): TPolyArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    Result += Self[i].GetPoly();
end;

function TRectArray.GetPolys(other: TRectArray): TPolyArray; overload;
var
  i: Int32;
begin
  if Length(Self) <> Length(other) then
    Exit;

  for i := 0 to High(Self) do
    Result += Self[i].GetPoly(other[i]);
end;
