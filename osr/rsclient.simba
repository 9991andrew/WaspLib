(*
RSClient
========
Extensions to TRSClient and TRemoteInput.

One thing to keep in mind is that WaspLib enforces the use of Remote Input by default.

To disable it you have to use either of this snippets in your scripts:
.. pascal:: {$DEFINE SRL_DISABLE_REMOTEINPUT}
.. pascal::
  begin
    WLSettings.RemoteInput.Enabled := False;
  end;
*)
{$DEFINE WL_RSCLIENT_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF SRL_DISABLE_REMOTEINPUT}
function EIOS_IsInputEnabled(eios: Pointer): Boolean;
begin
  Result := EIOS_IsMouseInputEnabled(eios) and EIOS_IsKeyboardInputEnabled(eios);
end;

procedure EIOS_SetInputEnabled(eios: Pointer; enabled: Boolean);
begin
  EIOS_SetMouseInputEnabled(eios, enabled);
  EIOS_SetKeyboardInputEnabled(eios, enabled);
end;

procedure TRemoteInput.DisableRealInput;
begin
  if EIOS_IsInputEnabled(Self.EIOS) then
    EIOS_SetInputEnabled(Self.EIOS, False);
end;

procedure TRemoteInput.EnableRealInput;
begin
  if not EIOS_IsInputEnabled(Self.EIOS) then
    EIOS_SetInputEnabled(Self.EIOS, True);
end;

procedure TRemoteInput.Setup; override;
begin
  inherited;

  if WLSettings.RemoteInput.BlockInput and EIOS_IsInputEnabled(Self.EIOS) then
    EIOS_SetInputEnabled(Self.EIOS, False);

  AddOnTerminate(@Self.EnableRealInput);
end;

{$ENDIF}

procedure TRSClient.Setup; override;
begin
  Self.Name := 'RSClient';

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
    {$IFNDEF SCRIPT_GUI}
      Self.RemoteInput.Setup();
    {$ENDIF}
  {$ENDIF}

  Self.Mode := Self.DetectClientMode();
  if Self.Mode = ERSClientMode.UNKNOWN then
    Self.Mode := ERSClientMode.FIXED; // Fixed as default so we can login if needed

  Self.ClientModeChanged();
end;

procedure TRSClient.CheckClientSettings();
begin
  if not WL.GameSettings.HighestPitch then
  begin
    WL.GameSettings.HighestPitch := True;
    MainScreen.SetHighestPitch();
  end;

  if not WL.GameSettings.MaxBrightness then
  begin
    WL.GameSettings.MaxBrightness := Options.SetMaxBrightness();

    if (MM2MS.ZoomLevel = -1) and Options.IsOpen() and (Options.GetCurrentTab() = ERSOptionsTab.DISPLAY) then
      MM2MS.ZoomLevel := Options.GetZoomLevel();
  end;

  if not WL.GameSettings.RoofsHidden then
    WL.GameSettings.RoofsHidden := Options.HideRoofs();

  if WL.XP.Previous = 0 then
    XPBar.Read();
end;

function TRSClient.IsLoggedIn(): Boolean; override;
begin
  Result := inherited;

  if Result then
  begin
    StatsPayload.Update(False);
    Self.CheckClientSettings();
  end;
end;

