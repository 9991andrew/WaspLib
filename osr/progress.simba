(*
ProgressReport
==============
This is what's responsible for the in game screen report, often called as
"paint" or HUDProgressReport in WaspLib.

You can easily toggle the usage this on or off by switching the variables:
- `WLSettings.RemoteInput.HUDReport`
- `WLSettings.RemoteInput.Enabled`

.. note:: Keep in mind that ProgressReport requires remote input.
*)

{$DEFINE WL_PROGRESS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
type TProgressReport
~~~~~~~~~~~~~~~~~~~~
Type responsible for handling the HUDProgressReport, also commonly called as "Paint" or InGame/OnScreen Progress Report.
*)
type
  TProgressReport = record
    BGImg: TMufasaBitmap;
    ClientImg: TMufasaBitmap;

    TextColor: Int32;
    PreviousStrArray: TStringArray;

    Timer: TTimer;
    UsernameBox: TBox;

    Terminated: Boolean;
    IsSetup: Boolean;

    PadLength: Int32;
    PTimeRunning: ^TStopwatch;
    ProgressArray: TStringArray;
  end;

(*
ProgressReport.Terminate
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TProgressReport.Terminate();

Internal method called automatically on termination. This will do things such as free used assetsa and clear the progress report from the game screen.
*)
procedure TProgressReport.Terminate();
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if Self.Terminated then //avoids multiple terminations in case the script is chained.
    Exit;

  Self.BGImg.Clear();
  Self.BGImg.Free();

  ClientImg.Clear();
  ClientImg.Free(); //not sure if it needs to be freed?
  {$ENDIF}
end;

(*
ProgressReport.Setup
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TProgressReport.Setup();

Internal method called when we need to setup TProgressReport.
*)
procedure TProgressReport.Setup();
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  Self.BGImg.Init();
  Self.BGImg.SetName('Progress report background');
  Self.BGImg.LoadFromFile({$MACRO CURRENT_DIRECTORY} + 'WaspProgress.png');
  Self.BGImg.setFontAntialiasing(True);

  ClientImg := RSClient.Image();

  ClientImg.Clear();
  ClientImg.SetName('ClientImg');
  ClientImg.setFontAntialiasing(True);
  ClientImg.setFontSize(13);

  if Self.BGImg.GetFonts().Contains('Consolas') then
  begin
    Self.BGImg.setFontName('Consolas');
    RSClient.Image().setFontName('Consolas');
  end;

  Self.TextColor := $006CFF;
  Self.UsernameBox := Chat.GetDisplayNameBox();

  AddOnTerminate(@Self.Terminate);
  {$ENDIF}
end;

(*
ProgressReport.DrawBackground
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TProgressReport.DrawBackground(strArray: TStringArray; FontColor: Int32);

Method that handles drawing the background of our TProgressReport.
Usually called internally by TProgressReport.Update().
*)
procedure TProgressReport.DrawBackground(strArray: TStringArray; fontColor: Int32);
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if not Self.IsSetup then
  begin
    if strArray = [] then
      Exit;

    Self.BGImg.setFontSize(18);
    Self.BGImg.DrawTextShadow(ScriptName.Before('.simba').Replace('_', ' ').Capitalize(), [Round(Self.BGImg.GetWidth()/2) + 25, 7], FontColor, False);

    Self.BGImg.setFontSize(14);
    fontColor -= $90A301 - $C8D100;

    Self.BGImg.DrawText(strArray[High(strArray)], [10, 135], fontColor);
    Self.IsSetup := True;
  end;

  RSClient.Image().DrawBitmap(Self.BGImg, [Chat.Bounds.X1, Chat.Bounds.Y1 - 12]);
  {$ENDIF}
end;

(*
ProgressReport.DrawProgress
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TProgressReport.DrawProgress(strArray: TStringArray; fontColor: Int32);

Method that handles drawing the text of our TProgressReport.
Usually called internally by TProgressReport.Update().
*)
procedure TProgressReport.DrawProgress(strArray: TStringArray; fontColor: Int32);
var
  p, q: TPoint;
  i: Int32;
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  p := [Chat.Bounds().X1 + 10, Chat.Bounds().Y1 + 40];
  q := [Round(Chat.Bounds().Width()/2) + 20, p.y];

  fontColor -= $C8D100;

  for i := 0 to High(strArray) - 1 do
  begin
    if Frac(i/2) = 0 then
    begin
      ClientImg.DrawTextShadow(strArray[i], p, fontColor, False);
      p.Y += 20;
    end
    else
    begin
      ClientImg.DrawTextShadow(strArray[i], q, fontColor, False);
      q.Y += 20;
    end;
  end;

  Self.PreviousStrArray := strArray;
  {$ENDIF}
end;

(*
ProgressReport.HideProgress
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TProgressReport.HideProgress();

Used to hide TProgressReport.
Usually called internally by TProgressReport.Update().
*)
procedure TProgressReport.HideProgress();
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  Self.IsSetup := False;

  ClientImg.DrawBoxFilled(Self.UsernameBox, True, $819DAC); //Hide username by painting a box with similar color to the chatbox background.
  {$ENDIF}
end;

(*
ProgressReport.Update
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TProgressReport.Update(StrArray: TStringArray);

Main method that should be called to used to start and update TProgressReport.

To see TProgressReport.GetNextCycleColor() in action, which was just a fun experiment,
uncomment `Self.TextColor := Self.GetNextCycleColor(Self.TextColor, 10);`
*)
procedure TProgressReport.Update(StrArray: TStringArray);
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  ClientImg.Clear();

  if StrArray = [] then
    Exit;

  //Self.TextColor := Self.GetNextCycleColor(Self.TextColor, 10);
  Self.DrawBackground(StrArray, Self.TextColor);
  Self.DrawProgress(StrArray, Self.TextColor);
  {$ENDIF}
end;

(*
ProgressReport.Setup
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TProgressReport.Setup(); override;

Overriden method to enable TProgressReport.Timer.
This required to be overriden or we couldn't call already declared methods in ProgressReport.CheckButton().

THIS IS DISABLED IN SIMBA1400 SINCE THIS IS ONLY A THING IN SIMBA1500!
*)
procedure TProgressReport.Setup(); override;
begin
  inherited;

  //AddOnPause(@Self.HideProgress);
end;

(*
var ProgressReport
~~~~~~~~~~~~~~~~~~
Global TProgressReport variable.
*)
var
  ProgressReport: TProgressReport;
