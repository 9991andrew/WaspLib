(*
Walker Polygon Drawer
=====================
Tool to draw polygons in walker maps. This polygons can later be used to detect presence inside or outside of said polygoon of the player, minimap dot, or anything really.
*)

{$I SRL/osr.simba}
{$I WaspLib/osr.simba}

const
  MAP_NAME: String = 'mainland';

type
  TPolyDrawerForm = record
    Form: TForm;
    ImageBox: TSimbaImageBox;
    Nodes: TPointArray;

    CoordinateEdit: TEdit;
    SelectedNode: Int32;
    Dragging: Boolean;
    Map: String;
    Name: String;

    Offset: TPoint;
  end;

var
  PolyDrawer: TPolyDrawerForm;

begin
  // Change the map here
  PolyDrawer.Map := TRSWalker.FindMap(MAP_NAME);

  if 'mainland' in MAP_NAME then
    PolyDrawer.Offset := [3583, 0]
  else if ('x' in MAP_NAME) and ('y' in MAP_NAME) then
  begin
    PolyDrawer.Offset.X := StrToInt(MAP_NAME.After('x').Before('y'));
    PolyDrawer.Offset.Y := StrToInt(MAP_NAME.After('y'));
  end
  else
    PolyDrawer.Offset := [0, 0];
end;

procedure TPolyDrawerForm.OnMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Int32);
begin
  if Dragging and (SelectedNode > -1) then
  begin
    Nodes[SelectedNode].X := X;
    Nodes[SelectedNode].Y := Y;
    Nodes[SelectedNode] := Nodes[SelectedNode] + Offset;
    CoordinateEdit.setCaption(ToStr(Nodes[SelectedNode].X) + ', ' + ToStr(Nodes[SelectedNode].Y));
    ImageBox.Update;
  end;
end;

procedure TPolyDrawerForm.AddNode(p: TPoint);
var
  c: Int32;
begin
  c := Length(Nodes);
  SetLength(Nodes, c + 1);

  Nodes[c] := p + Offset;

  SelectedNode := c;
  ImageBox.Update;
  CoordinateEdit.setCaption(ToStr(Nodes[SelectedNode].X) + ', ' + ToStr(Nodes[SelectedNode].Y));
end;


procedure TPolyDrawerForm.DeleteNode(n: Int32);
var
  i,curr: Int32;
  marked: TIntegerArray;
  p: TPoint;
begin
  p := Nodes[n];
  marked += n;

  repeat
    curr := marked.Pop;

    for i:=0 to High(marked) do
      if marked[i] > curr then Dec(marked[i]);

    // remove the node itself
    Delete(Nodes, curr, 1);
  until Length(marked) = 0;

  SelectedNode := High(Nodes);
  ImageBox.Update;

  if Nodes <> [] then
    CoordinateEdit.setCaption(ToStr(Nodes[SelectedNode].X) + ', ' + ToStr(Nodes[SelectedNode].Y))
  else
    CoordinateEdit.setCaption('null, null');
end;


procedure TPolyDrawerForm.OnMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Int32);
var
  I: Int32;
  P: TPoint;
begin
  if Button <> mbLeft then
    Exit;

  Dragging := True;

  for I := 0 to High(Nodes) do
  begin
    P := Nodes[I] - Offset;
    if Distance(P.X, P.Y, X, Y) <= 3 then
    begin
      SelectedNode := I;
      CoordinateEdit.setCaption(ToStr(Nodes[I].X) + ', ' + ToStr(Nodes[I].Y));
      ImageBox.Update;
      Exit;
    end;
  end;

  AddNode([X, Y]);
end;

procedure TPolyDrawerForm.OnMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Int32);
begin
  if Button = mbLeft then
    Dragging := False;
end;

procedure TPolyDrawerForm.OnKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if (Key = VK_DELETE) and (SelectedNode > -1) then
    DeleteNode(SelectedNode);
end;


procedure TPolyDrawerForm.DrawWeb(Area: TBox);
var
  W,H,i,j,n,color,add: Int32;
  p,q: TPoint;
  line: TPointArray;
  canvas: TCanvas;
  B: TBox;
begin
  if Length(Nodes) = 0 then
    Exit;

  Canvas := ImageBox.GetOverlay.GetCanvas;
  Canvas.GetPen.SetColor($00FFFF);

  for i := 0 to High(Nodes) do
  begin
    p := Nodes[i] - Offset;

    if i < High(Nodes) then
      q := Nodes[i + 1]
    else
      q := Nodes[0];

    q := q - Offset;

    color := $0000FF;

    if p.InBox(Area) or q.InBox(Area) then
    begin
      Canvas.MoveTo(p.x, p.y);
      Canvas.LineTo(q.x, q.y);
    end;

    if p.InBox(Area) then
    begin
      Canvas.GetBrush.SetColor(Color);
      Canvas.FillRect(p.X-3, p.Y-3, p.X+3, p.Y+3);
    end;
  end;

  if InRange(SelectedNode, Low(Nodes), High(Nodes)) then
  begin
    Canvas.GetBrush.SetColor($FF0000);
    p := Nodes[SelectedNode] - Offset;
    Canvas.FillRect(p.X-3, p.Y-3, p.X+3, p.Y+3);
  end;
end;


procedure TPolyDrawerForm.PaintArea(Sender: TObject; Canvas: TCanvas; R: TRect);
begin
  DrawWeb([R.Left, R.Top, R.Right, R.Bottom]);
end;


procedure TPolyDrawerForm.OnUnSelectNode(Sender: TObject);
begin
  SelectedNode := -1;
  ImageBox.Update;
end;

procedure TPolyDrawerForm.OnPrintNodes(Sender: TObject);
var
  i: Int32;
  Str: String;
begin
  Str := '[';
  for i := 0 to High(Nodes) do
  begin
    Str += '[' + ToStr(Nodes[i].X) + ', ' + ToStr(Nodes[i].Y) + ']';
    if i < High(Nodes) then
      Str += ', ';
  end;

  Str += ']';

  WriteLn Str;
end;

procedure TPolyDrawerForm.OnFormShow(Sender: TObject);
begin
  SelectedNode := High(Nodes);
  if SelectedNode > -1 then
    ImageBox.MoveTo(Nodes[SelectedNode].X, Nodes[SelectedNode].Y);
  ImageBox.Update;
  CoordinateEdit.setCaption('null, null');
end;

procedure TPolyDrawerForm.OnFormClose(Sender: TObject; var CloseAction: TCloseAction);
begin
  OnPrintNodes(nil);
end;

procedure TPolyDrawerForm.Run;
var
  Panel: TPanel;
  NodeLabel: TLabel;
  Button: TButton;
begin
  try
    Name := 'PolygonDrawer';

    Form.Init(nil);
    Form.SetPosition(poScreenCenter);
    Form.SetCaption('Walker Polygon Drawer');
    Form.SetWidth(1000);
    Form.SetHeight(1000);
    Form.GetFont.SetSize(10);
    Form.SetOnShow(@OnFormShow);
    Form.SetOnClose(@OnFormClose);

    Panel.Init(Form);
    Panel.SetParent(Form);
    Panel.SetAutoSize(True);
    Panel.SetAlign(alTop);

    CoordinateEdit.Init(Panel);
    CoordinateEdit.setParent(Panel);
    CoordinateEdit.setAutoSize(True);
    CoordinateEdit.setAlign(alLeft);

    NodeLabel.Init(Panel);
    NodeLabel.setParent(Panel);
    NodeLabel.setAutoSize(True);
    NodeLabel.setCaption(' Selected coordinate: ');
    NodeLabel.setAlign(alLeft);

    Button.Init(Panel);
    Button.SetParent(Panel);
    Button.SetAutoSize(True);
    Button.SetCaption('Print TPointArray');
    Button.SetOnClick(@OnPrintNodes);
    Button.setAlign(alLeft);

    ImageBox.Init(Form);
    ImageBox.SetParent(Form);
    ImageBox.SetAlign(alClient);
    ImageBox.SetOnPaintArea(@PaintArea);
    ImageBox.SetOnMouseMove(@OnMouseMove);
    ImageBox.SetOnMouseDown(@OnMouseDown);
    ImageBox.SetOnMouseUp(@OnMouseUp);
    ImageBox.SetOnKeyDown(@OnKeyDown);
    ImageBox.GetBackground.LoadFromFile(Map);
    ImageBox.BackgroundChanged;

    WriteLn('Click:                Add or select node'    + LineEnding +
            'Click + Drag:         Move selected node'    + LineEnding +
            'Press Delete Key:     Remove Selected Node'  + LineEnding +
            'Right Click + Drag:   Move around'           + LineEnding +
            'Ctrl + Mouse Wheel:   Zoom');

    Form.ShowModal;
    Form.Free;
  except
    Writeln GetExceptionMessage;
  end;
end;

begin
  Sync(@PolyDrawer.Run);
end.

