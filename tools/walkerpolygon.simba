(*
Walker Polygon Drawer
=====================
Tool to draw polygons in walker maps. This polygons can later be used to detect presence inside or outside of said polygoon of the player, minimap dot, or anything really.
*)

{$DEFINE SRL_DISABLE_REMOTEINPUT}
{$I SRL/osr.simba}
{$I WaspLib/osr.simba}
{$H-}

const
  MAP_NAME: String = 'agility';

var
  NodeArray: T2DPointArray := [

  ];

type
  TPolyDrawerForm = record
    Form: TForm;
    ImageBox: TSimbaImageBox;

    SelectedPolygon: Int32;

    PolyIndexEdit: TEdit;
    CoordinateEdit: TEdit;
    SelectedNode: Int32;
    Dragging: Boolean;
    Map: TMufasaBitmap;
    Name: String;

    Offset: TPoint;
  end;

var
  PolyDrawer: TPolyDrawerForm;


procedure Setup(MapStr: String);
var
  Map: TRSMap;
  Path: String;
  Bitmap, Mask, Sample: TMufasaBitmap;
  i: Int32;
  X, Y: Int32;
begin
  Map := [];
  MapStr := MapStr.ToLower();

  i := WASP_MAP_ARRAY.IndexOf(MapStr);

  if i > -1 then
    Map := WASP_MAP_ARRAY[i];

  WriteLn Map = [];

  if i = -1 then
    Path := TWaspWalker.FindMap(MapStr)
  else
    Path := TWaspWalker.FindMap(Map);

  if (Path = '') then
    TerminateScript('Unable to find map: ' + MapStr);

  PolyDrawer.Map := TWaspWalker.LoadMap(Path, Map);
  if Map <> [] then
    PolyDrawer.Offset := [Map.Coordinates.X1, Map.Coordinates.Y1];
end;

begin
  Setup(MAP_NAME);
end;

procedure TPolyDrawerForm.OnMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Int32);
begin
  if Self.Dragging and (Self.SelectedNode > -1) then
  begin
    NodeArray[Self.SelectedPolygon][Self.SelectedNode].X := X;
    NodeArray[Self.SelectedPolygon][Self.SelectedNode].Y := Y;
    NodeArray[Self.SelectedPolygon][Self.SelectedNode] := NodeArray[Self.SelectedPolygon][Self.SelectedNode] + Self.Offset;
    Self.PolyIndexEdit.setCaption(ToStr(Self.SelectedPolygon));
    Self.CoordinateEdit.setCaption(ToStr(NodeArray[Self.SelectedPolygon][Self.SelectedNode].X) + ', ' + ToStr(NodeArray[Self.SelectedPolygon][Self.SelectedNode].Y));
    Self.ImageBox.Update;
  end;
end;


procedure TPolyDrawerForm.AddToArray;
begin
  Self.SelectedPolygon := Length(NodeArray);
  SetLength(NodeArray, Self.SelectedPolygon + 1);
end;

procedure TPolyDrawerForm.RemoveFromArray;
begin
  Delete(NodeArray, Self.SelectedPolygon, 1);
  Self.SelectedPolygon := High(NodeArray);
end;


procedure TPolyDrawerForm.AddNode(p: TPoint);
var
  n, c: Int32;
begin
  if Self.SelectedPolygon < 0 then
    Self.SelectedPolygon := 0;

  n := Length(NodeArray);
  if (n = 0) or (Self.SelectedPolygon > n) then
    SetLength(NodeArray, n + 1);

  c := Length(NodeArray[Self.SelectedPolygon]);
  SetLength(NodeArray[Self.SelectedPolygon], c + 1);

  NodeArray[Self.SelectedPolygon][c] := p + Self.Offset;

  Self.SelectedNode := c;
  Self.ImageBox.Update;
  Self.PolyIndexEdit.setCaption(ToStr(Self.SelectedPolygon));
  Self.CoordinateEdit.setCaption(ToStr(NodeArray[Self.SelectedPolygon][Self.SelectedNode].X) + ', ' + ToStr(NodeArray[Self.SelectedPolygon][Self.SelectedNode].Y));
end;

procedure TPolyDrawerForm.DeleteNode(n: Int32);
var
  i,curr: Int32;
  marked: TIntegerArray;
  p: TPoint;
begin
  p := NodeArray[Self.SelectedPolygon][n];
  marked += n;

  repeat
    curr := marked.Pop;

    for i:=0 to High(marked) do
      if marked[i] > curr then Dec(marked[i]);

    // remove the node itself
    Delete(NodeArray[Self.SelectedPolygon], curr, 1);
  until Length(marked) = 0;

  if NodeArray[Self.SelectedPolygon] = [] then
    Self.RemoveFromArray;

  Self.SelectedNode := High(NodeArray[Self.SelectedPolygon]);
  Self.ImageBox.Update;

  if Self.SelectedPolygon > -1 then
  begin
    Self.PolyIndexEdit.setCaption(ToStr(Self.SelectedPolygon));
    if NodeArray[Self.SelectedPolygon] <> [] then
      Self.CoordinateEdit.setCaption(ToStr(NodeArray[Self.SelectedPolygon][Self.SelectedNode].X) + ', ' + ToStr(NodeArray[Self.SelectedPolygon][Self.SelectedNode].Y))
    else
      Self.CoordinateEdit.setCaption('null, null');
  end
  else
    Self.PolyIndexEdit.setCaption('null');
end;


procedure TPolyDrawerForm.OnMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Int32);
var
  I, J: Int32;
  P: TPoint;
begin
  if Button <> mbLeft then
    Exit;

  Self.Dragging := True;

  for I := 0 to High(NodeArray) do
    for J := 0 to High(NodeArray[I]) do
    begin
      P := NodeArray[I][J] - Self.Offset;
      if Distance(P.X, P.Y, X, Y) <= 3 then
      begin
        Self.SelectedPolygon := I;
        Self.SelectedNode := J;
        Self.PolyIndexEdit.setCaption(ToStr(Self.SelectedPolygon));
        Self.CoordinateEdit.setCaption(ToStr(NodeArray[I][J].X) + ', ' + ToStr(NodeArray[I][J].Y));
        Self.ImageBox.Update;
        Exit;
      end;
    end;

  Self.AddNode([X, Y]);
end;

procedure TPolyDrawerForm.OnMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Int32);
begin
  if Button = mbLeft then
    Self.Dragging := False;
end;

(*
TODO: FIX THIS.... OLLY FAULT?
procedure TPolyDrawerForm.OnKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  if (Key = VK_DELETE) and (SelectedNode > -1) then
    DeleteNode(SelectedNode);
end;
*)

procedure TPolyDrawerForm.DrawPolygons(Area: TBox);
var
  I, J, Color: Int32;
  P, Q: TPoint;
  Canvas: TCanvas;
begin
  if (Length(NodeArray) = 0) then
    Exit;

  Canvas := Self.ImageBox.GetCanvas();
  for J := 0 to High(NodeArray) do
  begin
    if (Length(NodeArray[J]) > 0) then
    begin
      for i := 0 to High(NodeArray[J]) do
      begin
        P := NodeArray[J][i] - Self.Offset;

        if I < High(NodeArray[J]) then
          Q := NodeArray[J][I + 1]
        else
          Q := NodeArray[J][0];

        Q := Q - Self.Offset;

        if J = Self.SelectedPolygon then
        begin
          Canvas.GetPen.SetColor($00FF7F);
          Color := $FFAAD4;
        end
        else
        begin
          Canvas.GetPen.SetColor($00FFFF);
          Color := $0000FF;
        end;

        if P.InBox(Area) or Q.InBox(Area) then
        begin
          Canvas.MoveTo(P.x, P.y);
          Canvas.LineTo(Q.x, Q.y);
        end;

        if P.InBox(Area) then
        begin
          Canvas.GetBrush.SetColor(Color);
          Canvas.FillRect(P.X-3, P.Y-3, P.X+3, P.Y+3);
        end;
      end;

      if InRange(Self.SelectedNode, Low(NodeArray[Self.SelectedPolygon]), High(NodeArray[Self.SelectedPolygon])) then
      begin
        Canvas.GetBrush.SetColor($FF0000);
        P := NodeArray[Self.SelectedPolygon][Self.SelectedNode] - Self.Offset;
        Canvas.FillRect(P.X-3, P.Y-3, P.X+3, P.Y+3);
      end;
    end;
  end;
end;


procedure TPolyDrawerForm.PaintArea(Sender: TObject; Canvas: TCanvas; R: TRect);
begin
  Self.DrawPolygons([R.Left, R.Top, R.Right, R.Bottom]);
end;


procedure TPolyDrawerForm.OnUnSelectNode(Sender: TObject);
begin
  Self.SelectedNode := -1;
  Self.ImageBox.Update();
end;


procedure TPolyDrawerForm.OnResetNodeArray(Sender: TObject);
begin
  NodeArray := [];
  Self.SelectedPolygon := -1;
  Self.SelectedNode := -1;
end;

procedure TPolyDrawerForm.OnNewNodeArray(Sender: TObject);
begin
  Self.AddToArray;
end;

procedure TPolyDrawerForm.OnPrintNodeArray(Sender: TObject);
var
  I, J: Int32;
  Str: String;
begin
  if Length(NodeArray) > 1 then
  begin
    Str := '[' + STR_NEW_LINE;
    for J := 0 to High(NodeArray) do
    begin
      Str += '[';
      for I := 0 to High(NodeArray[J]) do
      begin
        Str += '[' + ToStr(NodeArray[J][I].X) + ', ' + ToStr(NodeArray[J][I].Y) + ']';
        if I < High(NodeArray[J]) then
          Str += ', ';
      end;

      Str += ']';
      if J < High(NodeArray) then
        Str += ',';

      Str += STR_NEW_LINE;
    end;

    Str += ']';
  end
  else
  begin
      Str := '[';
      for I := 0 to High(NodeArray[0]) do
      begin
        Str += '[' + ToStr(NodeArray[0][I].X) + ', ' + ToStr(NodeArray[0][I].Y) + ']';
        if I < High(NodeArray[0]) then
          Str += ', ';
      end;
      Str += ']';
  end;

  WriteLn Str;
end;


procedure TPolyDrawerForm.OnFormShow(Sender: TObject);
begin
  Self.ImageBox.Update;
  Self.PolyIndexEdit.setCaption('null');
  Self.CoordinateEdit.setCaption('null, null');
end;

procedure TPolyDrawerForm.OnFormClose(Sender: TObject; var CloseAction: TCloseAction);
begin
  Self.OnPrintNodeArray(nil);
end;

procedure TPolyDrawerForm.Run;
var
  Panel: TPanel;
  IndexLabel, NodeLabel: TLabel;
  PrintButton, NewButton, ResetButton: TButton;
begin
  try
    Self.Name :='PolygonDrawer';

    Self.Form.Init(nil);
    Self.Form.SetPosition(poScreenCenter);
    Self.Form.SetCaption('Walker Polygon Drawer');
    Self.Form.SetWidth(1000);
    Self.Form.SetHeight(1000);
    Self.Form.GetFont.SetSize(10);
    Self.Form.SetOnShow(@Self.OnFormShow);
    Self.Form.SetOnClose(@Self.OnFormClose);

    Panel.Init(Self.Form);
    Panel.SetParent(Self.Form);
    Panel.SetAutoSize(True);
    Panel.SetAlign(alTop);

    Self.CoordinateEdit.Init(Panel);
    Self.CoordinateEdit.setParent(Panel);
    Self.CoordinateEdit.setAutoSize(True);
    Self.CoordinateEdit.setAlign(alLeft);

    NodeLabel.Init(Panel);
    NodeLabel.setParent(Panel);
    NodeLabel.setAutoSize(True);
    NodeLabel.setCaption(' Selected coordinate: ');
    NodeLabel.setAlign(alLeft);

    Self.PolyIndexEdit.Init(Panel);
    Self.PolyIndexEdit.setParent(Panel);
    Self.PolyIndexEdit.setAutoSize(True);
    Self.PolyIndexEdit.setAlign(alLeft);

    IndexLabel.Init(Panel);
    IndexLabel.setParent(Panel);
    IndexLabel.setAutoSize(True);
    IndexLabel.setCaption(' Selected polygon: ');
    IndexLabel.setAlign(alLeft);

    ResetButton.Init(Panel);
    ResetButton.SetParent(Panel);
    ResetButton.SetAutoSize(True);
    ResetButton.SetCaption('Reset');
    ResetButton.SetOnClick(@Self.OnResetNodeArray);
    ResetButton.setAlign(alLeft);

    NewButton.Init(Panel);
    NewButton.SetParent(Panel);
    NewButton.SetAutoSize(True);
    NewButton.SetCaption('New Polygon');
    NewButton.SetOnClick(@Self.OnNewNodeArray);
    NewButton.setAlign(alLeft);

    PrintButton.Init(Panel);
    PrintButton.SetParent(Panel);
    PrintButton.SetAutoSize(True);
    PrintButton.SetCaption('Print Polygons');
    PrintButton.SetOnClick(@Self.OnPrintNodeArray);
    PrintButton.setAlign(alLeft);

    Self.ImageBox.Init(Self.Form);
    Self.ImageBox.SetParent(Self.Form);
    Self.ImageBox.SetAlign(alClient);
    Self.ImageBox.SetOnPaintArea(@Self.PaintArea);
    Self.ImageBox.SetOnMouseMove(@Self.OnMouseMove);
    Self.ImageBox.SetOnMouseDown(@Self.OnMouseDown);
    Self.ImageBox.SetOnMouseUp(@Self.OnMouseUp);
    //Self.ImageBox.SetOnKeyDown(@Self.OnKeyDown);
    Self.ImageBox.SetBackground(Self.Map);

    WriteLn('Click:                Add or select node'    + LineEnding +
            'Click + Drag:         Move selected node'    + LineEnding +
            'Press Delete Key:     Remove Selected Node'  + LineEnding +
            'Right Click + Drag:   Move around'           + LineEnding +
            'Ctrl + Mouse Wheel:   Zoom');

    Self.Form.ShowModal;
    Self.Form.Free;
  except
    Writeln GetExceptionMessage;
  end;
end;

begin
  Sync(@PolyDrawer.Run);
end.

