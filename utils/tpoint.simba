(*
TPoint
======
TPoint related methods that extend SRL's TPoint functionality.
*)

{$DEFINE WL_TPOINT_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

function TPoint.Between(A, B: TPoint; ForceLine: Boolean = False): Boolean;
var
  TotalDist: Double;
  ThirdDist: Double;
begin
  TotalDist := A.DistanceTo(B);

  if not ForceLine then  //ForceLine makes it check if the point is between and is within a straight line of the 2 points.
    ThirdDist := TotalDist / 3;
  Result := InRange(Self.DistanceTo(A) + Self.DistanceTo(B), TotalDist - ThirdDist, TotalDist + ThirdDist);
end;

function TPoint.WithinDistance(P: TPoint; Distance: Int32 = 15): Boolean;
begin
  Result := Self.DistanceTo(P) <= Distance;
end;

function TPoint.WithinDistance(TPA: TPointArray; Distance: Int32 = 15): Boolean; overload;
var
  P: TPoint;
begin
  if TPA = [] then
    Exit;

  P := TPA.Sorted(Self)[0]; //Sort TPA so the index 0 is the closest to Self.
  Result := Self.DistanceTo(P) <= Distance;
end;

