{$DEFINE WL_ACTION_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSAction = (
    CHECK_STATS,
    ALCH,
    FLETCH,
    FISH,
    DROP
  );

  TRSAction = record
    Alchables, Droppables: TRSItemArray;
    DropSlots: TIntegerArray;
  end;


procedure TRSAction.Setup();
begin
  Self.Alchables := [
    'Onyx bolts (e)', 'Yew longbow', 'Magic longbow', 'Adamant platebody'
    'Rune 2h sword', 'Rune axe', 'Rune battleaxe', 'Rune boots', 'Rune cane',
    'Rune chainbody', 'Rune claws', 'Rune crossbow', 'Rune dagger',
    'Rune dagger(p+)', 'Rune full helm', 'Rune halberd', 'Rune hasta',
    'Rune kiteshield', 'Rune longsword', 'Rune mace', 'Rune med helm',
    'Rune pickaxe', 'Rune platebody', 'Rune platelegs', 'Rune plateskirt',
    'Rune scimitar', 'Rune spear', 'Rune sq shield', 'Rune sword',
    'Runite crossbow (u)', 'Runite limbs'
  ];
  Self.Droppables := [
    'Trout', 'Salmon', 'Leaping trout', 'Leaping salmon','Leaping sturgeon'
  ];
end;

procedure TRSAction.SetDropSlots(Items: TRSItemArray; Pattern: TIntegerArray);
var
  Slots: TIntegerArray;
  I: Int32;
begin
  Inventory.FindItems(Items, Slots);
  for I := 0 to High(Pattern) do
    if Slots.Find(Pattern[I]) > -1 then
      Self.DropSlots += Pattern[I];
end;


procedure TRSAction.ClearVariables;
begin
  DropSlots := [];
end;

function TRSAction.DropItems: Boolean;
begin
  if Self.DropSlots = [] then
    Self.SetDropSlots(Self.Droppables, Inventory.RandomPattern);
  if Self.DropSlots = [] then
    Exit(True);

  Result := Inventory.ShiftDrop([Self.DropSlots[0]]);
  Self.DropSlots.Del(0);
end;


function TRSAction.Alch(Items: TRSItemArray; HighAlch: Boolean = True): Boolean;
var
  Item: TRSItem;
  Spell: ERSStandardSpell;
begin
  if HighAlch then
    Spell := ERSStandardSpell.HIGH_LEVEL_ALCHEMY
  else
    Spell := ERSStandardSpell.LOW_LEVEL_ALCHEMY;

  if Magic.CastSpell(Spell) then
  begin
    for Item in Items do
      if Inventory.ClickItem(Item) then
        Exit(XPBar.WaitXPDrop(600));
  end;
end;

function TRSAction.Alch(Item: TRSItem; HighAlch: Boolean = True): Boolean; overload;
var
  Spell: ERSStandardSpell;
begin
  if HighAlch then
    Spell := ERSStandardSpell.HIGH_LEVEL_ALCHEMY
  else
    Spell := ERSStandardSpell.LOW_LEVEL_ALCHEMY;

  if Magic.CastSpell(Spell) then
  begin
    if Inventory.ClickItem(Item) then
      Result := XPBar.WaitXPDrop(600);
  end;
end;

function TRSAction.FindFishSpot(out ATPA: T2DPointArray; ScanTime: Int32 = 250): Boolean;
var
  FinalTPA, TPA: TPointArray;
  t: TCountDown;
begin
  t.Init(ScanTime);

  while not t.IsFinished do
  begin
    SRL.FindColors(TPA, CTS2(8875103, 16, 0.2, 0.7), InterfaceArea.Bounds);
    FinalTPA += TPA.Edges();
  end;

  if FinalTPA = [] then
    Exit;

  Result := True;

  FinalTPA.ClearDuplicates;
  FinalTPA := ClearTPAFromTPA(FinalTPA, FinalTPA.Edges());

  FinalTPA.Sort(MainScreen.GetPlayerBox.Middle);

  ATPA := FinalTPA.Cluster(5);
  ATPA.FilterSize(12, __GT__);
  ATPA.FilterSize(200, __LT__);
end;

function TRSAction.FindFishSpot(ScanTime: Int32 = 250): Boolean; overload;
var
  FinalTPA, TPA: TPointArray;
  ATPA: T2DPointArray;
  t: TCountDown;
begin
  t.Init(ScanTime);

  while not t.IsFinished do
  begin
    SRL.FindColors(TPA, CTS2(8875103, 16, 0.2, 0.7), InterfaceArea.Bounds);
    FinalTPA += TPA.Edges();
  end;

  if FinalTPA = [] then
    Exit;

  FinalTPA.ClearDuplicates;
  FinalTPA := ClearTPAFromTPA(FinalTPA, FinalTPA.Edges());

  FinalTPA.Sort(MainScreen.GetPlayerBox.Middle);

  ATPA := FinalTPA.Cluster(5);
  ATPA.FilterSize(12, __GT__);
  ATPA.FilterSize(200, __LT__);

  Result := ATPA <> [];
end;

function TRSAction.IsFishing(): Boolean;
var
  Rect1,Rect2: TRectangle;
  TPA1, TPA2: TPointArray;
begin
  Rect1 := Minimap.StaticToMsRect([(Minimap.Center.X + 4), Minimap.Center.Y],1);
  Rect2 := Minimap.StaticToMsRect([(Minimap.Center.X + 7), Minimap.Center.Y],1);

  if srl.FindColors(TPA1, CTS2(6694,10), Rect1.Bounds) > 12 then
    Result := srl.FindColors(TPA2, CTS2(6694,10), Rect2.Bounds) > 5;
end;


procedure TRSAction.DebugObject(ATPA: T2DPointArray);
var
  Bitmap: TMufasaBitmap;
begin
  Bitmap.FromClient;
  Bitmap.DrawBoxes(ATPA.ToTBA, False, $ffffff);
  ShowBitmap(Bitmap);
  Bitmap.Free;
end;

function TRSAction.ClickObject(UpText: String; ATPA: T2DPointArray): Boolean;
var
  i: Int32;
begin
  if MainScreen.IsUpText(UpText) then
  begin
    Mouse.Click(MOUSE_LEFT);
    if MainScreen.DidYellowClick then
      Exit(False);
    Minimap.WaitPlayerMoving(300, 3000);
    Exit(True);
  end
  else if ATPA = [] then
    Exit(False);

  for i := 0 to High(ATPA) do
  begin
    Mouse.Move(ATPA[i].Bounds);
    if MainScreen.IsUpText(UpText) then
    begin
      Mouse.Click(MOUSE_LEFT);
      if MainScreen.DidYellowClick then
        Exit(False);
      Minimap.WaitPlayerMoving(300, 3000);
      Exit(True);
    end
    else if i = High(ATPA) then
      Exit(False);
  end;
end;

function TRSAction.StartFishing: Boolean;
var
  ATPA: T2DPointArray;
begin
  if not Self.FindFishSpot(ATPA, 250) then
    Exit;
  Result := Self.ClickObject('Fishing spot', ATPA);
end;

procedure TRSAction.DoAction(Action: ERSAction);
begin
  case Action of
    CHECK_STATS: Antiban.HoverSkills;
    FISH: ;
    //ALCH: Self.Alch(Self.Alchables);
    FLETCH: ;
    //DROP: Self.DropItems;
  end;
end;

var
  RSAction: TRSAction;

begin
  RSAction.Setup();
end;
