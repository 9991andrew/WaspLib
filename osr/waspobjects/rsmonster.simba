(*
RSMonters
=========
Methods to handle TRSMonters.
TRSMonters are a type or TRSMMDot that can be fought.
*)

{$DEFINE WL_RSMONSTER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSMonster = record(TRSMMDot)
    MonsterName: String;
    Hitpoints: Int32;
    MaxHit: Int32;
    AttackTypes: array of ERSMonsterAttackType;
  end;

  TRSMonsterArray = array of TRSMonster;
  PRSMonster = ^TRSMonster;
  PRSMonsterArray = array of PRSMonster;



procedure TRSMonster.SetupCommon(Name: String); overload;
var
  Size: Int32;
begin
  if Name = '' then
    Exit;
  Self.MonsterName := Name;

  Self.SetupCommon;

  Self.DotType := ERSMinimapDot.NPC;

  Self.UpText += Name;

  Self.Hitpoints := MonsterData.GetInt(Name, 'hitpoints');
  Self.MaxHit := MonsterData.GetInt(Name, 'max_hit');
  Size := MonsterData.GetInt(Name, 'size');
  case Size of
    1:   Self.ShapeArray := [[[], [Size, Size, 0]]];
    2:   Self.ShapeArray := [[[], [1.25, 1.25, 0]]];
    else Self.ShapeArray := [[[], [Size/2, Size/2, 0]]];
  end;

  Self.AttackTypes := MonsterData.GetAttackTypes(Name);
end;

function TRSMonster.Attack: Boolean;
begin
  if Self.SelectOption(['Attack']) then
  begin
    Minimap.WaitMoving;
    Result := MainScreen.InCombat;
  end;
end;

function TRSMonster.WalkAttack: Boolean;
var
  Attacked: Boolean;
begin
  Attacked := (Self.Filter.Walker and Self.WalkSelectOption(['Attack'])) or
               Self.SelectOption(['Attack']);

  if Attacked then
  begin
    Minimap.WaitMoving;
    Result := MainScreen.InCombat;
  end;
end;


//Debug TRSMonster
procedure Debug(Monster: TRSMonster); overload;
var
  Bitmap: TMufasaBitmap;
  MMPoints, Dots: TPointArray;
  DotFilters: TRSDotFilterArray;
  Tiles, FloorTiles, RoofTiles: TRectArray;
  PolyArray: TPolyArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  Bitmap.FromClient;

  Monster.Find(MMPoints, Dots, DotFilters,
             Tiles, FloorTiles, RoofTiles, PolyArray, ATPA);

  //Minimap drawing
  for I := 0 to High(MMPoints) do
    Bitmap.DrawCrosshairs(MMPoints[I], 4, 2, clBlue);

  for I := 0 to High(Dots) do
    Bitmap.DrawCrosshairs(Dots[I], 2, 1, clTeal);

  for I := 0 to High(DotFilters) do
  begin
    if DotFilters[I].HasTimer and DotFilters[I].Timer.IsFinished then
      Continue;

    if DotFilters[I].TPA <> [] then
    begin
      if DotFilters[I].Inside then
        Bitmap.DrawTPA(DotFilters[I].TPA.Connect, clLime)
      else
        Bitmap.DrawTPA(DotFilters[I].TPA.Connect, clRed);
    end;

    if DotFilters[I].Circle <> [] then
    begin
      if DotFilters[I].Inside then
        Bitmap.DrawCircle(DotFilters[I].Circle.Mean, DotFilters[I].Circle.Radius, clLime)
      else
        Bitmap.DrawCircle(DotFilters[I].Circle.Mean, DotFilters[I].Circle.Radius, clRed);
    end;
  end;

  for I := 0 to High(Tiles) do
    Bitmap.DrawRect(Tiles[I], $00FFFF);

  for I := 0 to High(FloorTiles) do
    Bitmap.DrawRect(FloorTiles[I], $FFFFFF);

  for I := 0 to High(RoofTiles) do
    Bitmap.DrawRect(RoofTiles[I], $FFFFFF);

  for I := 0 to High(PolyArray) do
    Bitmap.DrawTPA(PolyArray[I], $00FFFF);

  Bitmap.DrawATPA(ATPA);
  if ATPA <> [] then
    Bitmap.DrawTPA(ATPA[0], $000000);

  Bitmap.Show(True);
  Bitmap.Free;
end;

procedure TRSMonster.Draw(out Bitmap: TMufasaBitmap); override;
var
  MMPoints, Dots: TPointArray;
  DotFilters: TRSDotFilterArray;
  Tiles, FloorTiles, RoofTiles: TRectArray;
  PolyArray: TPolyArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  Self.Find(MMPoints, Dots, DotFilters,
             Tiles, FloorTiles, RoofTiles, PolyArray, ATPA);

  //Minimap drawing
  for I := 0 to High(MMPoints) do
    Bitmap.DrawCrosshairs(MMPoints[I], 3, 1, $FFFFFF);

  for I := 0 to High(Dots) do
    Bitmap.DrawCrosshairs(Dots[I], 3, 1, $00FFFF);

  for I := 0 to High(DotFilters) do
  begin
    if DotFilters[I].HasTimer and DotFilters[I].Timer.IsFinished then
      Continue;

    if DotFilters[I].TPA <> [] then
    begin
      if DotFilters[I].Inside then
        Bitmap.DrawTPA(DotFilters[I].TPA.Connect, clLime)
      else
        Bitmap.DrawTPA(DotFilters[I].TPA.Connect, clRed);
    end;

    if DotFilters[I].Circle <> [] then
    begin
      if DotFilters[I].Inside then
        Bitmap.DrawCircle(DotFilters[I].Circle.Mean, DotFilters[I].Circle.Radius, clLime)
      else
        Bitmap.DrawCircle(DotFilters[I].Circle.Mean, DotFilters[I].Circle.Radius, clRed);
    end;
  end;

  for I := 0 to High(Tiles) do
    Bitmap.DrawRect(Tiles[I], $00FFFF);

  for I := 0 to High(FloorTiles) do
    Bitmap.DrawRect(FloorTiles[I], $FFFFFF);

  for I := 0 to High(RoofTiles) do
    Bitmap.DrawRect(RoofTiles[I], $FFFFFF);

  for I := 0 to High(PolyArray) do
    Bitmap.DrawTPA(PolyArray[I], $00FFFF);

  Bitmap.DrawATPA(ATPA);
  if ATPA <> [] then
    Bitmap.DrawTPA(ATPA[0], $000000);
end;


var
  DebugMonsterArray: PRSMonsterArray;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
var
  DebugMonster: PRSMonster;
begin
  inherited;

  for DebugMonster in DebugMonsterArray do
    DebugMonster^.Draw(Bitmap);
end;
