{$DEFINE WL_ANTIBAN_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function TAntiban.TimeRunningAtClock(TimeOfDay: String; Randomness: Double = 0.10): Int64; override;
begin
  Result := inherited(TimeOfDay.Replace('.', ':').Replace('-', ':').Replace(',', ':'), Randomness);
end;

procedure TAntiban.TakeSleep(var Task: TSleepTask); override;
var
  Countdown: TCountDown;
  I: Int32;
  ActiveTasks: PAntibanTaskArray;
begin
  ActiveTasks := Self.GetActiveTasks;
  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Pause;

  Countdown.Init(Abs(Round(SRL.GaussRand(Task.Length, Task.Length * Task.StdVar))));

  Self.DebugLn('Sleeping for ' + SRL.MsToTime(Countdown.TimeRemaining, TIME_FORMAL));

  if (@Self.OnStartSleep <> nil) then
    Self.OnStartSleep(@Task);

  if Random < Task.LogoutChance then
  begin
    Self.DebugLn('Logging out');

    Logout.ClickLogout;
  end;

  if Random < 0.50 then
    Self.LoseFocus;

  while not Countdown.IsFinished do
  begin
    Self.DebugLn('Sleep time remaining: ' + SRL.MsToTime(Countdown.TimeRemaining, TIME_FORMAL));

    {$IFNDEF SRL_DISABLE_REMOTEINPUT}
    if Length(ProgressArray) > 2 then
    begin
      ProgressArray[1] := PadR((' Sleeping      : ' + SRL.MsToTime(Countdown.TimeRemaining, Time_Short)), Round(PadLength/2), ' ') +
                             ' Runtime       : ' + SRL.MsToTime(PTimeRunning^.ElapsedTime, Time_Short);
      if RemoteInputEnabled and ProgressReportEnabled and not ScriptDebugEnabled then
        ProgressReport.Update(ProgressArray);
    end;
    {$ENDIF}

    Wait(Min(Countdown.TimeRemaining, 60000 * 5));
  end;

  Self.DebugLn('Sleep finished');

  if (@Self.OnFinishSleep <> nil) then
    Self.OnFinishSleep(@Task);

    {
  if InRange(CurrentPlayer, Low(Players), High(Players)) then
    Players[CurrentPlayer].Login;
}
  // Offset all tasks & breaks
  for I := 0 to High(Self.Breaks) do
    Self.Breaks[I].NextAtTime += GetTickCount - (Countdown.Timeout - Countdown.Length);

  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Resume;

  // Setup next time this break happens
  Task.NextAtTime := Self.TimeRunningAtClock(Task.Time, Task.StdVar);
end;

procedure TAntiban.TakeBreak(var Task: TBreakTask); override;
var
  Countdown: TCountDown;
  I: Int32;
  ActiveTasks: PAntibanTaskArray;
begin
  ActiveTasks := Self.GetActiveTasks;
  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Pause;

  Countdown.Init(Abs(Round(SRL.GaussRand(Task.Length, Task.Length * Task.StdVar))));

  Self.DebugLn('Taking a break for ' + SRL.MsToTime(Countdown.TimeRemaining, TIME_FORMAL));

  if (@Self.OnStartBreak <> nil) then
    Self.OnStartBreak(@Task);

  if Random < Task.LogoutChance then
  begin
    Self.DebugLn('Logging out');

    Logout.ClickLogout;
  end;

  if Random < 0.50 then
    Self.LoseFocus;

  I := 0;
  while not Countdown.IsFinished do
  begin
    if (Inc(I) mod 12 = 0) then
      Self.DebugLn('Break time remaining: ' + ToString(CountDown.TimeRemaining div 60000) + ' minutes');

    {$IFNDEF SRL_DISABLE_REMOTEINPUT}
    if Length(ProgressArray) > 2 then
    begin
      ProgressArray[1] := PadR((' Breaking      : ' + SRL.MsToTime(Countdown.TimeRemaining, Time_Short)), Round(PadLength/2), ' ') +
                           ' Runtime       : ' + SRL.MsToTime(PTimeRunning^.ElapsedTime, Time_Short);
      if RemoteInputEnabled and ProgressReportEnabled and not ScriptDebugEnabled then
        ProgressReport.Update(ProgressArray);
    end;
    {$ENDIF}

    if (@Self.OnBreaking <> nil) then
      Self.OnBreaking(@Task, Countdown);

    Wait(5000);
  end;

  Self.DebugLn('Break finished');

  if (@Self.OnFinishBreak <> nil) then
    Self.OnFinishBreak(@Task);

 // if InRange(CurrentPlayer, Low(Players), High(Players)) then
 //   Players[CurrentPlayer].Login;

  // Offset all tasks & breaks
  for I := 0 to High(Self.Breaks) do
    Self.Breaks[I].NextAtTime += GetTickCount - (Countdown.Timeout - Countdown.Length);

  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Resume;

  // Setup next time this break happens
  Task.NextAtTime := GetTimeRunning + Abs(SRL.GaussRand(Task.Interval, Task.Interval * Task.StdVar));
end;

function TAntiban.DoAntiban(CheckBreaks: Boolean = True; CheckSleeps: Boolean = True): Boolean; override;
var
  I: Int32;
  Task: PAntibanTask;
  ActiveTasks: array of PAntibanTask;
begin
  if not RSClient.IsLoggedIn or Self.Checking then
    Exit;

  Self.Checking := True;

  ActiveTasks := Self.GetActiveTasks;
  for I := 0 to High(ActiveTasks) do
    ActiveTasks[I]^.Countdown.Pause;

  try
    for I := 0 to High(ActiveTasks) do
    begin
      Task := ActiveTasks[I];

      if Task^.Countdown.TimeRemaining = 0 then
      begin
        if (@Self.OnStartTask <> nil) then
          Self.OnStartTask(Task);

        {$IFNDEF SRL_DISABLE_REMOTEINPUT}
        if Length(ProgressArray) > 2 then
        begin
          ProgressArray[1] := PadR((' Action        : Antiban'), Round(PadLength/2), ' ') +
                                    ' Runtime       : ' + SRL.MsToTime(PTimeRunning^.ElapsedTime, Time_Short);
          if RemoteInputEnabled and ProgressReportEnabled and not ScriptDebugEnabled then
            ProgressReport.Update(ProgressArray);
        end;
        {$ENDIF}
        Task^.Method;
        Task^.Countdown.Init(Trunc(Abs(SRL.GaussRand(Task^.Interval, Task^.Interval * Task^.StdVar))));
        Task^.Countdown.Pause;
        if (@Self.OnFinishTask <> nil) then
          Self.OnFinishTask(Task);

        Result := True;
      end;
    end;

    // Resume now
    for I := 0 to High(ActiveTasks) do
      ActiveTasks[I]^.Countdown.Resume;

    if CheckBreaks and Self.DoBreak then Result := True;
    if CheckSleeps and Self.DoSleep then Result := True;
  finally
    Self.Checking := False;
  end;
end;




// POV antibans
procedure TAntiban.RandomPOVTask;
begin
  case Random(7) of
    0:    Self.AdjustZoom;
    else Self.RandomRotate;
  end;
end;

// Mouse antibans
procedure TAntiban.SmallRandomMouse; override;
var
  B: TBox;
  P: TPoint;
  t: TCountDown;
begin
  Self.DebugLn('Random Mouse (Small)');

  B := Box(Mouse.Position, 350, 350);
  t.Init(30000);
  repeat
    P := SRL.RandomPoint(B);
    if t.IsFinished() then
    begin
      WriteLn('Box: ', B);
      WriteLn('Point: ', P);
      Self.Fatal('Timed out!');
    end;
  until P.DistanceTo(B.Middle) < 50; // Make sure we move at least 50 distance

  ASyncMouse.Move(P);
end;

procedure TAntiban.RandomRightClick; override;
begin
  Self.DebugLn('Random Right Click');

  Mouse.Move(GetClientBounds, True, MOUSE_DISTRIBUTION_RANDOM);

  if ChooseOption.Open then
  begin
    if Random < 0.50 then
      Mouse.Move(ChooseOption.Bounds);

    if not SRL.Dice(60 * BioHash) or not ChooseOption.Select('Examine') then
    begin
      Wait(100 * BioHash, 8000 * BioHash, wdLeft);
      ChooseOption.Close;
    end;
  end;
end;

procedure TAntiban.RandomMouseTask;
begin
  case Random(10) of
    0..1: Self.RandomRightClick;
    2..4: Self.RandomMouse;
    else  Self.SmallRandomMouse;
  end;
end;

// GameTabs antibans
procedure TAntiban.RandomTab; override;
begin
  Self.DebugLn('Random Tab');

  if Random < 0.80 then
  begin
    if Random < 0.50 then
    begin
      GameTabs.Open(ERSGameTab(SRL.NormalRange(Ord(ERSGameTab.COMBAT), Ord(ERSGameTab.MAGIC), 6.0)));

      Wait(300, 3000, wdLeft);
    end;

    GameTabs.Open(ERSGameTab(Random(Ord(ERSGameTab.COMBAT), Ord(ERSGameTab.MAGIC))));
  end else
  begin
    if Random < 0.50 then
    begin
      GameTabs.Open(ERSGameTab(SRL.NormalRange(Ord(ERSGameTab.CLAN), Ord(ERSGameTab.MUSIC), 6.0)));

      Wait(0, 2500, wdLeft);
    end;

    GameTabs.Open(ERSGameTab(Random(Ord(ERSGameTab.CLAN), Ord(ERSGameTab.MUSIC))));
  end;
end;

procedure TAntiban.ToggleTab;
var
  CurrentTab: ERSGameTab := GameTabs.GetCurrentTab;
begin
  Self.DebugLn('Toggling game tabs');
  Self.RandomTab;
  Wait(100 * BioHash, 7000 * BioHash, wdLeft);
  GameTabs.Open(CurrentTab);
end;

procedure TAntiban.CheckCharges;
const
  ITEM_LIST: TRSItemArray = [
    'Infernal axe', 'Crystal axe', 'Infernal harpoon', 'Crystal harpoon',
    'Infernal pickaxe', 'Crystal pickaxe', 'Bryophyta''s staff',
    'Ring of endurance', 'Ring of suffering (ri)', 'Ring of suffering (r)',
    'Amulet of blood fury', 'Dodgy necklace', 'Tome of fire',
    'Bonecrusher necklace', 'Amulet of chemistry',
    'Celestial ring', 'Celestial signet',
    'Sanguinesti staff'
  ];
var
  EquippedArray: TRSItemArray;
  Item: TRSItem;
begin
  if not Equipment.Open then
    Exit;

  for Item in ITEM_LIST do
    if Equipment.FindItem(Item) then
      EquippedArray += Item;

  if EquippedArray = [] then
    Exit;

  Item := EquippedArray[Random(0, High(EquippedArray))];

  Self.DebugLn('Checking ' + ToStr(Item) + ' charges');

  Equipment.ClickItem(Item, 'Check');
end;

procedure TAntiban.CheckSlayerHelm;
const
  ITEM_LIST: TRSItemArray = [
    'Slayer helmet', 'Slayer helmet (i)',
    'Black slayer helmet', 'Black slayer helmet (i)',
    'Green slayer helmet', 'Green slayer helmet (i)',
    'Red slayer helmet', 'Red slayer helmet (i)',
    'Purple slayer helmet', 'Purple slayer helmet (i)',
    'Turquoise slayer helmet', 'Turquoise slayer helmet (i)',
    'Hydra slayer helmet', 'Hydra slayer helmet (i)',
    'Twisted slayer helmet', 'Twisted slayer helmet (i)'
  ];
var
  i: Int32;
begin
  if not Equipment.Open then
    Exit;

  for i := 0 to High(ITEM_LIST) do
  begin
    if Equipment.FindItem(ITEM_LIST[i]) then
      Break;
    if i = High(ITEM_LIST) then
      Exit;
  end;

  Self.DebugLn('Checking slayer task progress in' + ToStr(ITEM_LIST[i]) + '.');

  Equipment.ClickItem(ITEM_LIST[i], 'Check');
end;

procedure TAntiban.CheckSlayerBracelet; //TODO: Add equipping if it expired in the equipment
var
  Item: TRSItem;
  InInventory: Boolean;
begin
  Item := 'null';

  if Inventory.Open then
  begin
    if Inventory.FindItem('Bracelet of slaughter') then
      Item := 'Bracelet of slaughter'
    else if Inventory.FindItem('Expeditious bracelet') then
      Item := 'Expeditious bracelet';

    InInventory := True;
  end;

  if (Item = 'null') and Equipment.Open then
  begin
    if Equipment.FindItem('Bracelet of slaughter') then
      Item := 'Bracelet of slaughter'
    else if Equipment.FindItem('Expeditious bracelet') then
      Item := 'Expeditious bracelet';

    InInventory := False;
  end;

  if Item = 'null' then
    Exit;

  Self.DebugLn('Checking ' + ToStr(Item) + ' state.');

  if InInventory then
    Inventory.ClickItem(Item, 'Check')
  else
    Equipment.ClickItem(Item, 'Check');
end;


procedure TAntiban.OpenSkill(Skill: ERSSkill; Time: Int32; ReturnToCurrentTab: Boolean);
var
  Tab: ERSGameTab;
begin
  Self.DebugLn('Opening skill: ' + ToString(Skill));

  if ReturnToCurrentTab then
    Tab := GameTabs.GetCurrentTab;

  if Stats.MouseOver(Skill) then
  begin
    Mouse.Click(MOUSE_LEFT);
    WaitUntil(MainScreen.IsScrollOpen, 100, 3000);
    Wait(Time);

    while MainScreen.IsScrollOpen do
      MainScreen.CloseInterface;

    if ReturnToCurrentTab then
      GameTabs.Open(Tab);
  end;
end;

procedure TAntiban.OpenSkills;
begin
  if Self.Skills = [] then
  begin
    Self.DebugLn('OpenSkills: No skills declared');
    Exit;
  end;

  Self.OpenSkill(Self.Skills[Random(Length(Self.Skills))], SRL.TruncatedGauss(1000, 10000), SRL.Dice(50));
end;

procedure TAntiban.RandomGameTabTask;
begin
  case Random(10) of
    0..3: Self.RandomTab;
    4..9: Self.ToggleTab;
    10:   Self.CheckCharges;
  end;
end;





// Toggling random stuff antibans
procedure TAntiban.ToggleRun;
begin
  Self.DebugLn('Toggling run');
  if Minimap.isRunEnabled then
  begin
    Minimap.DisableRun;
    Wait(1000 * Biohash, 4000 * Biohash);
    Minimap.EnableRun;
  end
  else
  begin
    Minimap.EnableRun;
    Wait(1000 * Biohash, 4000 * Biohash);
    Minimap.DisableRun;
  end;
end;

procedure TAntiban.ToggleQPray;
begin
  Self.DebugLn('Toggling quick pray');
  if Minimap.isRunEnabled then
  begin
    Minimap.DisablePrayer;
    Wait(1000 * Biohash, 4000 * Biohash);
    Minimap.EnablePrayer;
  end
  else
  begin
    Minimap.EnablePrayer;
    Wait(1000 * Biohash, 4000 * Biohash);
    Minimap.DisablePrayer;
  end;
end;


// Chatbox antibans
procedure TAntiban.ChatScrolling;
begin
  Self.DebugLn('[RND] Random scrolling on chat');
  //Chatbox.RandomScroll;
end;

procedure TAntiban.RandomChatButton;
var
  ChatButton: ERSChatButton := ERSChatButton(Random(0, (Length(ERSChatButton) - 2)));
begin
  Self.DebugLn('[RND] Opening ' + ToStr(ChatButton) + ' chat button');

  ChatButtons.Open(ChatButton);
end;

procedure TAntiban.ToggleChatButton;
var
  CurrentButton: ERSChatButton := ChatButtons.GetActive;
begin
  Self.DebugLn('[RND] Toggling chat buttons');
  Self.RandomChatButton;
  Wait(3000 * BioHash, 5000 * BioHash);
  ChatButtons.Open(CurrentButton);
end;

procedure TAntiban.RandomChatButtonState;
var
  RandomButton: ERSChatButton := ERSChatButton(Random(2, (Length(ERSChatButton) - 2)));
  RandomState: ERSChatButtonState;
begin
  case RandomButton of
    ERSChatButton.GAME_CHAT:    RandomState := ERSChatButtonState.FILTERED;
    ERSChatButton.PUBLIC_CHAT:  RandomState := ERSChatButtonState(Random(1, Length(ERSChatButtonState)));
    ERSChatButton.PRIVATE_CHAT: RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.CHANNEL_CHAT: RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.CLAN_CHAT:    RandomState := ERSChatButtonState(Random(1, 3));
    ERSChatButton.TRADE_CHAT:   RandomState := ERSChatButtonState(Random(1, 3));
  end;

  Self.DebugLn('[RND] Changing ' + ToStr(RandomButton) + ' state to ' + ToStr(RandomState));
  ChatButtons.ChangeState(RandomButton, RandomState);
end;

procedure TAntiban.RandomChatTask;
begin
  case Random(20) of
    0..5:   Self.RandomChatButton;
    6..17:  Self.ToggleChatButton;
    18..19: Self.RandomChatButtonState;
  end;
end;


// Bank antibans
procedure TAntiban.BankScrolling;
begin
  if not Bank.IsOpen then
    Exit;

  Self.DebugLn('[RND] Random scrolling on bank');
  //Chatbox.RandomScroll;
end;

procedure TAntiban.RandomBankTab;
var
  HighTab: Int32;
  BankTab: Int32;
begin
  if not Bank.IsOpen then
    Exit;

  HighTab := Bank.CountTabs;
  BankTab := Random(0, HighTab);
  Self.DebugLn('[RND] Opening bank tab ' + ToStr(BankTab));
  Bank.OpenTab(BankTab);
end;

procedure TAntiban.ToggleBankTab;
var
  CurrentTab: Int32;
begin
  if not Bank.IsOpen then
    Exit;

  Self.DebugLn('[RND] Toggling bank tabs');
  CurrentTab := Bank.GetCurrentTab;
  Self.RandomBankTab;
  Wait(3000 * Biohash, 5000 * Biohash);
  Bank.OpenTab(CurrentTab);
end;

procedure TAntiban.RandomBankButton;
var
  RandomButton: ERSBankButton;
  BankButton: TRSButton;
begin
  if not Bank.IsOpen then
    Exit;

  RandomButton := ERSBankButton(Random(2, 10));
  BankButton := Bank.GetButton(RandomButton);
  Self.DebugLn('[RND] Clicking ' + ToStr(RandomButton) + ' bank button');
  BankButton.Enable;
end;

procedure TAntiban.RandomBankTask;
begin
  case Random(0, 12) of
    0..2: Self.RandomBankTab;
    1..8: Self.ToggleBankTab;
  end;
end;

procedure TAntiban.SetupTasks;
begin
  if Self.Tasks <> [] then
    Exit;

  if ABCamera then
    Self.AddTask(5  * ONE_MINUTE, @Self.RandomPOVTask);

  if ABMouse then
    Self.AddTask(8  * ONE_MINUTE, @Self.RandomMouseTask);

  if ABChat then
    Self.AddTask(9  * ONE_MINUTE, @Self.RandomChatTask);

  if ABMouse then
    Self.AddTask(10 * ONE_MINUTE, @Self.LoseFocus);

  if ABGameTabs then
    Self.AddTask(12 * ONE_MINUTE, @Self.RandomGameTabTask);

  if ABBank then
    Self.AddTask(13 * ONE_MINUTE, @Self.RandomBankTask);

  if ABGameTabs then
    Self.AddTask(18 * ONE_MINUTE, @Self.HoverSkills);
end;

procedure TAntiban.SetupBreaks;
begin
  if Self.Breaks <> [] then
    Exit;

  Self.AddBreak(30  * ONE_MINUTE, 2  * ONE_MINUTE, 0.33, 0.01);
  Self.AddBreak(45  * ONE_MINUTE, 5  * ONE_MINUTE, 0.33, 0.15);
  Self.AddBreak(60  * ONE_MINUTE, 10 * ONE_MINUTE, 0.33, 0.2 + BioHash);
  Self.AddBreak(120 * ONE_MINUTE, 30 * ONE_MINUTE, 0.33, 0.5 + BioHash);
end;

procedure TAntiban.SetupSleep;
begin
  if Self.Sleeps <> [] then
    Exit;

  Self.SetSleepHour;
  Self.SetSleepLength;
  Self.AddSleep(SleepHour, SleepLength, 0.1, (0.8 + BioHash));
end;

procedure TAntiban.WaitMovingTasks;
begin
  case Random(0, 500) of //only about 1% chance of antiban while walking
    0:
      begin
        if not ABChat then Exit
        else if (Random(20) <= 17) then Self.RandomChatButton
        else Self.RandomChatButtonState;
      end;

    1..5:
      begin
        if not ABCamera then Exit
        else if (Random(10) <= 3) then Self.RandomRotate;
      end;

    6..10:
      begin
        if not ABMouse then Exit
        else if (Random(10) <= 3) then Self.RandomRightClick
        else Self.SmallRandomMouse;
      end;

    10, 14:
      begin
        if not ABGameTabs then Exit
        else if (Random(10) <= 9) then Self.RandomTab
        else Self.CheckCharges;
      end;
  end;
end;

// Antiban tasks that can be performed while using walker.
procedure WalkerTasks(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  ToStr(Walker);       //This has no purpose,
  ToStr(Position);     //I just don't like to be spammed
  ToStr(Destination);  //with unused variables.
  Antiban.WaitMovingTasks;
end;


procedure TAntiban.Setup; //override me to add stuff!
begin
  Self.SetupBiometrics;

  Mouse.Speed := 10 + Self.GetBehavior(MOUSE_SPEED);
  Mouse.Gravity := 8 + Round(Self.GetBehavior(MOUSE_GRAVITY) / 2);
  Mouse.Wind := 3 + Round(Self.GetBehavior(MOUSE_WIND) / 2);
  Mouse.MissChance := 11 + Self.GetBehavior(MOUSE_MISS);
  //Self.Distribution := MOUSE_DISTRIBUTION_ROWP;

  if AntibanEnabled then
    Self.SetupTasks;

  if BreaksEnabled then
    Self.SetupBreaks;

  if SleepEnabled then
    Self.SetupSleep;

  //override me to add stuff!
end;
