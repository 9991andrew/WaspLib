(*
Stats
=====
Methods related to wasp-stats.
*)

{$DEFINE WL_STATS_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

(*
type StatsPayload
~~~~~~~~~~~~~~~~~

Type to help you handle stats submissions.
*)
type StatsPayload = record(TSRLBaseRecord) class var
    ScriptID: String;
    Username: String;
    Password: String;
    Experience: Int32;
    Gold: Int32;
    RunTime: Int64;
  end;

(*
StatsPayload.Reset
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure StatsPayload.Reset();

Resets StatsPayload. Automatically called by StatsClient.SubmitStats() on a successful stats submission.
*)
procedure StatsPayload.Reset(); static;
begin
  StatsPayload.Experience := 0;
  StatsPayload.Gold := 0;
  StatsPayload.RunTime := 0;
end;

(*
StatsPayload.SetUsername
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure StatsPayload.SetUsername(user: String = '');

Sets StatsPayload username if it hasn't been set yet.
*)
procedure StatsPayload.SetUsername(user: String = ''); static;
begin
  if user = '' then
    Exit;

  StatsPayload.Username := user;
  WriteConfigFile('stats_user', ['StatsPayload.SetUsername(''' + user + ''');']);
end;

{$IFHASFILE Data/WaspLib/configs/stats_user.simba}
  {$I Data/WaspLib/configs/stats_user.simba}
{$ENDIF}

(*
StatsPayload.Setup
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure StatsPayload.Setup(id, pw: String; user: String = '');

Sets StatsPayload up.
  - **id** should be your script id. If the script id is not in waspscripts.com database the submission will be rejected.
  - **pw** should be your account password. Passwordless accounts can exist but then anyone can submit data to them.
    A passwordless account will take in the first ever password submission it gets as it's password and will only accept future data
    if that password is included.
  - **user** sets a wasp-stats username.
*)
procedure StatsPayload.Setup(id: String; user: String = ''); static;
begin
  StatsPayload.ScriptID := id;
  StatsPayload.SetUsername(user);
end;


(*
StatsPayload.Update
~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure StatsPayload.Update(xp, gp, time: Int32);
.. pascal:: procedure StatsPayload.Update(ban: Boolean); overload;

Update StatsPayload data for the next submission.
You can update it several times before submitting it, however, keep in mind if the runtime is over 15mins the data will be rejected to
avoid exploitation.
Experience, Gold and Levels also have a limit of how much can be submitted on each request. This limit set by the scripter in waspscripts.com (not implemented yet... currently has some generous limits)

You can set the account as banned for tracking ban rates but it's not fully implemented yet.
If you set an account as banned you won't be able to submit more data to it until you set it as unbanned.
*)
procedure StatsPayload.Update(xp, gp, time: Int32); static;
begin
  StatsPayload.Experience += xp;
  StatsPayload.Gold += gp;
  StatsPayload.RunTime += time;
end;

(*
StatsPayload.FormData
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function StatsPayload.FormData(): TStringArray;

Transforms the data in StatsPayload into a TStringArray that can be used by a StatsClient.
*)
function StatsPayload.FormData(): TStringArray; static;
begin
  Result += 'scriptID='  + StatsPayload.ScriptID;

  if StatsPayload.Username <> '' then
    Result += 'username='   + StatsPayload.Username;

  if StatsPayload.Password <> '' then
    Result += 'password='   + StatsPayload.Password;

  Result += 'experience=' + ToStr(StatsPayload.Experience);
  Result += 'gold='       + ToStr(StatsPayload.Gold);
  Result += 'runtime='    + ToStr(StatsPayload.RunTime);
end;

(*
type StatsClient
~~~~~~~~~~~~~~~~~

Type responsible for stats submissions.
This is basically a simba wrapper for the waspscripts API.

You can find the API docs in https://api.waspscripts.com/docs if you need to read them
but the StatsClient should be able to do everything for you.
*)
type StatsClient = record(TSRLBaseRecord) class var
    Disabled: Boolean;
    HTTPClient: Int32;
    StatsServer: String;
    UUID: String;
    Timer: TCountDown;
    TimeStamp: UInt64;
    IsSetup: Boolean;
    Benchmark: TIntegerArray;
    Fails: Int32;
  end;

{$IFHASFILE Data/WaspLib/configs/uuid.simba}
  {$I Data/WaspLib/configs/uuid.simba}
{$ENDIF}

procedure StatsClient.DebugLn(text: String); constref; override;
var
  timeStamp: String;
begin
  timeStamp := SRL.TimeStamp();
  text := timeStamp + ':[StatsClient]: ' + text;
  WriteLn text;
end;

(*
StatsClient.Terminate
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure StatsClient.Terminate();

Internal method automatically called on script termination.
*)
procedure StatsClient.Terminate(); static;
begin
  FreeHTTPClient(StatsClient.HTTPClient);
end;

(*
StatsClient.Setup
~~~~~~~~~~~~~~~~~
.. pascal:: procedure StatsClient.Setup();

Internal method automatically called when attempting to use StatsClient.GET() and StatsClient.POST().
*)
procedure StatsClient.Setup(); static;
var
  strArr: TStringArray;
begin
  StatsClient.HTTPClient := InitializeHTTPClient(False);
  StatsClient.StatsServer := 'https://api.waspscripts.com/';

  AddOnTerminate(@StatsClient.Terminate);

  if (StatsClient.UUID = '') or (StatsPayload.Password = '') then
  begin
    StatsClient.UUID := GenerateUUIDV4();
    StatsPayload.Password := GenerateUUIDV4();
    strArr += 'StatsClient.UUID := ''' + StatsClient.UUID + ''';';
    strArr += 'StatsPayload.Password := ''' + StatsPayload.Password + ''';';
    WriteConfigFile('uuid', strArr);
  end;

  StatsClient.Timer.Setup(5 * ONE_MINUTE);
  StatsClient.IsSetup := True;
end;


(*
StatsClient.GetUUID
~~~~~~~~~~~~~~~~~~~
.. pascal:: function StatsClient.GetUUID(): String;

Returns your UUID

Example
-------

  WriteLn StatsClient.GetUUID();
*)
function StatsClient.GetUUID(): String; static;
begin
  Result := StatsClient.UUID;

  if not StatsClient.IsSetup then
    StatsClient.DebugLn('UUID: ' + Result);
end;

(*
StatsClient.SetLocal
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure StatsClient.SetLocal(port: Int32 = 8080); static;

Method only meant to be used if you are hosting a local stats server for debugging purposes.
*)
procedure StatsClient.SetLocal(port: Int32 = 8080); static;
begin
  StatsClient.StatsServer := 'http://localhost:' + ToStr(port) +'/';
end;


(*
StatsClient.GET
~~~~~~~~~~~~~~~
.. pascal:: function StatsClient.GET(route: String): String;

Makes a GET request to the WaspScripts API in the specified **route**.
You probably don't need to use this method directly.
*)
function StatsClient.GET(route: String): String; static;
begin
  Result := GetHTTPPage(StatsClient.HTTPClient, StatsClient.StatsServer + route);

  StatsClient.DebugLn(Result);
end;

(*
StatsClient.POST
~~~~~~~~~~~~~~~~
.. pascal:: function StatsClient.POST(route: String; payload: TStringArray): String;

Makes a POST request to the WaspScripts API in the specified **route**.
**payload** is an array of string with the following format:
  ['var1=value1', 'var2=value2', ...]

You probably don't need to use this method directly.
*)
function StatsClient.POST(route: String; payload: TStringArray): String; static;
var
  i: Int32;
  finalPayload: String;
  responseTime: UInt64;
begin
  if StatsClient.Disabled then
    Exit;

  if StatsPayload.ScriptID = '' then
  begin
    StatsClient.DebugLn('SCRIPT_ID is empty. StatsClient will be disabled.');
    StatsClient.Disabled := True;
    Exit;
  end;

  for i := 0 to High(payload) do
  begin
    finalPayload += payload[i];

    if i < High(payload) then
      finalPayload += '&';
  end;

  responseTime := GetTickCount();
  Result := PostHTTPPage(StatsClient.HTTPClient, StatsClient.StatsServer + route, finalPayload);
  responseTime := GetTickCount() - responseTime;

  StatsClient.DebugLn(Result + ' Response took: ' + ToStr(responseTime) + 'ms.');

  if Length(StatsClient.Benchmark) > 5 then
    StatsClient.Benchmark.Del(0, 1);

  StatsClient.Benchmark += responseTime;

  if (Length(StatsClient.Benchmark) > 5) and (StatsClient.Benchmark.Mean() > 3000) then
  begin
    StatsClient.DebugLn('Connection to ' + StatsClient.StatsServer + ' is slower than it should. StatsClient will be disabled.');
    StatsClient.Disabled := True;
  end;
end;


(*
StatsClient.HashPassword
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function StatsClient.HashPassword(password: String): String;

Returns a salted and hashed password.
This serves no purpose other than giving you a glimpse of what is stored in waspscripts database when you submit your password.

Try the example below, notice how everytime you run it you will have slightly different results.
That's the magic of "salting" passwords. You can read more about it on the wikipedia https://en.wikipedia.org/wiki/Salt_(cryptography).

Example
-------

  WriteLn StatsClient.HashPassword('helloworld');
  WriteLn StatsClient.HashPassword(StatsPayload.Password);
*)
function StatsClient.HashPassword(password: String): String; static;
var
  route: String;
  payload: TStringArray;
begin
  route := 'stats/auth/hash/';
  payload += 'password=' + password;

  Result := StatsClient.POST(route, payload);
end;

(*
StatsClient.CheckPassword
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function StatsClient.CheckPassword(uuid: String; password: String): Boolean;

Simply returns true/false if the **password** you submit matches what is stored in waspscripts stats database for the specified **uuid**.

Example
-------

  WriteLn StatsClient.CheckPassword('0.999999999999999', 'helloworld');
  WriteLn StatsClient.CheckPassword(StatsClient.Generateuuid(), StatsClient.GeneratePassword());
*)
function StatsClient.CheckPassword(uuid: String; password: String): Boolean; static;
var
  route, msg: String;
  payload: TStringArray;
begin
  route := 'stats/auth/check/' + uuid + '/';
  payload += 'password=' + password;

  msg := StatsClient.POST(route, payload);

  Result := msg.Pos('message') = 0;
end;

(*
StatsClient.UpdatePassword
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function StatsClient.UpdatePassword(uuid: String; password, newPassword: String): Boolean;

Because users passwords can be changed and that's what are used by default for
stats password a way to update the stats password is required.
That's what this method is for.

This will probably be complicated for regular users but an easier way can be
figured out in the future.

Example
-------

  WriteLn StatsClient.UpdatePassword('0.999999999999999', 'helloworld', 'helloworld2');
  WriteLn StatsClient.UpdatePassword(StatsClient.Generateuuid(), StatsClient.GeneratePassword('oldpassword'), StatsClient.GeneratePassword());
*)
function StatsClient.UpdatePassword(uuid: String; password, newPassword: String): Boolean; static;
var
  route, msg: String;
  payload: TStringArray;
begin
  route := 'stats/auth/update/' + uuid + '/';

  payload += 'password=' + password;
  payload += 'new_password=' + newPassword;

  msg := StatsClient.POST(route, payload);

  Result := msg.Pos('message') = 0; //again, maybe a bad way to do this
end;


(*
StatsClient.CheckStats
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function StatsClient.CheckStats(uuid: string): String;

Returns the stats of the specified **uuid**.

Example
-------

  WriteLn StatsClient.CheckStats('0.999999999999999');
  WriteLn StatsClient.CheckStats(StatsClient.Generateuuid());
*)
function StatsClient.CheckStats(uuid: String): String; static;
var
  route: String;
begin
  route := 'stats/' + uuid + '/';

  Result := StatsClient.GET(route);
end;

(*
StatsClient.SubmitStats
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function StatsClient.SubmitStats(uuid: String): Boolean;

Method to submit stats to wasp-stats with the help of **StatsPayload**.

Example
-------

  StatsPayload.Setup('SCRIPT_ID_HERE', StatsClient.GeneratePassword());
  StatsPayload.Update(100, 100, 5000);
  WriteLn StatsClient.SubmitStats(StatsClient.Generateuuid());
*)
function StatsClient.SubmitStats(uuid: String): Boolean; static;
var
  route, msg: String;
  currentTime: UInt64;
begin
  if StatsClient.IsSetup and not StatsClient.Timer.IsFinished() then //No point removing this, the server will reject you.
    Exit;

  route := 'stats/' + uuid + '/';

  currentTime := GetTickCount();
  StatsPayload.Update(0, 0, currentTime - StatsClient.TimeStamp);
  StatsClient.TimeStamp := currentTime;

  msg := StatsClient.POST(route, StatsPayload.FormData());

  Result := msg.Pos('success') > 0;

  if Result then
  begin
    StatsPayload.Reset();
    StatsClient.Timer.Restart();
    StatsClient.Fails := 0;
  end
  else
    StatsClient.Fails += 1;

  if StatsClient.Fails > 3 then
    StatsClient.Disabled := True;
end;

begin
  StatsClient.Setup();
end;
