{$DEFINE WL_BANK_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TWaspBankItem = record(TRSBankWithdrawItem)
    BankTab: Int32;
    ScrollLevel: UInt32;
  end;

function TRSBank.FindItem(Item: TRSItem; out Bounds: TBox): Boolean; override;
var
  tempItem: TRSItem;
begin
  if not Self.IsOpen() then
    Exit;

  for tempItem in Item.GetArray() do
  begin
    Result := inherited(tempItem, Bounds);
    if Result then
      Exit;
  end;
end;

function TRSBank.FindItem(Item: TRSItem; out Box: TBox): Boolean; override;
begin
  Result := Self.ItemFinder.Find([Item], Box);
end;

function TRSBank.ContainsItem(Item: TRSBankWithdrawItem): Boolean; overload;
begin
  Result := Self.ContainsItem(Item.Item);
end;

function TRSBank.FindItem(tab: Int32; item: TRSItem; out bounds: TBox): Boolean; overload;
begin
    Result := Self.OpenTab(tab) and Self.FindItem(item, Bounds);
end;

function TRSBank.FindItems(Items: TRSItemArray; out Bounds: TBox): Boolean; overload
var
  Item: TRSItem;
begin
  for Item in Items do
    if Self.FindItem(Item, Bounds) then
      Exit(True);
end;

function TRSBank.ContainsItem(tab: Int32; item: TRSItem): Boolean; overload;
begin
  Result := Self.OpenTab(tab) and Self.ContainsItem(item);
end;

function TRSBank.ContainsItem(tab: Int32; item: TRSBankWithdrawItem): Boolean; overload;
begin
  Result := Self.OpenTab(tab) and Self.ContainsItem(item);
end;



function TRSBank.CountSlotStack(Slot: Int32): Int32;
begin
  Result := -1;
  Result := SRL.GetItemAmount(Self.GetSlotBoxes[Slot]);
end;

function TRSBank.WithdrawHelper(B: TBox; Amount: Int32; Noted: Boolean; UseQuantityButtons: Boolean): Boolean; override;
begin
  case Noted of
    True:  if (not Self.ElementFinder.Toggle(Self.ELEMENT_NOTE, RSColors.BUTTON_RED, 5)) then Exit;
    False: if (not Self.ElementFinder.Toggle(Self.ELEMENT_ITEM, RSColors.BUTTON_RED, 5)) then Exit;
  end;

  if UseQuantityButtons then
  begin
    if Self.IsCustomQuantity(Amount) then
    begin
      if not Self.ElementFinder.Toggle(Self.ELEMENT_QUANTITY_X, RSColors.BUTTON_RED, 5) then
        Exit;

      Mouse.Move(B);

      if Result := MainScreen.IsUpText('Withdraw-' + ToString(Amount)) then
        Mouse.Click(MOUSE_LEFT)
      else
        Result := (ChooseOption.Select('Withdraw-' + ToString(Amount), MOUSE_LEFT, True, False)) or
                  (ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000)));

      if (WL.Cache.WithdrawX = Amount) or MainScreen.IsUpText('Withdraw-' + ToString(Amount)) then
      begin
        Mouse.Click(MOUSE_LEFT);
        Result := True;
      end else
      begin
        Result := (ChooseOption.Select('Withdraw-' + ToString(Amount), MOUSE_LEFT, True, False)) or
                  (ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000)));
        if Result then
          WL.Cache.WithdrawX := Amount;
      end;
    end else
    begin
      case Amount of
        1:  Result := Self.ElementFinder.Toggle(Self.ELEMENT_QUANTITY_1, RSColors.BUTTON_RED, 5);
        5:  Result := Self.ElementFinder.Toggle(Self.ELEMENT_QUANTITY_5, RSColors.BUTTON_RED, 5);
        10: Result := Self.ElementFinder.Toggle(Self.ELEMENT_QUANTITY_10, RSColors.BUTTON_RED, 5);
        else
            Result := Self.ElementFinder.Toggle(Self.ELEMENT_QUANTITY_ALL, RSColors.BUTTON_RED, 5);
      end;

      if Result then
        Mouse.Click(B, MOUSE_LEFT);
    end;
  end else
  begin
    Mouse.Move(B);

    case Amount of
      BANK_WITHDRAW_ALL:
        Result := ChooseOption.Select('Withdraw-All');
      BANK_WITHDRAW_ALL_BUT_ONE:
        Result := ChooseOption.Select('Withdraw-All-but-1');
      else
        Result := (ChooseOption.Select('Withdraw-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False)) or
                  (ChooseOption.Select('Withdraw-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500)));
    end;
  end;
end;


function TRSBank.WithdrawSlot(Tab: Int32; Item: TRSBankWithdrawSlot; UseQuantityButtons: Boolean): Boolean; overload;
var
  ItemCount: Int32;
begin
  if not Self.IsOpen or (Tab = -1) then
    Exit;

  Self.OpenTab(Tab);

  ItemCount := Self.CountSlotStack(Item.Slot);
  if Self.WithdrawSlot(Item, UseQuantityButtons) then
    Result := WaitUntil(Self.CountSlotStack(Item.Slot) < ItemCount, 100, 2000);
end;


function TRSBank.WithdrawItem(out Tab: Int32; Item: TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean; overload;
var
  B: TBox;
  ItemCount: Int32;
begin
  if not Self.IsOpen then
    Exit;

  if Inventory.IsFull and not Inventory.ItemIsStackable(Item.Item) then
    Exit;

  if not Self.FindItem(Item.Item, B) then
  begin
    if Tab = -1 then
      Tab := Self.FindItemTab(Item.Item)
    else
      Self.OpenTab(Tab);

    if not Self.FindItem(Item.Item, B) then
      Exit(False);
  end;

  ItemCount := SRL.GetItemAmount(B);
  if Self.WithdrawHelper(B, Item.Quantity, Item.Noted, UseQuantityButtons) then
    Result := WaitUntil(SRL.GetItemAmount(B) < ItemCount, 100, 2000);
end;

function TRSBank.WithdrawItems(Tab: Int32; Items: array of TRSBankWithdrawItem; UseQuantityButtons: Boolean): Boolean;
var
  Item: TRSBankWithdrawItem;
begin
  for Item in Items do
    if not Self.WithdrawItem(Tab, Item, UseQuantityButtons) then
      Exit(False);

  Result := True;
end;



function TRSBank.DepositItem(Tab: Int32; Item: TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean; overload;
var
  IsStackable: Boolean;
  ItemCount: Int32;
begin
  if not Self.IsOpen then
    Exit;

  if IsStackable := Inventory.ItemIsStackable(Item.Item) then
    ItemCount := Inventory.CountItemStack(Item.Item)
  else
    ItemCount := Inventory.CountItem(Item.Item);

  if Tab > -1 then
    Self.OpenTab(Tab);

  if Self.DepositItem(Item, UseQuantityButtons) then
  begin
    if IsStackable then
      Result := WaitUntil((Inventory.CountItemStack(Item.Item) <> ItemCount), 50, 2000)
    else
      Result := WaitUntil((Inventory.CountItem(Item.Item) <> ItemCount), 50, 2000);
  end;
end;

function TRSBank.DepositItem(Tab: Int32; Item: TRSItem; UseQuantityButtons: Boolean): Boolean; overload;
begin
  Result := Self.DepositItem(Tab, [Item, BANK_DEPOSIT_ALL], UseQuantityButtons);
end;

function TRSBank.DepositItemArray(Tab: Int32; ItemArray: array of TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean;
var
  Item: TRSBankDepositItem;
  ItemList: array of TRSBankDepositItem;
begin
  for Item in ItemArray do
    if Inventory.ContainsItem(Item.Item) then
      ItemList += Item;

  for Item in Itemlist do
    if not Self.DepositItem(Tab, Item, UseQuantityButtons) then
      Exit(False);

  Result := True;
end;

function TRSBank.DepositItemArray(Tab: Int32; ItemArray: TRSItemArray; UseQuantityButtons: Boolean): Boolean; overload;
var
  Item: TRSItem;
  ItemList: TRSItemArray;
begin
  for Item in ItemArray do
    if Inventory.ContainsItem(Item) then
      ItemList += Item;

  for Item in ItemList do
    Self.DepositItem(Tab, Item, UseQuantityButtons);

  Result := not Inventory.ContainsAnyItem(ItemList);
end;

function TRSBank.DepositAllBut(tab: Int32; items: TRSItemArray): Boolean;
var
  item: TRSItem;
  slots: TIntegerArray;
  depositSlots: TIntegerArray;
begin
  if not Self.IsOpen() then
    Exit;

  if tab > -1 then
    Self.OpenTab(tab);

  for item in items do
    slots += Inventory.FindItem(item);

  depositSlots := slots.SymmetricDifference(Inventory.GetUsedSlots());

  if depositSlots <> [] then
  repeat
    if not Self.IsOpen then //Exit in case the bank somehow closed.
      Exit;

    if Self.DepositSlot([depositSlots[0], BANK_DEPOSIT_ALL], True) then
      WaitUntil(not Inventory.IsSlotUsed(depositSlots[0]), 100, 2000);

    depositSlots := slots.SymmetricDifference(Inventory.GetUsedSlots);
  until Result := (depositSlots = []);
end;

function TRSBank.Close(PressEscape: Boolean = False): Boolean; override;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := MainScreen.CloseInterface(PressEscape);
end;

function TRSBank.Close(Chance: Double): Boolean; overload;
var
  PressEscape: Boolean;
begin
  if Chance = Login.Players[Login.PlayerIndex].BioHash then
    PressEscape := Antiban.BioDice()
  else
    PressEscape := SRL.Dice(Chance);

  Result := MainScreen.CloseInterface(PressEscape);
end;
