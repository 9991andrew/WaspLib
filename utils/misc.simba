{$DEFINE WL_MISC_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
  TRSItemInfo = record
    WikiRealTimeInfo: String;
    WikiMappingInfo: String;
    LastCheckTick: UInt64;

    RSItem: TRSItem;
    ItemID: String;

    HighPrice: Int32;
    LowPrice: Int32;

    StoreValue: Int32;
    LowAlchemy: Int32;
    HighAlchemy: Int32;
    GELimit: Int32;
  end;

procedure TRSItemInfo.Setup;
begin
  WikiRealTimeInfo := GetPage('https://prices.runescape.wiki/api/v1/osrs/latest');
  WikiMappingInfo  := GetPage('https://prices.runescape.wiki/api/v1/osrs/mapping');
  LastCheckTick    := GetTickCount;
end;


function TRSItemInfo.GetRealTime: String;
begin
  Result := WikiRealTimeInfo.After('"' + ItemID + '":').Before('},');
end;

function TRSItemInfo.GetMapping: String;
begin
  Result := WikiMappingInfo.After('"id":' + ItemID + ',').Before('},');
end;

procedure TRSItemInfo.SetItemID;
var
  Str: String;
begin
  Str := VarToStr(RSItem);

  if VarToStr(Str).IsDigit then
    ItemID := Str
  else
  begin
    ItemID := ItemFinder.ItemNames.GetValues(Str);
    if (ItemID = '') then
      ItemFinder.Fatal('Unknown item: ' + Str);
  end;
end;


procedure TRSItemInfo.SetInfo(Item: TRSItem);
var
  MainStr,Str: String;
begin
  if VarToStr(Item) = VarToStr(RSItem) then
    Exit;

  RSItem := Item;
  Self.SetItemID;

  if (LastCheckTick + 1200000) < GetTickCount then
    Self.Setup;

  MainStr := Self.GetRealTime;
  Str := MainStr.After('"high":').Before(',');
  if Str <> '' then
    HighPrice := StrToInt(Str);

  Str := MainStr.After('"low":').Before(',');
  if Str <> '' then
    LowPrice := StrToInt(Str);


  MainStr := Self.GetMapping;
  Str := MainStr.After('"limit":').Before(',');
  if Str <> '' then
    GELimit := StrToInt(Str);

  Str := MainStr.After('"value":').Before(',');
  if Str <> '' then
    StoreValue := StrToInt(Str);

  LowAlchemy := Round(StoreValue * 0.4);
  HighAlchemy := Round(StoreValue * 0.6);
end;

function TRSItemInfo.GetHighPrice(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := HighPrice;
end;

function TRSItemInfo.GetLowPrice(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := LowPrice;
end;


function TRSItemInfo.GetStoreValue(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := StoreValue;
end;

function TRSItemInfo.GetHighAlchemy(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := HighAlchemy;
end;

function TRSItemInfo.GetLowAlchemy(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := LowAlchemy;
end;

function TRSItemInfo.GetGELimit(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := GELimit;
end;

function TRSItemInfo.GetAveragePrice(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  if ((HighPrice = 0) and (LowPrice = 0)) then
    Exit
  else if HighPrice = 0 then
    Result := LowPrice
  else if LowPrice = 0 then
    Result := HighPrice
  else
    Result := Round((HighPrice + LowPrice) / 2);
end;


function TRSItemInfo.GetHighAlchemyProfit(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := HighAlchemy - Self.GetAveragePrice(Item) - Self.GetAveragePrice('561');
end;

function TRSItemInfo.GetLowAlchemyProfit(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := HighAlchemy - Self.GetAveragePrice(Item) - Self.GetAveragePrice('561');
end;



function NumberPerHour(Number: UInt64): Int32;
begin
  Result := Round((Number / GetTimeRunning) * ONE_HOUR);
end;

function NumberPerHour(Number: Extended): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number));
end;

function NumberPerHour(Number, TimeRunning: UInt64): Int32; overload;
begin
  Result := Round((Number / TimeRunning) * ONE_HOUR);
end;

function NumberPerHour(Number: Extended; TimeRunning: UInt64): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number), TimeRunning);
end;



//This probably doesn't belong in TRSWalker lol....
function PopulateTile(Tile: TPoint; Populate: record N, S, W, E: Int32; end): TPointArray;
var
  Idx1, Idx2: Int32;
begin
  for Idx1 := 0 to Populate.N do
  begin
    for Idx2 := 0 to Populate.W do
      Result += Tile + [-4 * Idx2, -4 * Idx1];

    for Idx2 := 0 to Populate.E do
      Result += Tile + [4 * Idx2, -4 * Idx1];
  end;

  for Idx1 := 0 to Populate.S do
  begin
    for Idx2 := 0 to Populate.W do
      Result += Tile + [-4 * Idx2, 4 * Idx1];

    for Idx2 := 0 to Populate.E do
      Result += Tile + [4 * Idx2, 4 * Idx1];
  end;

  Result.ClearDuplicates;
end;

function PopulateTileArray(TileArray: TPointArray; Populate: record N, S, W, E: Int32; end): TPointArray;
var
  Tile: TPoint;
  ATPA: T2DPointArray;
begin
  for Tile in TileArray do
    ATPA += PopulateTile(Tile, Populate);

  Result := ATPA.Merge;
  Result.ClearDuplicates;
end;


//Gives you a square with Distance number of tiles from the specified Tile
function PopulateTile(Tile: TPoint; Distance: Int32): TPointArray; overload;
begin
  Result := PopulateTile(Tile, [Distance, Distance, Distance, Distance]);
end;

//Same as above for multiple tiles.
function PopulateTileArray(TileArray: TPointArray; Distance: Int32): TPointArray; overload;
begin
  Result := PopulateTileArray(TileArray, [Distance, Distance, Distance, Distance]);
end;





procedure TWaspLib.UpdateClientState;
begin
  RSClient.DetectClientMode(True);
  RSClient.ClientModeChanged;
  if Options.IsOpen and (Options.GetCurrentTab = ERSOptionsTab.CONTROLS) then
    MM2MS.ZoomLevel := Options.GetZoomLevel;
end;

var
  ItemInfo: TRSItemInfo;

type
  TRSMonsterInfo = record
    OSRSBoxInfo: String;
    Size: Int32;
    Hitpoints: Int32;
    MaxHit: Int32;
    AttackTypes: TStringArray;
    DropStrings: TStringArray;
    DropIDs: TStringArray;
    NotedDrops: TStringArray;
  end;

procedure TRSMonsterInfo.Setup(Name: String);
var
  Str: String;
  UneditedValues: TStringArray;
begin
  Name[1] := UpperCase(Name[1])[1];

  Name := Name.Replace(' ', '%20');
  OSRSBoxInfo := GetPage('https://api.osrsbox.com/monsters?where={%20%22name%22:%20%22' + Name +'%22,%20%22duplicate%22:%20false%20}');

  Size := StrToInt(OSRSBoxInfo.After('"size": ').Before(', "hitpoints"'));

  Hitpoints := StrToInt(OSRSBoxInfo.After('"hitpoints": ').Before(', "max_hit"'));
  Str := OSRSBoxInfo.After('"max_hit": ').Before(', "attack_type"');
  if Str.Contains('null') then
    MaxHit := -1
  else
    MaxHit := StrToInt(Str);

  Str := OSRSBoxInfo.After('"attack_type": [').Before('], "attack_speed"');
  UneditedValues := Str.Explode(', ');
  for Str in UneditedValues do
    AttackTypes += Str.Replace('"', '');


  Str := OSRSBoxInfo.After('"drops": [').Before('], "_created"');

  UneditedValues := Str.Explode('},');

  for Str in UneditedValues do
  begin
    DropIDs += Str.After('"id": ').Before(', "name"');

    if Str.Contains('"noted": true') then
    begin
      NotedDrops += Str.After('"id": ').Before(', "name"');
      DropStrings += 'noted ' + Str.After('"name": "').Before('", "members"');
    end
    else
      DropStrings += Str.After('"name": "').Before('", "members"');
  end;
end;
