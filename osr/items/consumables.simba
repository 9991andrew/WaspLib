{$DEFINE WL_CONSUMABLES_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSConsumable = (
    HEALTH_CONSUMABLE,
    PRAYER_CONSUMABLE,
    ENERGY_CONSUMABLE,
    POISON_CONSUMABLE,
    VENOM_CONSUMABLE,
    ANTI_FIRE_CONSUMABLE,
    BOOST_CONSUMABLE
  );

  //TRSConsumable is all types of consumable items (food, potions, etc).
  TRSConsumable = record
    Item: TRSItem;
    Parent: TRSItem;
    LeftOver: TRSItem;
    Points: UInt32;
    Timer: UInt32;
    Cost: Int32;
    IsSetup: Boolean;
  end;

  TRSConsumableArray = array of TRSConsumable;

  //TRSFood is any type of TRSConsumable that increases health.
  TRSFood = type TRSConsumable;
  TRSFoodArray = array of TRSFood;

  //TRSPrayerPotion is any type of TRSConsumable that increases prayer.
  TRSPrayerPotion = type TRSConsumable;
  TRSPrayerPotionArray = array of TRSPrayerPotion;

  //TRSEnergyPotion is any type of TRSConsumable that increases run energy.
  TRSEnergyPotion = type TRSConsumable;
  TRSEnergyPotionArray = array of TRSEnergyPotion;

  //TRSBoost is any type of TRSConsumable that boosts a skill.
  TRSBoost = record(TRSConsumable)
    Skills: array of ERSSkill;
    LevelsBoost: TIntegerArray;
    Countdown: TCountdown;
  end;
  TRSBoosArray = array of TRSBoost;


const
  FOOD_ARRAY: TRSItemArray = [
    'Shrimps', 'Cooked chicken', 'Cooked meat', 'Sardine', 'Edible seaweed', 'Bread', 'Herring',
    'Mackerel', 'Choc-ice', 'Trout', 'Cod', 'Pike', 'Roast beast meat',
    'Pineapple punch', 'Salmon', 'Tuna', 'Jug of wine', 'Rainbow fish',
    'Stew', 'Banana stew',
    'Cake', '2/3 cake', 'Slice of cake',
    'Meat pie', 'Half a meat pie',
    'Bass',
    'Plain pizza', '1/2 plain pizza',
    'Lobster', 'Swordfish', 'Potato with butter',
    'Apple pie', 'Half an apple pie',
    'Chocolate cake', '2/3 chocolate cake', 'Chocolate slice',
    'Tangled toad''s legs', 'Chocolate bomb', 'Potato with cheese',
    'Meat pizza', '1/2 meat pizza',
    'Admiral pie', 'Half an admiral pie',
    'Monkfish',
    'Anchovy pizza', '1/2 anchovy pizza',
    'Cooked karambwan', 'Curry', 'Ugthanki kebab',
    'Guthix rest(4)', 'Guthix rest(3)', 'Guthix rest(2)', 'Guthix rest(1)',
    'Dragonfruit pie', 'Half a dragonfruit pie',
    'Mushroom potato', 'Shark', 'Sea turtle',
    'Pineapple pizza', '1/2 pineapple pizza',
    'Summer pie', 'Half a summer pie',
    'Wild pie', 'Half a wild pie',
    'Manta ray', 'Tuna potato', 'Dark crab', 'Anglerfish',
    'Saradomin brew(4)', 'Saradomin brew(3)',
    'Saradomin brew(2)', 'Saradomin brew(1)'
  ];

  PRAYER_ARRAY: TRSItemArray = [
    'Zamorak brew(4)', 'Zamorak brew(3)',
    'Zamorak brew(2)', 'Zamorak brew(1)',
    'Sanfew serum(4)', 'Sanfew serum(3)',
    'Sanfew serum(2)', 'Sanfew serum(1)',
    'Super restore(4)', 'Super restore(3)',
    'Super restore(2)', 'Super restore(1)',
    'Prayer potion(4)', 'Prayer potion(3)',
    'Prayer potion(2)', 'Prayer potion(1)',
    'Jangerberries'
  ];

  ENERGY_ARRAY: TRSItemArray = [
    'White tree fruit',
    'Winter sq''irkjuice', 'Spring sq''irkjuice',
    'Autumn sq''irkjuice', 'Summer sq''irkjuice',
    'Bandages',
    'Guthix rest(4)', 'Guthix rest(3)',
    'Guthix rest(2)', 'Guthix rest(1)',
    'Papaya fruit',
    'Energy potion(4)', 'Energy potion(3)',
    'Energy potion(2)', 'Energy potion(1)',
    'Purple sweets',
    'Summer pie', 'Half a summer pie',
    'Super energy(4)', 'Super energy(3)',
    'Super energy(2)', 'Super energy(1)',
    'Stamina potion(4)', 'Stamina potion(3)',
    'Stamina potion(2)', 'Stamina potion(1)',
    'Strange fruit', 'Mint cake', 'Gout tuber'
  ];

  ANTI_POISON_ARRAY: TRSItemArray = [
    'Sanfew serum(4)', 'Sanfew serum(3)',
    'Sanfew serum(2)', 'Sanfew serum(1)',
    'Anti-venom+(4)', 'Anti-venom+(3)',
    'Anti-venom+(2)', 'Anti-venom+(1)',
    'Anti-venom(4)', 'Anti-venom(3)',
    'Anti-venom(2)', 'Anti-venom(1)',
    'Antidote++(4)', 'Antidote++(3)',
    'Antidote++(2)', 'Antidote++(1)',
    'Antidote+(4)', 'Antidote+(3)',
    'Antidote+(2)', 'Antidote+(1)',
    'Superantipoison(4)', 'Superantipoison(3)',
    'Superantipoison(2)', 'Superantipoison(1)',
    'Antipoison(4)', 'Antipoison(3)',
    'Antipoison(2)', 'Antipoison(1)'
  ];

  ANTI_VENOM_ARRAY: TRSItemArray = [
    'Anti-venom+(4)', 'Anti-venom+(3)',
    'Anti-venom+(2)', 'Anti-venom+(1)',
    'Anti-venom(4)', 'Anti-venom(3)',
    'Anti-venom(2)', 'Anti-venom(1)'
  ];

  ANTI_FIRE_ARRAY: TRSItemArray = [
    'Antifire potion(4)', 'Antifire potion(3)',
    'Antifire potion(2)', 'Antifire potion(1)',
    'Super antifire potion(4)', 'Super antifire potion(3)',
    'Super antifire potion(2)', 'Super antifire potion(1)',
    'Extended antifire(4)', 'Extended antifire(3)',
    'Extended antifire(2)', 'Extended antifire(1)',
    'Extended super antifire(4)', 'Extended super antifire(3)',
    'Extended super antifire(2)', 'Extended super antifire(1)'
  ];

  BOOST_ARRAY: TRSItemArray = [
    'Super combat potion(4)', 'Super combat potion(3)',
    'Super combat potion(2)', 'Super combat potion(1)',
    'Super attack(4)', 'Super attack(3)',
    'Super attack(2)', 'Super attack(1)',
    'Super strength(4)', 'Super strength(3)',
    'Super strength(2)', 'Super strength(1)',
    'Bastion potion(4)', 'Bastion potion(3)',
    'Bastion potion(2)', 'Bastion potion(1)',
    'Ranging potion(4)', 'Ranging potion(3)',
    'Ranging potion(2)', 'Ranging potion(1)'
  ];

  TRASH_ARRAY: TRSItemArray = [
    'Cocktail glass',
    'Jug',
    'Bowl',
    'Pie dish',
    'Vial',
    'Beer glass',
    'Empty cup'
  ];

function GetConsumableArray(ConsumableType: ERSConsumable): TRSItemArray;
begin
  case ConsumableType of
    ERSConsumable.HEALTH_CONSUMABLE:    Result := FOOD_ARRAY;
    ERSConsumable.PRAYER_CONSUMABLE:    Result := PRAYER_ARRAY;
    ERSConsumable.ENERGY_CONSUMABLE:    Result := ENERGY_ARRAY;
    ERSConsumable.POISON_CONSUMABLE:    Result := ANTI_POISON_ARRAY;
    ERSConsumable.VENOM_CONSUMABLE:     Result := ANTI_VENOM_ARRAY;
    ERSConsumable.ANTI_FIRE_CONSUMABLE: Result := ANTI_FIRE_ARRAY;
    ERSConsumable.BOOST_CONSUMABLE:     Result := BOOST_ARRAY;
  end;
end;


procedure TRSConsumable.SetupFood;
var
  HPLevel: Int32;
begin
  if Self.IsSetup then
    Exit;

  Self.Parent := 'Null';
  Self.LeftOver := 'Null';

  case Self.Item of
    'Shrimps', 'Cooked chicken', 'Cooked meat':
      Self.Points := 3;
    'Sardine':
      Self.Points := 4;
    'Bread', 'Herring':
      Self.Points := 5;
    'Mackerel', 'Choc-ice':
      Self.Points := 6;
    'Trout', 'Cod':
      Self.Points := 7;
    'Pike', 'Roast beast meat':
      Self.Points := 8;
    'Pineapple punch':
      begin
        Self.Points := 9;
        Self.LeftOver := 'Cocktail glass';
      end;
    'Salmon':
      Self.Points := 9;
    'Tuna':
      Self.Points := 10;
    'Jug of wine':
      begin
        Self.Points := 11;
        Self.LeftOver := 'Jug';
      end;
    'Rainbow fish':
      Self.Points := 11;
    'Stew', 'Banana stew':
      begin
        Self.Points := 11;
        Self.LeftOver := 'Bowl';
      end;
    'Cake':
      begin
        Self.Points := 12;
        Self.LeftOver := '2/3 cake';
      end;
    '2/3 cake':
      begin
        Self.Points := 8;
        Self.Parent := 'Cake';
        Self.LeftOver := 'Slice of cake';
      end;
    'Slice of cake':
      begin
        Self.Points := 4;
        Self.Parent := 'Cake';
      end;
    'Meat pie':
      begin
        Self.Points := 12;
        Self.LeftOver := 'Half a meat pie';
      end;
    'Half a meat pie':
      begin
        Self.Points := 6;
        Self.Parent := 'Meat pie';
        Self.LeftOver := 'Pie dish';
      end;
    'Lobster':
      Self.Points := 12;
    'Bass':
      Self.Points := 13;
    'Plain pizza':
      begin
        Self.Points := 14;
        Self.LeftOver := '1/2 plain pizza';
      end;
    '1/2 plain pizza':
      begin
        Self.Points := 7;
        Self.Parent := 'Plain pizza';
      end;
    'Swordfish', 'Potato with butter':
      Self.Points := 14;
    'Apple pie':
      begin
        Self.Points := 14;
        Self.LeftOver := 'Half an apple pie';
      end;
    'Half an apple pie':
      begin
        Self.Points := 7;
        Self.Parent := 'Apple pie';
        Self.LeftOver := 'Pie dish';
      end;
    'Chocolate cake':
      begin
        Self.Points := 15;
        Self.LeftOver := '2/3 chocolate cake';
      end;
    '2/3 chocolate cake':
      begin
        Self.Points := 10;
        Self.Parent := 'Chocolate cake';
        Self.LeftOver := 'Chocolate slice';
      end;
    'Chocolate slice':
      begin
        Self.Points := 5;
        Self.Parent := 'Chocolate cake';
      end;
    'Tangled toad''s legs', 'Chocolate bomb':
      Self.Points := 15;
    'Potato with cheese':
      Self.Points := 16;
    'Meat pizza':
      begin
        Self.Points := 16;
        Self.LeftOver := '1/2 meat pizza';
      end;
    '1/2 meat pizza':
      begin
        Self.Points := 8;
        Self.Parent := 'Meat pizza';
      end;
    'Admiral pie':
      begin
        Self.Points := 16;
        Self.LeftOver := 'Half an admiral pie';
      end;
    'Half an admiral pie':
      begin
        Self.Points := 8;
        Self.Parent := 'Admiral pie';
        Self.LeftOver := 'Pie dish';
      end;
    'Monkfish':
      Self.Points := 16;
    'Anchovy pizza':
      begin
        Self.Points := 18;
        Self.LeftOver := '1/2 anchovy pizza';
      end;
    '1/2 anchovy pizza':
      begin
        Self.Points := 9;
        Self.Parent := 'Anchovy pizza';
      end;
    'Cooked karambwan':
      Self.Points := 18;
    'Curry':
      Self.Points := 19;
    'Ugthanki kebab':
      Self.Points := 19;
    'Guthix rest(4)':
      begin
        Self.Points := 20;
        Self.LeftOver := 'Guthix rest(3)';
      end;
    'Guthix rest(3)':
      begin
        Self.Points := 15;
        Self.Parent := 'Guthix rest(4)';
        Self.LeftOver := 'Guthix rest(2)';
      end;
    'Guthix rest(2)':
      begin
        Self.Points := 10;
        Self.Parent := 'Guthix rest(4)';
        Self.LeftOver := 'Guthix rest(1)';
      end;
    'Guthix rest(1)':
      begin
        Self.Points := 5;
        Self.Parent := 'Guthix rest(4)';
        Self.LeftOver := 'Empty cup';
      end;
    'Dragonfruit pie':
      begin
        Self.Points := 20;
        Self.LeftOver := 'Half a dragonfruit pie';
      end;
    'Half a dragonfruit pie':
      begin
        Self.Points := 10;
        Self.Parent := 'Dragonfruit pie';
        Self.LeftOver := 'Pie dish';
      end;
    'Mushroom potato', 'Shark':
      Self.Points := 20;
    'Sea turtle':
      Self.Points := 21;
    'Pineapple pizza':
      begin
        Self.Points := 22;
        Self.LeftOver := '1/2 pineapple pizza';
      end;
    '1/2 pineapple pizza':
      begin
        Self.Points := 11;
        Self.Parent := 'Pineapple pizza';
      end;
    'Summer pie':
      begin
        Self.Points := 22;
        Self.LeftOver := 'Half a summer pie';
      end;
    'Half a summer pie':
      begin
        Self.Points := 11;
        Self.Parent := 'Summer pie';
        Self.LeftOver := 'Pie dish';
      end;
    'Wild pie':
      begin
        Self.Points := 22;
        Self.LeftOver := 'Half a wild pie';
      end;
    'Half a wild pie':
      begin
        Self.Points := 11;
        Self.Parent := 'Wild pie';
        Self.LeftOver := 'Pie dish';
      end;
    'Manta ray', 'Tuna potato', 'Dark crab':
      Self.Points := 22;
    'Anglerfish':
      begin
        HPLevel := BaseStats.GetCurrentLevel(ERSSkill.HitPoints);
        case HPLevel of
          10..24: Self.Points := Floor(HPLevel * 0.1) + 2;
          25..49: Self.Points := Floor(HPLevel * 0.1) + 4;
          50..74: Self.Points := Floor(HPLevel * 0.1) + 6;
          75..92: Self.Points := Floor(HPLevel * 0.1) + 8;
          93..99: Self.Points := Floor(HPLevel * 0.1) + 13;
        end;
      end;
    'Saradomin brew(4)':
      begin
        Self.Points := (Floor(BaseStats.GetCurrentLevel(ERSSkill.HitPoints) * 0.15) + 2) * 4;
        Self.LeftOver := 'Saradomin brew(3)';
      end;
    'Saradomin brew(3)':
      begin
        Self.Points := (Floor(BaseStats.GetCurrentLevel(ERSSkill.HitPoints) * 0.15) + 2) * 3;
        Self.Parent := 'Saradomin brew(4)';
        Self.LeftOver := 'Saradomin brew(2)';
      end;
    'Saradomin brew(2)':
      begin
        Self.Points := (Floor(BaseStats.GetCurrentLevel(ERSSkill.HitPoints) * 0.15) + 2) * 2;
        Self.Parent := 'Saradomin brew(4)';
        Self.LeftOver := 'Saradomin brew(1)';
      end;
    'Saradomin brew(1)':
      begin
        Self.Points := Floor(BaseStats.GetCurrentLevel(ERSSkill.HitPoints) * 0.15) + 2;
        Self.Parent := 'Saradomin brew(4)';
        Self.LeftOver := 'Vial';
      end;
  end;

  Self.IsSetup := True;
end;

procedure TRSConsumable.SetupPrayer;
begin
  if Self.IsSetup then
    Exit;

  Self.Parent := 'Null';
  Self.LeftOver := 'Null';

  case Self.Item of
    'Prayer potion(4)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 7);
        Self.LeftOver := 'Prayer potion(3)';
      end;
    'Prayer potion(3)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 7);
        Self.Parent := 'Prayer potion(4)';
        Self.LeftOver := 'Prayer potion(2)';
      end;
    'Prayer potion(2)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 7);
        Self.Parent := 'Prayer potion(4)';
        Self.LeftOver := 'Prayer potion(1)';
      end;
    'Prayer potion(1)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 7);
        Self.Parent := 'Prayer potion(4)';
        Self.LeftOver := 'Vial';
      end;
    'Super restore(4)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 8);
        Self.LeftOver := 'Super restore(3)';
      end;
    'Super restore(3)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 8);
        Self.Parent := 'Super restore(4)';
        Self.LeftOver := 'Super restore(2)';
      end;
    'Super restore(2)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 8);
        Self.Parent := 'Super restore(4)';
        Self.LeftOver := 'Super restore(1)';
      end;
    'Super restore(1)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 8);
        Self.Parent := 'Super restore(4)';
        Self.LeftOver := 'Vial';
      end;
    'Sanfew serum(4)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.3) + 4);
        Self.LeftOver := 'Sanfew serum(3)';
      end;
    'Sanfew serum(3)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.3) + 4);
        Self.Parent := 'Sanfew serum(4)';
        Self.LeftOver := 'Sanfew serum(2)';
      end;
    'Sanfew serum(2)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.3) + 4);
        Self.Parent := 'Sanfew serum(4)';
        Self.LeftOver := 'Sanfew serum(1)';
      end;
    'Sanfew serum(1)':
      begin
        Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.3) + 4);
        Self.Parent := 'Sanfew serum(4)';
        Self.LeftOver := 'Vial';
      end;
    'Zamorak brew(4)':
      begin
        Self.Points := Floor(BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.1);
        Self.LeftOver := 'Zamorak brew(3)';
      end;
    'Zamorak brew(3)':
      begin
        Self.Points := Floor(BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.1);
        Self.Parent := 'Zamorak brew(4)';
        Self.LeftOver := 'Zamorak brew(2)';
      end;
    'Zamorak brew(2)':
      begin
        Self.Points := Floor(BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.1);
        Self.Parent := 'Zamorak brew(4)';
        Self.LeftOver := 'Zamorak brew(1)';
      end;
    'Zamorak brew(1)':
      begin
        Self.Points := Floor(BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.1);
        Self.Parent := 'Zamorak brew(4)';
        Self.LeftOver := 'Vial';
      end;
    'Jangerberries':
      Self.Points := 1;
  end;

  Self.IsSetup := True;
end;

procedure TRSConsumable.SetupEnergy;
begin
  if Self.IsSetup then
    Exit;

  Self.Parent := 'Null';
  Self.LeftOver := 'Null';

  case Self.Item of
    'White tree fruit':
      Self.Points := 5;
    'Winter sq''irkjuice':
      begin
        Self.Points := 10;
        Self.LeftOver := 'Beer glass';
      end;
    'Spring sq''irkjuice':
      begin
        Self.Points := 20;
        Self.LeftOver := 'Beer glass';
      end;
    'Autumn sq''irkjuice':
      begin
        Self.Points := 30;
        Self.LeftOver := 'Beer glass';
      end;
    'Summer sq''irkjuice':
      begin
        Self.Points := 40;
        Self.LeftOver := 'Beer glass';
      end;
    'Bandages':
      Self.Points := 30;
    'Guthix rest(4)':
      begin
        Self.Points := 5;
        Self.LeftOver := 'Guthix rest(3)';
      end;
    'Guthix rest(3)':
      begin
        Self.Points := 5;
        Self.Parent := 'Guthix rest(4)';
        Self.LeftOver := 'Guthix rest(2)';
      end;
    'Guthix rest(2)':
      begin
        Self.Points := 5;
        Self.Parent := 'Guthix rest(4)';
        Self.LeftOver := 'Guthix rest(1)';
      end;
    'Guthix rest(1)':
      begin
        Self.Points := 5;
        Self.Parent := 'Guthix rest(4)';
        Self.LeftOver := 'Empty cup';
      end;
    'Papaya fruit':
      Self.Points := 5;
    'Energy potion(4)':
      begin
        Self.Points := 10;
        Self.LeftOver := 'Energy potion(3)';
      end;
    'Energy potion(3)':
      begin
        Self.Points := 10;
        Self.Parent := 'Energy potion(4)';
        Self.LeftOver := 'Energy potion(2)';
      end;
    'Energy potion(2)':
      begin
        Self.Points := 10;
        Self.Parent := 'Energy potion(4)';
        Self.LeftOver := 'Energy potion(1)';
      end;
    'Energy potion(1)':
      begin
        Self.Points := 10;
        Self.Parent := 'Energy potion(4)';
        Self.LeftOver := 'Vial';
      end;
    'Purple sweets':
      Self.Points := 10;
    'Summer pie':
      begin
        Self.Points := 10;
        Self.LeftOver := 'Half a summer pie';
      end;
    'Half a summer pie':
      begin
        Self.Points := 0;
        Self.Parent := 'Summer pie';
        Self.LeftOver := 'Pie dish';
      end;

    'Super energy(4)':
      begin
        Self.Points := 20;
        Self.LeftOver := 'Super energy(3)';
      end;
    'Super energy(3)':
      begin
        Self.Points := 20;
        Self.Parent := 'Super energy(4)';
        Self.LeftOver := 'Super energy(2)';
      end;
    'Super energy(2)':
      begin
        Self.Points := 20;
        Self.Parent := 'Super energy(4)';
        Self.LeftOver := 'Super energy(1)';
      end;
    'Super energy(1)':
      begin
        Self.Points := 20;
        Self.Parent := 'Super energy(4)';
        Self.LeftOver := 'Vial';
      end;

    'Stamina potion(4)':
      begin
        Self.Points := 20;
        Self.Timer := 2 * ONE_MINUTE;
        Self.LeftOver := 'Stamina potion(3)';
      end;
    'Stamina potion(3)':
      begin
        Self.Points := 20;
        Self.Timer := 2 * ONE_MINUTE;
        Self.Parent := 'Stamina potion(4)';
        Self.LeftOver := 'Stamina potion(2)';
      end;
    'Stamina potion(2)':
      begin
        Self.Points := 20;
        Self.Timer := 2 * ONE_MINUTE;
        Self.Parent := 'Stamina potion(4)';
        Self.LeftOver := 'Stamina potion(1)';
      end;
    'Stamina potion(1)':
      begin
        Self.Points := 20;
        Self.Timer := 2 * ONE_MINUTE;
        Self.Parent := 'Stamina potion(4)';
        Self.LeftOver := 'Vial';
      end;

    'Strange fruit':
      Self.Points := 30;
    'Mint cake':
      Self.Points := 50;
    'Gout tuber':
      Self.Points := 50;
  end;

  Self.IsSetup := True;
end;

procedure TRSConsumable.SetupAntiPoison;
begin
  if Self.IsSetup then
    Exit;

  Self.Parent := 'Null';
  Self.LeftOver := 'Null';

  case Self.Item of
    'Sanfew serum(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Sanfew serum(3)';
      end;
    'Sanfew serum(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Sanfew serum(4)';
        Self.LeftOver := 'Sanfew serum(2)';
      end;
    'Sanfew serum(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Sanfew serum(4)';
        Self.LeftOver := 'Sanfew serum(1)';
      end;
    'Sanfew serum(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Sanfew serum(4)';
        Self.LeftOver := 'Vial';
      end;

    'Anti-venom+(4)':
      begin
        Self.Timer := 15 * ONE_MINUTE;
        Self.LeftOver := 'Anti-venom+(3)';
      end;
    'Anti-venom+(3)':
      begin
        Self.Timer := 15 * ONE_MINUTE;
        Self.Parent := 'Anti-venom+(4)';
        Self.LeftOver := 'Anti-venom+(2)';
      end;
    'Anti-venom+(2)':
      begin
        Self.Timer := 15 * ONE_MINUTE;
        Self.Parent := 'Anti-venom+(4)';
        Self.LeftOver := 'Anti-venom+(1)';
      end;
    'Anti-venom+(1)':
      begin
        Self.Timer := 15 * ONE_MINUTE;
        Self.Parent := 'Anti-venom+(4)';
        Self.LeftOver := 'Vial';
      end;

    'Anti-venom(4)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.LeftOver := 'Anti-venom(3)';
      end;
    'Anti-venom(3)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Anti-venom(4)';
        Self.LeftOver := 'Anti-venom(2)';
      end;
    'Anti-venom(2)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Anti-venom(4)';
        Self.LeftOver := 'Anti-venom(1)';
      end;
    'Anti-venom(1)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Anti-venom(4)';
        Self.LeftOver := 'Vial';
      end;

    'Antidote++(4)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.LeftOver := 'Antidote++(3)';
      end;
    'Antidote++(3)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Antidote++(4)';
        Self.LeftOver := 'Antidote++(2)';
      end;
    'Antidote++(2)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Antidote++(4)';
        Self.LeftOver := 'Antidote++(1)';
      end;
    'Antidote++(1)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Antidote++(4)';
        Self.LeftOver := 'Vial';
      end;

    'Antidote+(4)':
      begin
        Self.Timer := 9 * ONE_MINUTE;
        Self.LeftOver := 'Antidote+(3)';
      end;
    'Antidote+(3)':
      begin
        Self.Timer := 9 * ONE_MINUTE;
        Self.Parent := 'Antidote+(4)';
        Self.LeftOver := 'Antidote+(2)';
      end;
    'Antidote+(2)':
      begin
        Self.Timer := 9 * ONE_MINUTE;
        Self.Parent := 'Antidote+(4)';
        Self.LeftOver := 'Antidote+(1)';
      end;
    'Antidote+(1)':
      begin
        Self.Timer := 9 * ONE_MINUTE;
        Self.Parent := 'Antidote+(4)';
        Self.LeftOver := 'Vial';
      end;

    'Superantipoison(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Superantipoison(3)';
      end;
    'Superantipoison(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Superantipoison(4)';
        Self.LeftOver := 'Superantipoison(2)';
      end;
    'Superantipoison(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Superantipoison(4)';
        Self.LeftOver := 'Superantipoison(1)';
      end;
    'Superantipoison(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Superantipoison(4)';
        Self.LeftOver := 'Vial';
      end;

    'Antipoison(4)':
      begin
        Self.Timer := 90 * ONE_SECOND;
        Self.LeftOver := 'Antipoison(3)';
      end;
    'Antipoison(3)':
      begin
        Self.Timer := 90 * ONE_SECOND;
        Self.Parent := 'Antipoison(4)';
        Self.LeftOver := 'Antipoison(2)';
      end;
    'Antipoison(2)':
      begin
        Self.Timer := 90 * ONE_SECOND;
        Self.Parent := 'Antipoison(4)';
        Self.LeftOver := 'Antipoison(1)';
      end;
    'Antipoison(1)':
      begin
        Self.Timer := 90 * ONE_SECOND;
        Self.Parent := 'Antipoison(4)';
        Self.LeftOver := 'Vial';
      end;
  end;

  Self.IsSetup := True;
end;

procedure TRSConsumable.SetupAntiVenom;
begin
  if Self.IsSetup then
    Exit;

  Self.Parent := 'Null';
  Self.LeftOver := 'Null';

  case Self.Item of
    'Anti-venom+(4)':
      begin
        Self.Timer := 3 * ONE_MINUTE;
        Self.LeftOver := 'Anti-venom+(3)';
      end;
    'Anti-venom+(3)':
      begin
        Self.Timer := 3 * ONE_MINUTE;
        Self.Parent := 'Anti-venom+(4)';
        Self.LeftOver := 'Anti-venom+(2)';
      end;
    'Anti-venom+(2)':
      begin
        Self.Timer := 3 * ONE_MINUTE;
        Self.Parent := 'Anti-venom+(4)';
        Self.LeftOver := 'Anti-venom+(1)';
      end;
    'Anti-venom+(1)':
      begin
        Self.Timer := 3 * ONE_MINUTE;
        Self.Parent := 'Anti-venom+(4)';
        Self.LeftOver := 'Vial';
      end;

    'Anti-venom(4)':
      begin
        Self.Timer := 18 * ONE_SECOND;
        Self.LeftOver := 'Anti-venom(3)';
      end;
    'Anti-venom(3)':
      begin
        Self.Timer := 18 * ONE_SECOND;
        Self.Parent := 'Anti-venom(4)';
        Self.LeftOver := 'Anti-venom(2)';
      end;
    'Anti-venom(2)':
      begin
        Self.Timer := 18 * ONE_SECOND;
        Self.Parent := 'Anti-venom(4)';
        Self.LeftOver := 'Anti-venom(1)';
      end;
    'Anti-venom(1)':
      begin
        Self.Timer := 18 * ONE_SECOND;
        Self.Parent := 'Anti-venom(4)';
        Self.LeftOver := 'Vial';
      end;
  end;

  Self.IsSetup := True;
end;

procedure TRSConsumable.SetupAntiFire;
begin
  if Self.IsSetup then
    Exit;

  Self.Parent := 'Null';
  Self.LeftOver := 'Null';

  case Self.Item of
    'Antifire potion(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Antifire potion(3)';
      end;
    'Antifire potion(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Antifire potion(4)';
        Self.LeftOver := 'Antifire potion(2)';
      end;
    'Antifire potion(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Antifire potion(4)';
        Self.LeftOver := 'Antifire potion(1)';
      end;
    'Antifire potion(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Antifire potion(4)';
        Self.LeftOver := 'Vial';
      end;

    'Super antifire potion(4)':
      begin
        Self.Timer := 3 * ONE_MINUTE;
        Self.LeftOver := 'Super antifire potion(3)';
      end;
    'Super antifire potion(3)':
      begin
        Self.Timer := 3 * ONE_MINUTE;
        Self.Parent := 'Super antifire potion(4)';
        Self.LeftOver := 'Super antifire potion(2)';
      end;
    'Super antifire potion(2)':
      begin
        Self.Timer := 3 * ONE_MINUTE;
        Self.Parent := 'Super antifire potion(4)';
        Self.LeftOver := 'Super antifire potion(1)';
      end;
    'Super antifire potion(1)':
      begin
        Self.Timer := 3 * ONE_MINUTE;
        Self.Parent := 'Super antifire potion(4)';
        Self.LeftOver := 'Vial';
      end;

    'Extended antifire(4)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.LeftOver := 'Extended antifire(3)';
      end;
    'Extended antifire(3)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Extended antifire(4)';
        Self.LeftOver := 'Extended antifire(2)';
      end;
    'Extended antifire(2)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Extended antifire(4)';
        Self.LeftOver := 'Extended antifire(1)';
      end;
    'Extended antifire(1)':
      begin
        Self.Timer := 12 * ONE_MINUTE;
        Self.Parent := 'Extended antifire(4)';
        Self.LeftOver := 'Vial';
      end;

    'Extended super antifire(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Extended super antifire(3)';
      end;
    'Extended super antifire(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Extended super antifire(4)';
        Self.LeftOver := 'Extended super antifire(2)';
      end;
    'Extended super antifire(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Extended super antifire(4)';
        Self.LeftOver := 'Extended super antifire(1)';
      end;
    'Extended super antifire(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Extended super antifire(4)';
        Self.LeftOver := 'Vial';
      end;
  end;

  Self.IsSetup := True;
end;

procedure TRSConsumable.SetupBoost;
begin
  if Self.IsSetup then
    Exit;

  Self.Parent := 'Null';
  Self.LeftOver := 'Null';

  case Self.Item of
    'Super combat potion(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Super combat potion(3)';
      end;
    'Super combat potion(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super combat potion(4)';
        Self.LeftOver := 'Super combat potion(2)';
      end;
    'Super combat potion(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super combat potion(4)';
        Self.LeftOver := 'Super combat potion(1)';
      end;
    'Super combat potion(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super combat potion(4)';
        Self.LeftOver := 'Vial';
      end;

    'Super attack potion(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Super attack potion(3)';
      end;
    'Super attack potion(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super attack potion(4)';
        Self.LeftOver := 'Super attack potion(2)';
      end;
    'Super attack potion(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super attack potion(4)';
        Self.LeftOver := 'Super attack potion(1)';
      end;
    'Super attack potion(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super attack potion(4)';
        Self.LeftOver := 'Vial';
      end;


    'Super strength potion(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Super strength potion(3)';
      end;
    'Super strength potion(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super strength potion(4)';
        Self.LeftOver := 'Super strength potion(2)';
      end;
    'Super strength potion(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super strength potion(4)';
        Self.LeftOver := 'Super strength potion(1)';
      end;
    'Super strength potion(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Super strength potion(4)';
        Self.LeftOver := 'Vial';
      end;

    'Bastion potion(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Bastion potion(3)';
      end;
    'Bastion potion(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Bastion potion(4)';
        Self.LeftOver := 'Bastion potion(2)';
      end;
    'Bastion potion(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Bastion potion(4)';
        Self.LeftOver := 'Bastion potion(1)';
      end;
    'Bastion potion(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Bastion potion(4)';
        Self.LeftOver := 'Vial';
      end;

    'Ranging potion(4)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.LeftOver := 'Ranging potion(3)';
      end;
    'Ranging potion(3)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Ranging potion(4)';
        Self.LeftOver := 'Ranging potion(2)';
      end;
    'Ranging potion(2)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Ranging potion(4)';
        Self.LeftOver := 'Ranging potion(1)';
      end;
    'Ranging potion(1)':
      begin
        Self.Timer := 6 * ONE_MINUTE;
        Self.Parent := 'Ranging potion(4)';
        Self.LeftOver := 'Vial';
      end;
  end;

  Self.IsSetup := True;
end;




function TRSItemArray.Find(const Value: TRSItem): Integer;
begin
  for Result := 0 to High(Self) do
    if (Value = Self[Result]) then
      Exit;

  Result := -1;
end;


function TRSConsumable.LeftOverIsTrash: Boolean;
begin
  Result := TRASH_ARRAY.Find(Self.LeftOver) > -1;
end;

function TRSConsumable.IsParent: Boolean;
begin
  Result := Self.Parent = 'Null';
end;

function TRSConsumable.IsLast: Boolean;
begin
  Result := (Self.LeftOver = 'Null') or Self.LeftOverIsTrash;
end;
