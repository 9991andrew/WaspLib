(*
Biometrics
==========
Methods related to biometrics that make your account behave in a unique way.
*)

{$DEFINE WL_BIOMETRICS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
var BioHash
~~~~~~~~~~~
  Global BioHash variable.
  BioHash is sort of a unique ID of each account and can be used to influence several things.
*)

var
  BioHash: Extended;

(*
Antiban.SetupBiometrics
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAntiban.SetupBiometrics;

This comes straight from older SRL versions.
This basically sets up our BioHash which is a hash of the current player login username. Because usernames are unique, so will the BioHash.
*)
procedure TAntiban.SetupBiometrics;
var
  h, i: UInt32;
  k: String;
begin
  if (Length(Login.Players) = 0) or (BioHash <> 0) then
    Exit;

  k := Login.GetPlayer.User;
  h := $811C9DC5;
  for i:=1 to Length(k) do
    h := (h * $1000193) xor Ord(k[i]);

  BioHash := h / $FFFFFFFF;
end;


(*
Antiban.GetInfluencer
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TAntiban.GetInfluencer: Extended;

This generates a random number that is influenced by BioHash.
There are times you will not want to use BioHash itself because it's value is static, this function let's you get a number that is random but heavily influenced by BioHash.

Example
-------

  Wait(Round(3000 * Antiban.GetInfluencer)));
*)
function TAntiban.GetInfluencer: Extended;
begin
  Result := (Random + BioHash) * BioHash * BioHash;
end;

(*
Antiban.GetUniqueNumber
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TAntiban.GetUniqueNumber(Input: Extended): Extended;
  function TAntiban.GetUniqueNumber(Input, Sum: Extended): Extended; overload;
  function TAntiban.GetUniqueNumber(Input, Min, Max: Extended): Extended; overload;

This generates a unique number based on your **Input**.
The overloaded functions allow you to use some extra parameters for this like:
  Sum an amount to the result, so **Sum** will always be the minimum value you get.
  Min and Max cap. The number generated will be between **Min** and **Max**.

Example
-------

  FoodAmount := Antiban.GetUniqueNumber(7, 3, 15);
*)
function TAntiban.GetUniqueNumber(Input: Extended): Extended;
begin
  Result := Input * Self.GetInfluencer;
end;

function TAntiban.GetUniqueNumber(Input, Sum: Extended): Extended; overload;
begin
  Result := Input * Self.GetInfluencer + Sum;
end;

function TAntiban.GetUniqueNumber(Input, Min, Max: Extended): Extended; overload;
begin
  Result := Input * Self.GetInfluencer;

  if Result < Min then
    Result := Min
  else if Result > Max then
    Result := Max;
end;


(*
Antiban.GetUniqueAverage
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TAntiban.GetUniqueAverage(Input: Extended; Iterations: Integer): Extended;
  function TAntiban.GetUniqueAverage(Input, Sum: Extended; Iterations: Integer): Extended; overload;
  function TAntiban.GetUniqueAverage(Input, Min, Max: Extended; Iterations: Integer): Extended; overload;

Functions to test **Antiban.GetUniqueNumber**.
It will run Antiban.GetUniqueNumber for how many **Iterations** you specify and average the results out.
Useful to know more or less what result to expect from your input.

Example
-------

  WriteLn Antiban.GetUniqueAverage(7, 3, 15, 500);
*)
function TAntiban.GetUniqueAverage(Input: Extended; Iterations: Integer): Extended;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input);

  Result := RandomCases.Mean;
end;

function TAntiban.GetUniqueAverage(Input, Sum, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input, Sum);

  Result := RandomCases.Mean;
end;

function TAntiban.GetUniqueAverage(Input, Min, Max, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input, Min, Max);

  Result := RandomCases.Mean;
end;


(*
Antiban.BioDice
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TAntiban.BioDice: Boolean;

Throws a **SRL.Dice** heavily skewed in certain directions depending on your BioHash.
BioHashes smaller than **0.15** will always return **False**.
BioHashes bigger than **0.80** will always return **True**.
BioHashes between 0.15 and 0.80 will randomly return True or False with true being more probable for higher BioHashes.

Example
-------

  UseBankEarly := Antiban.BioDice;
*)
function TAntiban.BioDice: Boolean;
begin
  case BioHash of
    0.00..0.15: Result := False;
    0.15..0.50: Result := SRL.Dice(BioHash * 90);
    0.50..0.80: Result := SRL.Dice(BioHash * 110);
    else        Result := True;
  end;
end;

(*
Antiban.InvertedBioDice
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TAntiban.InvertedBioDice: Boolean;

Inverted **Antiban.BioDice**.
*)
function TAntiban.InvertedBioDice: Boolean;
begin
  Result := not Self.BioDice;
end;

