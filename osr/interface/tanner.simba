{$DEFINE WL_TANNER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSHide = (
    SOFT_HIDE,
    HARD_HIDE,
    SWAMP_SNAKE_HIDE,
    SNAKE_HIDE,
    GREEN_DRAGON_HIDE,
    BLUE_DRAGON_HIDE,
    RED_DRAGON_HIDE,
    BLACK_DRAGON_HIDE
  );

  TRSTanner = record(TRSInterface)
  class var
    HideSlots: TBoxArray;
  end;

function TRSTanner.GetHideBox(hide: ERSHide): TBox;
begin
  Result := Self.HideSlots[Ord(hide)];
end;

function TRSTanner.IsOpen(): Boolean;
begin
  Result := MainScreen.IsClassicOpen() and (SRL.CountColor(CTS0(2070783), Self.Bounds()) = 755);
end;

function TRSTanner.IsOpen(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
begin
  if (interval = -1) then
    interval := RandomLeft(50, 1500);

  Result := WaitUntil(Self.IsOpen(), interval, waitTime);
end;


function TRSTanner.Close(pressEscape: Boolean): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(pressEscape) and WaitUntil(not Self.IsOpen(), RandomLeft(50, 1500), Random(1500, 2000));
end;

function TRSTanner.Close(Chance: Double = -1): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(Chance);
end;



function TRSTanner.CanTan(hide: ERSHide): Boolean;
begin
  Result := SRL.CountColor($F8C800, Self.GetHideBox(hide)) > 0;
end;

function TRSTanner.HoverHide(hide: ERSHide): Boolean;
begin
  if Result := Self.IsOpen() then
    Mouse.Move(Self.GetHideBox(hide));
end;

function TRSTanner.ClickHide(hide: ERSHide; option: String = 'Tan All'; waitTime: Int32 = -1): Boolean;
begin
  Result := Self.HoverHide(hide);

  if not Result then
    Exit;

  if (option <> '') or (option <> 'Tan 1') then
    Result := ChooseOption.Select(option) //if we chooseoption we might want to reset result.
  else
    Mouse.Click(MOUSE_LEFT);

  if waitTime > 0 then
    Result := WaitUntil(not Self.IsOpen(), 100, waitTime);
end;


procedure TRSTanner.Setup(Name: String); override;
begin
  inherited;

  with Self.BoundsFinder.Alignments[ERSClientMode.FIXED] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, 5];
    Bottom := [@InterfaceArea.Y2];

    Center.MaxWidth := 487;
    Center.MaxHeight := 301;
  end;

  with Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_CLASSIC] do
  begin
    Left := [@InterfaceArea.X1];
    Right := [@InterfaceArea.X2];
    Top := [@InterfaceArea.Y1, 5];
    Bottom := [@InterfaceArea.Y2];

    Center.MaxWidth := 487;
    Center.MaxHeight := 301;
  end;

  Self.BoundsFinder.Alignments[ERSClientMode.RESIZABLE_MODERN] := Self.BoundsFinder.Alignments[ERSClientMode.FIXED];

  Self.HideSlots := Grid(4, 2, 95, 111, [17, 17], [Self.X1 + 28, Self.Y1 + 37]);
end;

var
  Tanner: TRSTanner;

begin
  Tanner.Setup('Tanner');
end;


procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  if not Tanner.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(Tanner.HideSlots, Colors.YELLOW);
end;
