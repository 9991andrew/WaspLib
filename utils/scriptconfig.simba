{$DEFINE WL_SCRIPTCONFIG_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}
{$IFHASFILE credentials.simba}{$I credentials.simba}{$ENDIF}

{$H-}

type
  EWaspBankLocation = (
    AL_KHARID,
    ARDOUGNE_NORTH,
    ARDOUGNE_SOUTH,
    CASTLE_WARS,
    CATHERBY,
    CRAFT_GUILD,
    DRAYNOR,
    EDGEVILLE,
    FALADOR_EAST,
    FALADOR_WEST,
    GRAND_EXCHANGE,
    LUNAR_ISLAND,
    MINING_GUILD,
    PRIFDDINNAS,
    SEERS,
    TZHAAR,
    VARROCK_EAST,
    VARROCK_WEST,
    WINTERTODT
  );

const
  BankLocationStrings: TStringArray = [
    'Al Kharid',
    'Ardougne North',
    'Ardougne South',
    'Castle Wars',
    'Catherby',
    'Craft Guild',
    'Draynor',
    'Edgeville',
    'Falador East',
    'Falador West',
    'Grand Exchange',
    'Lunar Island',
    'Mining Guild',
    'Prifddinnas',
    'Seers',
    'Tzhaar',
    'Varrock East',
    'Varrock West',
    'Wintertodt'
  ];

var
  CurrentBankLocation: EWaspBankLocation := EWaspBankLocation.GRAND_EXCHANGE;

const
  CREDENTIALS_FILE = AppPath + 'credentials.simba';

var
  MaxActions: Int32 := -1;
  MaxTime:    Int64 := -1;

  RemoteInputEnabled    := True;  //Enables Remote Input
  BlockRealInput        := False; //Blocks user real input
  ProgressReportEnabled := True;  //Enables Graphical Progress Report
  ScriptDebugEnabled    := False; //Enables Script Debugging

type
  TConfigBlock = record
    Panel: TPanel;
    Title: TLabel;
  end;

procedure TConfigBlock.Init(AOwner: TComponent; TitleStr: String);
begin
  Self.Panel.Init(AOwner);
  Self.Panel.SetParent(AOwner);
  Self.Panel.SetBorderStyle(bsSizeable);

  Self.Title.Init(Self.Panel);
  Self.Title.SetParent(Self.Panel);
  Self.Title.SetCaption(TitleStr);
  Self.Title.GetFont().SetSize(12);
  Self.Title.SetAlign(alTop);
end;

procedure TConfigBlock.SetAlign(Value: TAlign);
begin
  Self.Panel.SetAlign(Value);
end;

function TConfigBlock.GetTop(): Integer;
begin
  Result := Self.Panel.GetTop();
end;

function TConfigBlock.GetLeft(): Integer;
begin
  Result := Self.Panel.GetLeft();
end;

function TConfigBlock.GetHeight(): Integer;
begin
  Result := Self.Panel.GetHeight();
end;

function TConfigBlock.GetWidth(): Integer;
begin
  Result := Self.Panel.GetWidth();
end;


type
  TScriptConfig = record
    Form: TForm;

    AccountManagerPanel:  TConfigBlock;
    AccountSelector:      TLabeledCombobox;
    AccountAddButton:     TButton;
    AccountSaveButton:    TButton;
    AccountDeleteButton:  TButton;

    AccountUser:          TLabeledEdit;
    AccountPass:          TLabeledEdit;
    AccountPin:           TLabeledEdit;
    AccountWorlds:        TLabeledMemo;

    AntibanPanel:         TConfigBlock;
    AntibanState:         TCheckbox;
    BreaksState:          TCheckbox;
    SleepsState:          TCheckbox;

    AdvancedABButton:     TButton;
    AdvancedEnabled:      Boolean;

    ABCameraState:        TCheckbox;
    ABMouseState:         TCheckbox;
    ABChatState:          TCheckbox;
    ABGameTabsState:      TCheckbox;
    ABBankState:          TCheckbox;

    SleepHourEdit:        TLabeledEdit;
    SleepLengthEdit:      TLabeledEdit;

    MainPanel: TPanel;

    RIPanel:     TConfigBlock;
    RIState:     TCheckbox;
    RIRealInput: TCheckbox;
    RIHUD:       TCheckbox;
    RIDebug:     TCheckbox;

    ScriptSettingsPanel:  TConfigBlock;

    WLPanel: TConfigBlock;
    ActionLimit:          TLabeledEdit;
    TimeLimit:            TLabeledEdit;

    StartButton: TButton;

    ScriptPanel: TPanel;
  end;

function TScriptConfig.BuildCredentials: String;
var
  Player: TRSLoginPlayer;
  World: Int32;
begin
  Result := 'begin'#13#10'';
  for Player in Login.Players do
  begin
    Result += '  Login.AddPlayer('#13#10'';
    Result += '    ''' + Player.User + ''','#13#10'';
    Result += '    ''' + Player.Password + ''','#13#10'';
    Result += '    ''' + Player.Pin + ''','#13#10'';

    Result += '    [';

    for World in Player.Worlds do
    begin
      Result += ToStr(World);
      if World <> Player.Worlds[High(Player.Worlds)] then
        Result += ', ';
    end;

    Result += ']'#13#10'';

    Result += '  );'#13#10'';
    Result += ''#13#10''
  end;
  Result += 'end;';
end;

procedure TScriptConfig.RewriteCredentials;
var
  FileHandle: Int32;
begin
  try
    if FileExists(CREDENTIALS_FILE) then
      CloseFile(RewriteFile(CREDENTIALS_FILE, True))
    else
      CloseFile(CreateFile(CREDENTIALS_FILE));

    FileHandle := AppendFile(CREDENTIALS_FILE);

    WriteFileString(FileHandle, Self.BuildCredentials);

    CloseFile(FileHandle);
  except
    Writeln(GetExceptionMessage);
    Writeln('It''s possible you lost your saved accounts!');
  end;
end;


procedure TScriptConfig.ClearInputs(Sender: TObject);
begin
  Self.AccountUser.setText('');
  Self.AccountPass.setText('');
  Self.AccountPin.setText('');
  Self.AccountWorlds.SetText('');
end;

procedure TScriptConfig.FillInputs(Sender: TObject);
var
  Idx: Int32 := Login.PlayerIndex;
  i: Int32;
  WorldsStr: String;
begin
  Self.AccountUser.setText(Login.Players[Idx].User);
  Self.AccountPass.setText(Login.Players[Idx].Password);
  Self.AccountPin.setText(Login.Players[Idx].Pin);

  for i := 0 to High(Login.Players[Idx].Worlds) do
  begin
    WorldsStr += ToStr(Login.Players[Idx].Worlds[i]);
    if i < High(Login.Players[Idx].Worlds) then
      WorldsStr += ', ';
  end;

  Self.AccountWorlds.SetText(WorldsStr);
end;


procedure TScriptConfig.ReloadSelector(Sender: TObject);
var
  Player: TRSLoginPlayer;
begin
  Self.AccountSelector.Clear;

  if Login.Players <> [] then
  begin
    for Player in Login.Players do
      Self.AccountSelector.AddItem(Player.User);
    Self.AccountSelector.SetItemIndex(Login.PlayerIndex);
  end;

  Self.AccountSelector.AddItem('New user');
end;



procedure TScriptConfig.OnAddClick(Sender: TObject);
var
  Worlds: TIntegerArray;
  Str: String;
  Ext: Extended;
begin
  Str := Self.AccountWorlds.GetText;
  for Ext in Str.ExtractNumbers do
    Worlds += Round(Ext);

  Login.Players += [Self.AccountUser.GetText, Self.AccountPass.GetText, Self.AccountPin.GetText, Worlds];

  Self.RewriteCredentials;
  Self.ReloadSelector(Sender);
end;

procedure TScriptConfig.OnSaveClick(Sender: TObject);
var
  Worlds: TIntegerArray;
  Str: String;
  ExtArray: TExtendedArray;
  Ext: Extended;
  Idx: Int32;
begin
  Idx := Self.AccountSelector.getItemIndex;
  if Idx > High(Login.Players) then
  begin
    Self.OnAddClick(Sender);
    Exit;
  end;

  Str := Self.AccountWorlds.GetText;
  ExtArray := Str.ExtractNumbers;
  for Ext in ExtArray do
    Worlds += Round(Ext);

  if Idx = -1 then
    Login.Players += [Self.AccountUser.GetText, Self.AccountPass.GetText, Self.AccountPin.GetText, Worlds]
  else
    Login.Players[Idx] := [Self.AccountUser.GetText, Self.AccountPass.GetText, Self.AccountPin.GetText, Worlds];

  Self.RewriteCredentials;
  Self.ReloadSelector(Sender);
end;

procedure TScriptConfig.OnDeleteClick(Sender: TObject);
var
  Idx: Int32;
begin
  Idx := Self.AccountSelector.getItemIndex;

  Writeln(Idx);
  Writeln(High(Login.Players));

  if Idx > High(Login.Players) then
    Exit;
  Delete(Login.Players, Idx, 1);
  Login.PlayerIndex -= 1;


  Self.ClearInputs(Sender);

  Self.RewriteCredentials;
  Self.ReloadSelector(Sender);
end;


procedure TScriptConfig.SelectorOnChange(Sender: TObject);
var
  Idx: Int32;
begin
  Idx := Self.AccountSelector.GetItemIndex;
  if Idx = -1 then
  begin
    Login.PlayerIndex := 0;
    Self.ClearInputs(Sender);
  end
  else if (Idx > High(Login.Players)) then
  begin
    Login.PlayerIndex := Idx;
    Self.ClearInputs(Sender);
  end
  else
  begin
    Login.PlayerIndex := Idx;
    Self.FillInputs(Sender);
  end;

  Antiban.SetupBiometrics;
  Antiban.SetSleepHour;
  Antiban.SetSleepLength;

  if Self.SleepHourEdit.IsInitiated then
    Self.SleepHourEdit.SetText(SleepHour);
  if Self.SleepLengthEdit.IsInitiated then
    Self.SleepLengthEdit.SetText(ToStr(SleepLength / ONE_HOUR));
end;



procedure TScriptConfig.SelectorKey(Sender: TObject; var Key: char);
begin
  Key := #0;
  Self.SelectorOnChange(Sender);
end;

procedure TScriptConfig.NumberField(Sender: TObject; var Key: char);
begin
  if not (Key in ['0'..'9', #8, #9, '-']) then Key := #0;
end;

procedure TScriptConfig.WorldsKeyPress(Sender: TObject; var Key: char);
begin
  if not (Key in ['0'..'9', ',', ' ' ,#8, #9]) then Key := #0;
end;

procedure TScriptConfig.UpdateFormSize(Width, Height: Int32);
begin
  Self.Form.setWidth(Width);
  Self.Form.SetHeight(Height);
end;


procedure TScriptConfig.ShowAdvanced(Sender: TObject);
begin
  Self.AdvancedEnabled := not Self.AdvancedEnabled;

  Self.ABCameraState.SetVisible(Self.AdvancedEnabled);
  Self.ABMouseState.SetVisible(Self.AdvancedEnabled);
  Self.ABChatState.SetVisible(Self.AdvancedEnabled);
  Self.ABGameTabsState.SetVisible(Self.AdvancedEnabled);
  Self.ABBankState.SetVisible(Self.AdvancedEnabled);
  Self.SleepHourEdit.SetVisible(Self.AdvancedEnabled);
  Self.SleepLengthEdit.SetVisible(Self.AdvancedEnabled);

  if Self.AdvancedEnabled then
  begin
    Self.UpdateFormSize(Self.Form.getWidth, Self.Form.getHeight + 180);
    Self.AdvancedABButton.SetCaption('Show less');
  end
  else
  begin
    Self.UpdateFormSize(Self.Form.getWidth, Self.Form.getHeight - 180);
    Self.AdvancedABButton.SetCaption('Show more');
  end;

end;


procedure TScriptConfig.RemoteInputOnChange(Sender: TObject);
var
  Checked: Boolean;
begin

  Checked := Self.RIState.IsChecked;

  Self.RIRealInput.SetEnabled(Checked);
  Self.RIHUD.SetEnabled(Checked);
  Self.RIDebug.SetEnabled(Checked);
end;

procedure TScriptConfig.DebugOnChange(Sender: TObject);
begin
  Self.RIHUD.SetEnabled(not Self.RIDebug.IsChecked);
end;


procedure TScriptConfig.Setup; //override me to add stuff!
begin
  with Self.Form do
  begin
    Init(nil);
    SetCaption('Script Configuration');
    SetWidth(650);
    SetHeight(430);
    SetPosition(poScreenCenter);
  end;

  //Setup account manager
  begin
    Self.AccountManagerPanel.Init(Self.Form, 'Account Manager');
    Self.AccountManagerPanel.SetAlign(alTop);
    Self.AccountManagerPanel.Panel.SetHeight(150);

    with Self.AccountSelector do
    begin
      Init(Self.AccountManagerPanel.Panel);
      SetCaption('Current account:');
      SetLeft(Title.getLeft + 10);
      SetTop(Title.GetTop + Title.getHeight + 5);
      Combobox.setStyle(csDropDownList);
      SetWidth(250);

      Combobox.SetOnChange(@Self.SelectorOnChange);
    end;

    Self.ReloadSelector(Self.AccountSelector.Combobox);

    with Self.AccountUser do
    begin
      Init(Self.AccountManagerPanel.Panel);
      SetCaption('Username:');
      SetLeft(Self.AccountSelector.GetLeft);
      SetTop(Self.AccountSelector.GetTop + Self.AccountSelector.GetHeight - 20);
      SetWidth(Self.AccountSelector.GetWidth);
    end;

    with Self.AccountPass do
    begin
      Init(Self.AccountManagerPanel.Panel);
      SetCaption('Password:');
      SetLeft(Self.AccountUser.GetLeft);
      SetTop(Self.AccountUser.GetTop + Self.AccountUser.GetHeight + 5);
      SetWidth(150);
      Edit.setPasswordChar('*');
    end;

    with Self.AccountPin do
    begin
      Init(Self.AccountManagerPanel.Panel);
      SetCaption('Bank pin:');
      SetLeft(Self.AccountPass.GetLeft + Self.AccountPass.GetWidth + 10);
      SetTop(Self.AccountPass.GetTop);
      SetWidth((Self.AccountSelector.GetLeft + Self.AccountSelector.GetWidth) - GetLeft);
      Edit.setPasswordChar('*');
      Edit.setMaxLength(4);
      Edit.setOnKeyPress(@Self.NumberField);
    end;

    with Self.AccountWorlds do
    begin
      Init(Self.AccountManagerPanel.Panel);
      SetCaption('Worlds (separated by commas):');
      SetLeft(Self.AccountSelector.GetLeft + Self.AccountSelector.GetWidth + 25);
      SetTop(Self.AccountSelector.GetTop);
      SetHeight(Self.AccountUser.GetTop - 3);
      SetWidth(Self.AccountUser.GetWidth);

      Memo.setOnKeyPress(@Self.WorldsKeyPress);
    end;


    with Self.AccountSaveButton do
    begin
      Init(Self.AccountManagerPanel.Panel);
      SetParent(Self.AccountManagerPanel.Panel);
      SetCaption('Save');
      SetLeft(Self.AccountWorlds.GetLeft + 40);
      SetTop(Self.AccountWorlds.GetTop + Self.AccountWorlds.GetHeight + 5);
      SetWidth(50);

      setOnClick(@Self.OnSaveClick);
    end;

    with Self.AccountAddButton do
    begin
      Init(Self.AccountManagerPanel.Panel);
      SetParent(Self.AccountManagerPanel.Panel);
      SetCaption('Add');
      SetLeft(Self.AccountSaveButton.getLeft + Self.AccountSaveButton.getWidth + 5);
      SetTop(Self.AccountSaveButton.GetTop);
      SetWidth(50);

      setOnClick(@Self.OnAddClick);
    end;

    with Self.AccountDeleteButton do
    begin
      Init(Self.AccountManagerPanel.Panel);
      SetParent(Self.AccountManagerPanel.Panel);
      SetCaption('Delete');
      SetLeft(Self.AccountAddButton.getLeft + Self.AccountAddButton.getWidth + 5);
      SetTop(Self.AccountAddButton.GetTop);
      SetWidth(50);

      setOnClick(@Self.OnDeleteClick);
    end;
  end;

  Self.SelectorOnChange(Self.AccountSelector.Combobox);

  //Setup antiban panel
  begin
    Self.AntibanPanel.Init(Self.Form, 'Antiban Settings');
    Self.AntibanPanel.SetAlign(alLeft);

    with Self.AntibanState do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Antiban');
      SetLeft(Self.AntibanPanel.GetLeft() + 20);
      SetTop(Self.AntibanPanel.Title.getTop + Self.AntibanPanel.Title.getHeight + 15);
      SetEnabled(AntibanEnabled);
      SetHint('Enable/Disable all antiban tasks.' +
              STR_NEW_LINE +
              'Antiban tasks are all antiban that are not sleep or breaks.' +
              STR_NEW_LINE +
              'This can include things like:' + STR_NEW_LINE +
              '- Random clicks' + STR_NEW_LINE +
              '- Camera movements, zoom' + STR_NEW_LINE +
              '- Etc.' + STR_NEW_LINE +
              'For a more details click "Show more".');
      ShowHint;
    end;

    with Self.BreaksState do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Short breaks');
      SetLeft(Self.AntibanState.GetLeft());
      SetTop(Self.AntibanState.getTop + Self.AntibanState.getHeight);
      SetEnabled(BreaksEnabled);
      SetHint('Enable/Disable all short breaks.' + STR_NEW_LINE +
              'This are breaks that last anywhere from 1 minute to 1 hour.');
      ShowHint;
    end;

    with Self.SleepsState do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Sleep breaks');
      SetLeft(Self.AntibanState.GetLeft());
      SetTop(Self.BreaksState.getTop + Self.BreaksState.getHeight);
      SetEnabled(SleepEnabled);
      SetHint('Enable/Disable all sleep breaks.' + STR_NEW_LINE +
              'This are breaks that last anywhere from 4 to 12 hours.');
      ShowHint;
    end;


    with Self.AdvancedABButton do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Show more');
      SetAlign(alBottom);
      SetWidth(100);
      SetHeight(30);
      setOnClick(@Self.ShowAdvanced);
    end;

    Self.AdvancedEnabled := False;

    //Advanced antiban
    with Self.ABCameraState do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Camera');
      SetLeft(Self.AntibanState.GetLeft());
      SetTop(Self.SleepsState.getTop + Self.SleepsState.getHeight + 35);
      SetEnabled(ABCamera);
      SetVisible(False);
      SetHint('Enable/Disable all camera antiban.' + STR_NEW_LINE +
              'This can move your camera angle and/or change your zoom.');
      ShowHint;
    end;

    with Self.ABMouseState do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Mouse');
      SetLeft(Self.AntibanState.GetLeft());
      SetTop(Self.ABCameraState.getTop + Self.ABCameraState.getHeight);
      SetEnabled(ABMouse);
      SetVisible(False);
      SetHint('Enable/Disable all mouse antiban.' + STR_NEW_LINE +
              'This can move your mouse and do random clicks,' + STR_NEW_LINE +
              'usually right clicks to not mess things up.');
      ShowHint;
    end;

    with Self.ABChatState do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Chat');
      SetLeft(Self.AntibanState.GetLeft());
      SetTop(Self.ABMouseState.getTop + Self.ABMouseState.getHeight);
      SetEnabled(ABChat);
      SetVisible(False);
      SetHint('Enable/Disable all chat antiban.' + STR_NEW_LINE +
              'This can click the chat buttons, toggle them and scroll the chat.');
      ShowHint;
    end;

    with Self.ABGameTabsState do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Gametabs');
      SetLeft(Self.AntibanState.GetLeft());
      SetTop(Self.ABChatState.getTop + Self.ABChatState.getHeight);
      SetEnabled(ABGameTabs);
      SetVisible(False);
      SetHint('Enable/Disable all gametabs antiban.' + STR_NEW_LINE +
              'This can open/toggle the gametabs, hover skills, etc.');
      ShowHint;
    end;

    with Self.ABBankState do
    begin
      Init(Self.AntibanPanel.Panel);
      SetParent(Self.AntibanPanel.Panel);
      SetCaption('Bank');
      SetLeft(Self.AntibanState.GetLeft());
      SetTop(Self.ABGameTabsState.getTop + Self.ABGameTabsState.getHeight);
      SetEnabled(ABBank);
      SetVisible(False);
      SetHint('Enable/Disable all bank antiban.' + STR_NEW_LINE +
              'This can toggle the banktabs, hover and/or click random items in the bank, etc.');
      ShowHint;
    end;

    with Self.SleepHourEdit do
    begin
      Init(Self.AntibanPanel.Panel);
      SetCaption('Aprox sleep time' + STR_NEW_LINE + '(HH:MM:SS):');
      SetTop(Self.ABBankState.getTop + Self.ABBankState.getHeight);
      Edit.SetTop(Edit.GetTop + 15);
      SetLeft(Self.AntibanState.GetLeft());
      SetWidth(100);
      SetText(SleepHour);
      SetVisible(False);
    end;

    with Self.SleepLengthEdit do
    begin
      Init(Self.AntibanPanel.Panel);
      SetCaption('Aprox sleep length:');
      SetLeft(Self.AntibanState.GetLeft());
      SetTop(Self.SleepHourEdit.getTop + Self.SleepHourEdit.getHeight + 20);
      SetWidth(100);
      SetText(ToStr(SleepLength / ONE_HOUR));
      SetVisible(False);
    end;
  end;

  with Self.MainPanel do
  begin
    Init(Self.Form);
    SetParent(Self.Form);
    SetAlign(alClient);
  end;

  //Setup Remote Input settings
  begin
      Self.RIPanel.Init(Self.MainPanel, 'Remote Input Settings');
      Self.RIPanel.SetAlign(alTop);

      with Self.RIState do
      begin
        Init(Self.RIPanel.Panel);
        SetParent(Self.RIPanel.Panel);
        SetCaption('Remote Input');
        SetEnabled(RemoteInputEnabled);
        setOnChange(@Self.RemoteInputOnChange);
        SetTop(Self.RIPanel.GetTop() + 25);
        SetLeft(Self.RIPanel.GetLeft() + 15);
        SetHint('Enable/Disable Remote Input.' +
                STR_NEW_LINE +
                'Remote Input is a virtual mouse that allows you' +
                STR_NEW_LINE +
                'to bot while you use your real mouse');
        ShowHint;
      end;

      with Self.RIRealInput do
      begin
        Init(Self.RIPanel.Panel);
        SetParent(Self.RIPanel.Panel);
        SetCaption('Disable Input');
        SetEnabled(ProgressReportEnabled);
        SetTop(Self.RIPanel.GetTop() + 25);
        SetLeft(Self.RIState.GetLeft() + Self.RIState.GetWidth() + 15);
        SetHint('Enable/Disable User Input.' +
                STR_NEW_LINE +
                'This disables your input in the game until you' +
                STR_NEW_LINE +
                'pause or terminate the script.');
        ShowHint;
      end;

      with Self.RIHUD do
      begin
        Init(Self.RIPanel.Panel);
        SetParent(Self.RIPanel.Panel);
        SetCaption('HUD report');
        SetEnabled(ProgressReportEnabled);
        SetTop(Self.RIPanel.GetTop() + 25);
        SetLeft(Self.RIRealInput.GetLeft() + Self.RIRealInput.GetWidth() + 15);
        SetHint('Enable/Disable the HUD report.' +
                STR_NEW_LINE +
                'HUD report is the in-game progress report, also' +
                STR_NEW_LINE +
                'called paint sometimes.');
        ShowHint;
      end;

      with Self.RIDebug do
      begin
        Init(Self.RIPanel.Panel);
        SetParent(Self.RIPanel.Panel);
        SetCaption('Debug script');
        SetEnabled(ScriptDebugEnabled);
        SetOnChange(@Self.DebugOnChange);
        SetTop(Self.RIPanel.GetTop() + 25);
        SetLeft(Self.RIHUD.GetLeft() + Self.RIHUD.GetWidth() + 15);
        SetHint('Enable/Disable the Script Debugging.' +
                STR_NEW_LINE +
                'This will paint/draw on screen critical things' +
                STR_NEW_LINE +
                'that Simba is looking for.');
        ShowHint;
      end;
    end;

  //Setup script settings
  begin
    Self.ScriptSettingsPanel.Init(Self.MainPanel, 'Script Settings');
    Self.ScriptSettingsPanel.SetAlign(alClient);

    with Self.WLPanel do
    begin
      Init(Self.ScriptSettingsPanel.Panel, 'WaspLib Settings');
      SetAlign(alBottom);
      Panel.SetHeight(130);
    end;

    with Self.ActionLimit do
    begin
      Init(Self.WLPanel.Panel);
      SetCaption('Stop after (number of actions):');
      SetLeft(Self.WLPanel.getLeft + 35);
      SetTop(Self.WLPanel.GetTop() + 30);
      SetWidth(165);
      SetText(ToStr(MaxActions));
      Edit.setOnKeyPress(@Self.NumberField);
    end;

    with Self.TimeLimit do
    begin
      Init(Self.WLPanel.Panel);
      SetCaption('Stop after (time in minutes):');
      SetTop(Self.ActionLimit.GetTop());
      SetLeft(Self.ActionLimit.getLeft() + Self.ActionLimit.GetWidth() + 55);
      SetWidth(150);
      SetText(ToStr(MaxTime));
      Edit.setOnKeyPress(@Self.NumberField);
    end;

    with Self.StartButton do
    begin
      Init(Self.WLPanel.Panel);
      SetParent(Self.WLPanel.Panel);
      SetCaption('Start');
      SetAlign(alBottom);
      SetWidth(50);
      SetHeight(30);
    end;
  end;

  //override me to add stuff!
end;

procedure TScriptConfig.Init(Sender: TObject); //override me to add stuff!
begin
  AntibanEnabled := Self.AntibanState.IsChecked;
  BreaksEnabled  := Self.BreaksState.IsChecked;
  SleepEnabled   := Self.SleepsState.IsChecked;

  ABCamera   := Self.ABCameraState.IsChecked;
  ABMouse    := Self.ABMouseState.IsChecked;
  ABChat     := Self.ABChatState.IsChecked;
  ABGameTabs := Self.ABGameTabsState.IsChecked;
  ABBank     := Self.ABBankState.IsChecked;

  SleepHourOverride := Self.SleepHourEdit.GetText;
  WriteLn SRL.TimeStamp + ':[GUI]: Aprox sleep hour: ' + SleepHourOverride;
  SleepLengthOverride := StrToFloat(Self.SleepLengthEdit.GetText);
  WriteLn SRL.TimeStamp + ':[GUI]: Aprox sleep length: ' + ToStr(SleepLengthOverride);

  RemoteInputEnabled    := Self.RIState.IsChecked;
  ProgressReportEnabled := (Self.RIHUD.IsChecked) and
                           (not Self.RIDebug.IsChecked);
  ScriptDebugEnabled    := Self.RIDebug.IsChecked;

  MaxActions := StrToInt(Self.ActionLimit.GetText);
  if StrToInt64(Self.TimeLimit.Edit.GetText) > 0 then
    MaxTime := StrToInt64(Self.TimeLimit.Edit.GetText) * 60 * 1000;

  Self.Form.Close;
  Writeln('Script starting...');

  //override me to add stuff!
end;

procedure TScriptConfig.Run;
begin
  try
    Self.Form.ShowModal;
    Self.Form.Free;
  except
    Writeln(GetExceptionMessage);
  end;
end;

type
  TBankConfig = record(TScriptConfig)
    BankSelector: TLabeledCombobox;
  end;

procedure TBankConfig.BankSelectorOnChange(Sender: TObject);
begin
  CurrentBankLocation := EWaspBankLocation(
                           BankLocationStrings.IndexOf(
                             Self.BankSelector.Combobox.getText));
end;

procedure TBankConfig.Setup(Strs: TStringArray); overload;
var
  Str: String;
begin
  Self.Setup;
  WriteLn 'HERE';

  Self.UpdateFormSize(Self.Form.getWidth, Self.Form.getHeight + 200);

  with Self.BankSelector do
  begin
    Init(Self.WLPanel.Panel);
    SetCaption('Bank location:');
    SetLeft(Self.WLPanel.GetLeft() + 5);
    SetTop(Self.WLPanel.GetTop() + 25);
    SetWidth(200);
    Combobox.setStyle(csDropDownList);
    for Str in Strs do AddItem(Str);
    Combobox.setItemIndex(Ord(CurrentBankLocation));
    Combobox.SetOnChange(@Self.BankSelectorOnChange);
  end;

  with Self.ActionLimit do
  begin
    SetTop(Self.WLPanel.GetTop() + 55);
  end;
end;

{$H+}
