{$DEFINE WL_PROGRESS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

var
  ProgressTitle: String;
  PadLength: Int32;
  PTimeRunning: ^TStopwatch;
  ProgressArray: TStringArray;
  DisableHoverBox: TBox;

type
  TWaspProgressReport = record
    ClientBMP: TMufasaBitmap;
    BGImg: TMufasaBitmap;
    TextColor: Int32;
    PreviousStrArray: TStringArray;
    IsSetup: Boolean;
    Terminated: Boolean;
  end;

function TWaspProgressReport.GetNextCycleColor(Color, Step: Int32): Int32;
var
  R, G, B: Int32;
begin
  ColorToRGB(Color, R, G, B);

  if (R = 255) and (G = 0) and (B < 255) then
    B += Step
  else if (R > 0)   and (G = 0)   and (B = 255) then
    R -= Step
  else if (R = 0)   and (G < 255) and (B = 255) then
    G += Step
  else if (R = 0)   and (G = 255) and (B > 0) then
    B -= Step
  else if (R < 255) and (G = 255) and (B = 0) then
    R += Step
  else if (R = 255) and (G > 0)   and (B = 0) then
    G -= Step;

  if R < 0    then R := 0;
  if R > 255 then R := 255;

  if G < 0    then G := 0;
  if G > 255 then G := 255;

  if B < 0    then B := 0;
  if B > 255 then B := 255;

  writeLn('R: ', R, ' G: ', G, ' B: ', B);
  Result := RGBtoColor(R, G, B);
end;


procedure TWaspProgressReport.Terminate();
begin
  if Self.Terminated then //avoids multiple terminations in case the script is chained.
    Exit;

  Self.BGImg.Clear;
  Self.BGImg.Free;

  Self.ClientBMP.Clear;
  Self.ClientBMP.Free; //not sure if it needs to be freed?

  Self.Terminated := True; //avoids multiple terminations in case the script is chained.
end;

procedure TWaspProgressReport.Setup();
const
  BG_PATH = {$MACRO CURRENT_DIRECTORY} + DirectorySeparator;
begin
  Self.BGImg := TMufasaBitmap.Create();
  Self.ClientBMP := RSClient.Image;

  Self.BGImg.Clear();
  Self.ClientBMP.Clear();

  Self.BGImg.LoadFromFile(BG_PATH + 'WaspProgress.png');

  Self.ClientBMP.setFontAntialiasing(True);
  Self.BGImg.setFontAntialiasing(True);
  {$IFDEF WINDOWS}
  Self.BGImg.setFontName('Courier New');
  Self.ClientBMP.setFontName('Courier New');
  {$ENDIF}
  Self.ClientBMP.setFontSize(13);

  Self.TextColor := $006CFF;;

  AddOnTerminate(@Self.Terminate);
end;

procedure TWaspProgressReport.DrawDisableButton(Str: String);
begin
  DisableHoverBox := Chat.GetLineBoxes()[CHAT_INPUT_LINE];
  DisableHoverBox.X1 := DisableHoverBox.X2 - Round(DisableHoverBox.Width()/8);
  DisableHoverBox.X2 := Chat.Bounds.X2 - 5;
  Self.ClientBMP.DrawBoxFilled(DisableHoverBox, $292929);
  Self.ClientBMP.DrawBox(DisableHoverBox, $178FEC);
  Self.ClientBMP.DrawTextShadow(Str, [DisableHoverBox.X1 + 24, DisableHoverBox.Y1 + 2], $006CFF, False);
end;

procedure TWaspProgressReport.DrawBackground(StrArray: TStringArray; FontColor: Int32);
var
  P: TPoint;
begin
  if not Self.IsSetup then
  begin
    P := [10, 15];

    Self.BGImg.setFontSize(18);
    Self.BGImg.DrawTextShadow(StrArray[0], P, FontColor, False);

    Self.BGImg.setFontSize(14);
    P.Y += 105;
    FontColor -= $90A301 - $C8D100;
    Self.BGImg.DrawText(StrArray[4], P, FontColor);

    Self.IsSetup := True;
  end;

  Self.ClientBMP.DrawBitmap(Self.BGImg, [Chat.Bounds.X1, Chat.Bounds.Y1]);
  Self.DrawDisableButton('Hide');
end;

procedure TWaspProgressReport.DrawProgress(StrArray: TStringArray; FontColor: Int32);
var
  P: TPoint;
  i: Int32;
begin
  P := [Chat.Bounds.X1 + 10, Chat.Bounds.Y1 + 50];

  FontColor -= $C8D100;

  for i := 1 to 3 do
  begin
    if i > High(StrArray) then
      Break;

    Self.ClientBMP.DrawTextShadow(StrArray[i], P, FontColor, False);
    P.Y += 20;
  end;

  Self.PreviousStrArray := StrArray;
end;


procedure TWaspProgressReport.Update(StrArray: TStringArray);
begin
  Self.ClientBMP.Clear;

  if StrArray = [] then
    Exit;

  //Self.TextColor := Self.GetNextCycleColor(Self.TextColor, 10);
  Self.DrawBackground(StrArray, Self.TextColor);
  Self.DrawProgress(StrArray, Self.TextColor);
end;

var
  ProgressReport: TWaspProgressReport;
