{$DEFINE WL_ANTIBANEXTRA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}


//Antiban overrides:

//Makes inventory patterns more common to each player based on their BioHash.
function TRSInventory.RandomPattern: TIntegerArray; override;
var
  Patterns: T2DIntegerArray;
  RandomCase: Double;
begin

  Patterns := [
    DROP_PATTERN_SNAKE, DROP_PATTERN_SPIRAL,
    DROP_PATTERN_REGULAR, DROP_PATTERN_TOPDOWN,
    DROP_PATTERN_SNAKE_R, DROP_PATTERN_TOPDOWN_R
  ];

  RandomCase := Antiban.GetUniqueNumber(Random(0, High(Patterns)), 0, High(Patterns));

  Result := Patterns[Round(RandomCase)];
end;

//overriden to use Bank,Close with biohash.
function TRSGameTabs.Open(Tab: ERSGameTab): Boolean; override;
begin
  if Self.GetCurrentTab = Tab then
    Exit(True);

  if MainScreen.HasInterface and (Bank.IsOpen(False) or DepositBox.IsOpen) then
    MainScreen.CloseInterface;

  Result := inherited(Tab);
end;


function TRSAnvil.Close(Chance: Double = BioHash): Boolean; overload;
var
  PressEscape: Boolean;
begin
  if Chance = BioHash then
    PressEscape := Antiban.BioDice
  else
    PressEscape := SRL.Dice(Chance);

  Result := Self.Close(PressEscape);
end;

function TRSCollectBox.Close(Chance: Double = BioHash): Boolean; overload;
var
  PressEscape: Boolean;
begin
  if Chance = BioHash then
    PressEscape := Antiban.BioDice
  else
    PressEscape := SRL.Dice(Chance);

  Result := Self.Close(PressEscape);
end;

function TRSGrandExchange.Close(Chance: Double): Boolean; overload;
var
  PressEscape: Boolean;
begin
  if Chance = BioHash then
    PressEscape := Antiban.BioDice
  else
    PressEscape := SRL.Dice(Chance);

  Result := MainScreen.CloseInterface(PressEscape);
end;


function TRSChat.ClickOption(Text: String; Chance: Double; Colors: TIntegerArray = [CHAT_COLOR_BLACK, CHAT_COLOR_WHITE]): Boolean; overload;
var
  UseKeyboard: Boolean;
begin
  if Chance = BioHash then
    UseKeyboard := Antiban.BioDice
  else
    UseKeyboard := SRL.Dice(Chance);

  Result := Self.ClickOption(Text, UseKeyboard, Colors);
end;

function TRSChat.HandleLevelUp(Chance: Double = BioHash): Boolean; overload;
var
  UseKeyboard: Boolean;
begin
  if Chance = BioHash then
    UseKeyboard := Antiban.BioDice
  else
    UseKeyboard := SRL.Dice(Chance);

  Result := Self.HandleLevelUp(UseKeyboard);
end;

function TRSChat.ClickContinue(Chance: Double): Boolean; overload;
var
  UseKeyboard: Boolean;
begin
  if Chance = BioHash then
    UseKeyboard := Antiban.BioDice
  else
    UseKeyboard := SRL.Dice(Chance);

  Result := Self.ClickContinue(UseKeyboard);
end;


function TRSChooseOption.Select(Text: TStringArray; MouseAction: Int32 = MOUSE_LEFT; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean; override;
var
  Choices: TRSChooseOption_OptionArray;
  I, J: Int32;
begin
  if Self.Open() then
  begin
    case BioHash of
      0.00..0.30: Wait(0, 1000 + Antiban.GetUniqueNumber(1500, 500, 2000), wdRight);
      0.30..0.70: Wait(0, 500 + Antiban.GetUniqueNumber(1000, 500, 2000), wdMean);
      else        Wait(0, 500 + Antiban.GetUniqueNumber(750, 500, 1000), wdLeft);
    end;

    Choices := GetOptions();

    for I := 0 to High(Choices) do
      for J := 0 to High(Text) do
        if (CaseSensitive and (Text[J] in Choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[J]) in Lowercase(Choices[I].Text))) then
        begin
          Self.Select(Choices[I], MouseAction);

          Exit(True);
        end;

    if CloseIfNotFound then
    begin
      WaitEx(500, 250);

      Self.Close();
    end;
  end;
end;

