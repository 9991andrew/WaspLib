(*
MouseZoom
=========
Methods to handle the zoom levels with he mouse wheel.
*)

{$DEFINE WL_MOUSEZOOM_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSMouseZoom = record(TSRLBaseRecord)
    TrueZoomLevel: Int32;
  class const
      ZOOM_PATTERN: TIntegerArray = [0, 0, 2, 2, 2, 5, 5, 7, 7, 9, 9, 11, 11, 13, 14, 14, 16, 16, 18, 18, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 34, 35, 35, 37, 37, 39, 39, 41, 41, 43, 43, 45, 46, 47, 48, 48, 50, 50, 52, 52, 54, 55, 55, 57, 57, 59, 59, 61, 62, 62, 64, 64, 66, 67, 67, 69, 69, 71, 71, 73, 74, 74, 76, 76, 78, 79, 79, 81, 81, 83, 83, 84, 86, 87, 88, 88, 90, 90, 92, 92, 94, 95, 95, 97, 98, 99, 100, 100, 101, 103, 103, 105, 106, 106, 108, 109, 109, 111, 112, 112, 114, 115, 115, 117, 118, 118, 120, 121, 121, 122, 124, 124, 126, 127, 129, 129, 130, 131, 131, 133, 134, 134, 136, 137, 138, 138, 140, 141, 141, 143, 144, 145, 145, 147, 148, 148, 150, 151, 152, 152, 154, 155, 156, 156, 158, 159, 160, 160, 162, 163, 164, 164, 166, 167, 168, 169, 169, 171, 172, 173, 173, 175, 176, 177, 178, 178, 180, 181, 182, 183, 183, 185, 186, 187, 188, 188, 190, 191, 192, 193, 194, 194, 196, 197, 197, 199, 200, 200, 202, 203, 204, 205, 206, 207, 207, 209, 210, 210, 212, 213, 214, 214, 216, 217, 218, 219, 220, 221, 222, 223, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768];
  end;

function TRSMouseZoom.GetNext(value: Int32; down: Boolean): Int32;
begin
  if down then
    Result := Self.ZOOM_PATTERN[value] -26
  else
    Result := Self.ZOOM_PATTERN[value] +24;

  Result := EnsureRange(Result, 0, 768);
end;


function TRSMouseZoom.GetNext(value: Int32; amount: Int32 = 1; down: Boolean = True): Int32; overload;
var
  i: Int32;
begin
  Result := value;
  for i := 0 to amount-1 do
    Result := Self.GetNext(Result, down);
end;


function TRSMouseZoom.GetSlider(value: Int32 = -1): Int32;
begin
  if value < 0 then
    value := Self.TrueZoomLevel;

  Result := Floor(value/8);

  //The following levels do not exist in the slider, probably due to roundings.
  //The scale of 0-100 is made up by us so we are bound to rounding issues.
  if Result >= 13 then
    Result += 1;

  if Result >= 37 then
    Result += 1;

  if Result >= 63 then
    Result += 1;

  if Result >= 87 then
    Result += 1;
end;

procedure TRSMouseZoom.Scroll(amount: Int32 = 1; down: Boolean = True; moveMouse: Boolean = False);
begin
  Self.TrueZoomLevel := Self.GetNext(Self.TrueZoomLevel, amount, down);

  MM2MS.ZoomLevel := Self.GetSlider(Self.TrueZoomLevel);

  if moveMouse then
    Mouse.Scroll(MainScreen.Bounds(), amount, down)
  else
    Mouse.Scroll(amount, down);
end;

//Only used for stress testing!
procedure TRSMouseZoom.AntiLogout(i, iterations: Int32);
begin
  if Frac(i/1000) = 0 then
    WriteLn('Progress: ', i, ' of ', iterations);

  if Frac(i/250) <> 0 then
    Exit;

  if Frac(i/500) = 0 then
    Options.SetZoomLevel(50)
  else
    case SRL.Dice(50) of
      True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - RandomMode(30, 360, 3));
      False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + RandomMode(30, 360, 3));
    end;

  Mouse.Move(InterfaceArea.Bounds(), True);
end;


procedure TRSMouseZoom.RunStressTest(iterations: Int32 = 19999);
var
  i, slider: Int32;
  fails: TIntegerArray;
  down: Boolean;
begin
  Options.SetZoomLevel(50);
  Mouse.Move(InterfaceArea.Bounds(), True);

  SetLength(fails, 5);

  for i := 0 to iterations do
  begin
    Self.AntiLogout(i, iterations);
    Down := SRL.Dice(48);

    Self.Scroll(1, down, True);
    Wait(5);
    slider := Options.GetZoomLevel();

    if slider = MM2MS.ZoomLevel then
      Continue;

    fails[0] += 1;
    if InRange(MM2MS.ZoomLevel, slider-2, slider+2) then
      Continue;

    fails[1] += 1
    if InRange(MM2MS.ZoomLevel, slider-5, slider+5) then
      Continue;

    fails[2] += 1;
    if InRange(MM2MS.ZoomLevel, slider-10, slider+10) then
      Continue;

    fails[3] += 1;
    if InRange(MM2MS.ZoomLevel, slider-15, slider+15) then
      Continue;

    fails[4] += 1;
  end;

  WriteLn 'Level 0 fail = any fail.'+ LINEENDING + 'Level 1 fail = Fail that was off by 2' + LINEENDING +
          'Level 2 fail = Fail that was off by 5' + LINEENDING +
          'Level 3 fail = Fail that was off by 10 (this can really break things)' + LINEENDING +
          'Level 4 fail = Fail that was off by 15 (this can really break things)';

  for i := 0 to High(fails) do
    WriteLn('Level ', i, ' fail rate: ', fails[i], '/', iterations, ' (', Round(fails[i]/iterations * 100, 2), '%)');
end;


procedure TRSMouseZoom.DrawGraph();
var
  bmp: TMufasaBitmap;
  i: Int32;
  levelTPA, zInTPA, zOutTPA, zTrue, zSlider: TPointArray;
begin
  bmp := TMufasaBitmap.Create(780, 780);

  bmp.Fill($FCFCFC);

  for i:=0 to bmp.GetWidth() do
    if Frac(i/2) = 0 then
      bmp.DrawLine([i,0], [i,bmp.GetHeight()], $F5F5F5); //This makes it easier to see... makes alternating gray scale columns.

  for i := 0 to High(Self.ZOOM_PATTERN) do
  begin
    levelTPA += [i, i];
    zInTPA   += [i, Self.GetNext(Self.ZOOM_PATTERN[i], False)];
    zOutTPA  += [i, Self.GetNext(Self.ZOOM_PATTERN[i], True)];
  end;

  bmp.DrawTPA(levelTPA, Colors.ORANGE);
  bmp.DrawTPA(zInTPA.Offset([0,-24]), Colors.BLUE_OCEAN);
  bmp.DrawTPA(zOutTPA.Offset([0, 26]), Colors.CYAN);

  bmp.Show(True);
  bmp.Free();
end;

var
  RSMouseZoom: TRSMouseZoom;

function TRSOptions.SetZoomLevel(Level: Int32): Boolean; override;
begin
  Result := inherited();
  if not Result then
    Exit;

  case Level of
    0:   RSMouseZoom.TrueZoomLevel := 0;
    25:  RSMouseZoom.TrueZoomLevel := 192;
    50:  RSMouseZoom.TrueZoomLevel := 384;
    75:  RSMouseZoom.TrueZoomLevel := 576;
    100: RSMouseZoom.TrueZoomLevel := 768;
    (*
    0:   RSMouseZoom.TrueZoomLevel := 0;
    25:  RSMouseZoom.TrueZoomLevel := 123;
    50:  RSMouseZoom.TrueZoomLevel := 331;
    75:  RSMouseZoom.TrueZoomLevel := 680;
    100: RSMouseZoom.TrueZoomLevel := 1268;
    *)
  end;
end;

