{$DEFINE WL_TARGET_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

function GetFileCount(path, ext: String): Int32;
begin
  Result := Length(FindFiles(path, [ext]));
end;

function GetAgeSortedFiles(path, ext: String): TStringArray;
  function SortFilesByAge(files: TStringArray; lowToHigh: Boolean = True): TStringArray;
  var
    weights: TIntegerArray;
    i: Integer;
  begin
    SetLength(weights, Length(files));
    for i := 0 to High(weights) do
      weights[i] := FileAge(files[i]);

    Result := Sorted(files, weights, lowToHigh);
  end;
begin
  Result := SortFilesByAge(FindFiles(path, [ext]));
end;


procedure DeleteOldFiles(path, ext: String; keepAmount: Int32);
var
  amount: Int32;
  files: TStringArray;
  i: Int32;
begin
  ext := ext.After('.');

  amount := Length(FindFiles(path, [ext]));
  if amount < keepAmount then
    Exit;

  files := GetAgeSortedFiles(path, ext);

  for i := 0 to (amount - keepAmount - 1) do
    DeleteFile(path + files[i]);
end;



function GetScreenshotPath(fileName: String): String;
var
  fileExt: String;
  fileTime: String;
begin
  if not fileName.Contains(SIMBAPATH + 'Screenshots' + DIRECTORYSEPARATOR) then
    fileName := SIMBAPATH + 'Screenshots'  + DIRECTORYSEPARATOR + fileName;

  Result := ExtractFilePath(fileName);
  if not ForceDirectories(Result) then
    Exit;

  fileName := ExtractFileName(fileName);
  fileExt := ExtractFileExt(fileName);

  if fileExt = '' then
    fileExt := '.png'
  else
    fileName := fileName.Before(fileExt);

  fileTime := '_' + FormatDateTime('yyyy-mm-dd_hh-mm-ss', Now());

  DeleteOldFiles(Result, fileExt, 300);

  Result += fileName + fileTime + fileExt;
end;

function SaveScreenshot(fileName: String; messageUser: Boolean): String; overload;
begin
  Result := GetScreenshotPath(fileName);
  SaveScreenshot(Result);

  if messageUser then
    WriteLn 'Screenshot saved: ' + Result;
end;

function SaveScreenshot(fileName: String; bounds: TBox; messageUser: Boolean = True): String; overload;
var
  bmp: TMufasaBitmap;
  b: TBox;
begin
  Result := GetScreenshotPath(fileName);

  bmp := TMufasaBitmap.CreateFromClient();
  b := Chat.GetDisplayNameBox();
  if b <> Chat.GetInputLineBox() then
    bmp.DrawBoxFilled(b, $819DAC);

  bmp.crop(bounds.X1, bounds.Y1, bounds.X2, bounds.Y2);

  bmp.SaveToFile(Result);
  bmp.Free();

  if messageUser then
    WriteLn 'Screenshot saved: ' + Result;
end;

procedure ForceSaveScreenshot(); overload;
var
  bmp: TMufasaBitmap;
  b: TBox;
  path: String;
begin
  bmp := TMufasaBitmap.CreateFromClient();
  b := Chat.GetDisplayNameBox();
  if b <> Chat.GetInputLineBox() then
    bmp.DrawBoxFilled(b, $819DAC);
  path := GetScreenshotPath('Terminated' + DIRECTORYSEPARATOR +'screenshot');

  bmp.SaveToFile(path);
  bmp.Free();
end;

procedure GenerateLog(fileName: String);
var
  path: String;
begin
  if WL.LogFile <> '' then
    Exit;

  path := SimbaPath + 'Logs/';
  if not ForceDirectories(path) then
    Exit;

  DeleteOldFiles(path, 'txt', 100);

  WL.LogFile := path + fileName.Replace(' ', '_').ToLower() + '-' + ToStr(UnixTime) + '.txt';

  if not FileExists(WL.LogFile) then
    CreateFile(WL.LogFile);
end;

