{$DEFINE WL_SCRIPTCONFIG_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

{$IFHASFILE credentials.simba}{$I credentials.simba}{$ENDIF}

{$H-}

const
  CREDENTIALS_FILE = AppPath + 'credentials.simba';

var
  MaxActions: Int32 := -1;
  MaxTime:    Int64 := -1;

  RemoteInputEnabled    = True;  //Enables Remote Input
  BlockRealInput        = False; //Blocks user real input
  OutputReportEnabled   = True;  //Enable Text ProgressReport
  ProgressReportEnabled = True;  //Enables Graphical Progress Report
  ScriptDebugEnabled    = False; //Enables Script Debugging
  CurrentBankLocation   = EWLBankLocation.GRAND_EXCHANGE_BANK;

(*
RewriteCredentials
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure RewriteCredentials();

Internal method used to rewrite the credentials.simba file.
This will use whatever is stored at the moment in **Login.Players**
*)
procedure RewriteCredentials();
  function BuildCredentials(): String;
  var
    Player: TRSLoginPlayer;
    World: Int32;
  begin
    Result := 'begin'#13#10'';
    for Player in Login.Players do
    begin
      Result += '  Login.AddPlayer('#13#10'';
      Result += '    ''' + Player.User + ''','#13#10'';
      Result += '    ''' + Player.Password + ''','#13#10'';
      Result += '    ''' + Player.Pin + ''','#13#10'';

      Result += '    [';

      for World in Player.Worlds do
      begin
        Result += ToStr(World);
        if World <> Player.Worlds[High(Player.Worlds)] then
          Result += ', ';
      end;

      Result += ']'#13#10'';

      Result += '  );'#13#10'';
      Result += ''#13#10''
    end;
    Result += 'end;';
  end;

var
  FileHandle: Int32;
begin
  try
    if FileExists(CREDENTIALS_FILE) then
      CloseFile(RewriteFile(CREDENTIALS_FILE, True))
    else
      CloseFile(CreateFile(CREDENTIALS_FILE));

    FileHandle := AppendFile(CREDENTIALS_FILE);

    WriteFileString(FileHandle, BuildCredentials());

    CloseFile(FileHandle);
  except
    WriteLn GetExceptionMessage();
    WriteLn 'It''s possible you lost your saved accounts!';
    WriteLn 'If you have issues with the Account Manager delete the following file:';
    WriteLn CREDENTIALS_FILE;
  end;
end;

(*
UpdateFormSize
~~~~~~~~~~~~~~
.. pascal:: procedure UpdateFormSize(Form: TForm; Width, Height: Int32);

Helper wrapper function to resize a form in one line.
*)
procedure UpdateFormSize(Form: TForm; Width, Height: Int32);
begin
  if Width = 0 then Width := Form.GetWidth();
  if Height = 0 then Height := Form.GetHeight();

  Form.setWidth(Width);
  Form.SetHeight(Height);
end;

(*
NumberField
~~~~~~~~~~~
.. pascal:: procedure NumberField(Sender: TObject; var Key: char);

Helper method to limit user input to numbers and certain characters (spaces, commas and -).
*)
procedure NumberField(Sender: TObject; var Key: char);
begin
  if not (Key in ['0'..'9', #8, #9, '-']) then Key := #0;
end;


(*
type TAccountManagerPanel
~~~~~~~~~~~~~~~~~~~~~~~~~

Helper type to handle the Account Manager panel.
*)
type
  TAccountManagerPanel = record(TLabeledPanel)
    AccountSelector:      TLabeledCombobox;
    AccountAddButton:     TButton;
    AccountSaveButton:    TButton;
    AccountDeleteButton:  TButton;

    AccountUser:          TLabeledEdit;
    AccountPass:          TLabeledEdit;
    AccountPin:           TLabeledEdit;
    AccountWorlds:        TLabeledMemo;
  end;

(*
AccountManagerPanel.ClearInputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAccountManagerPanel.ClearInputs(Sender: TObject);

Callback method used internally to clear all inputs on the Account Manager panel.
*)
procedure TAccountManagerPanel.ClearInputs(Sender: TObject);
begin
  Self.AccountUser.setText('');
  Self.AccountPass.setText('');
  Self.AccountPin.setText('');
  Self.AccountWorlds.SetText('');
end;

(*
AccountManagerPanel.FillInputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAccountManagerPanel.FillInputs(Sender: TObject);

Callback method used internally to populate inputs with the current accout info.
*)
procedure TAccountManagerPanel.FillInputs(Sender: TObject);
var
  Idx: Int32 := Login.PlayerIndex;
  i: Int32;
  WorldsStr: String;
begin
  Self.AccountUser.setText(Login.Players[Idx].User);
  Self.AccountPass.setText(Login.Players[Idx].Password);
  Self.AccountPin.setText(Login.Players[Idx].Pin);

  for i := 0 to High(Login.Players[Idx].Worlds) do
  begin
    WorldsStr += ToStr(Login.Players[Idx].Worlds[i]);
    if i < High(Login.Players[Idx].Worlds) then
      WorldsStr += ', ';
  end;

  Self.AccountWorlds.SetText(WorldsStr);
end;

(*
AccountManagerPanel.WorldsKeyPress
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAccountManagerPanel.WorldsKeyPress(Sender: TObject; var Key: char);

Callback method used internally to block unwanted keys in the "worlds" field.
*)
procedure TAccountManagerPanel.WorldsKeyPress(Sender: TObject; var Key: char);
begin
  if not (Key in ['0'..'9', ',', ' ' ,#8, #9]) then Key := #0;
end;

(*
AccountManagerPanel.Setup
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAccountManagerPanel.Setup(AOwner: TComponent); overload;

Internal function used to setup the account manager.
*)
procedure TAccountManagerPanel.Setup(AOwner: TComponent); overload;
begin
  Self.Setup(AOwner, 'Account Manager');

  with Self.AccountSelector do
  begin
    Init(Self.Panel);
    SetCaption('Current account:');
    SetLeft(Title.getLeft + 10);
    SetTop(Title.GetTop + Title.getHeight + 5);
    Combobox.setStyle(csDropDownList);
    SetWidth(250);
  end;

  with Self.AccountUser do
  begin
    Init(Self.Panel);
    SetCaption('Username:');
    SetLeft(Self.AccountSelector.GetLeft);
    SetTop(Self.AccountSelector.GetTop + Self.AccountSelector.GetHeight - 2);
    SetWidth(Self.AccountSelector.GetWidth);
  end;

  with Self.AccountPass do
  begin
    Init(Self.Panel);
    SetCaption('Password:');
    SetLeft(Self.AccountUser.GetLeft);
    SetTop(Self.AccountUser.GetTop + Self.AccountUser.GetHeight);
    SetWidth(150);
    Edit.setPasswordChar('*');
  end;

  with Self.AccountPin do
  begin
    Init(Self.Panel);
    SetCaption('Bank pin:');
    SetLeft(Self.AccountPass.GetLeft() + Self.AccountPass.GetWidth() + 10);
    SetTop(Self.AccountPass.GetTop());
    SetWidth((Self.AccountSelector.GetLeft() + Self.AccountSelector.GetWidth()) - GetLeft());
    Edit.setPasswordChar('*');
    Edit.setMaxLength(4);
    Edit.setOnKeyPress(@NumberField);
  end;

  with Self.AccountWorlds do
  begin
    Init(Self.Panel);
    SetCaption('Worlds (separated by commas):');
    SetLeft(Self.AccountSelector.GetLeft + Self.AccountSelector.GetWidth + 25);
    SetTop(Self.AccountSelector.GetTop);
    SetHeight(Self.AccountUser.GetTop - 3);
    SetWidth(Self.AccountUser.GetWidth);

    Memo.setOnKeyPress(@Self.WorldsKeyPress);
  end;

  with Self.AccountAddButton do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Add');
    SetLeft(Self.AccountWorlds.GetLeft + 40);
    SetTop(Self.AccountWorlds.GetTop + Self.AccountWorlds.GetHeight + 5);
    SetWidth(50);
  end;

  with Self.AccountSaveButton do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Save');
    SetLeft(Self.AccountAddButton.getLeft + Self.AccountAddButton.getWidth + 5);
    SetTop(Self.AccountAddButton.GetTop);
    SetWidth(50);
  end;

  with Self.AccountDeleteButton do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Delete');
    SetLeft(Self.AccountSaveButton.getLeft + Self.AccountSaveButton.getWidth + 5);
    SetTop(Self.AccountSaveButton.GetTop);
    SetWidth(50);
  end;
end;


(*
type TAntibanPanel
~~~~~~~~~~~~~~~~~~

Helper type to handle the Antiban panel.
*)
type
  TAntibanPanel = record(TLabeledPanel)
    AntibanState:         TCheckbox;
    BreaksState:          TCheckbox;
    SleepsState:          TCheckbox;

    AdvancedABButton:     TButton;
    AdvancedEnabled:      Boolean;
    HeightNeeded: Int32;
    HeightIsSetup: Boolean;

    ABCameraState:        TCheckbox;
    ABMouseState:         TCheckbox;
    ABChatState:          TCheckbox;
    ABGameTabsState:      TCheckbox;
    ABBankState:          TCheckbox;

    SleepHourEdit:        TLabeledEdit;
    SleepLengthEdit:      TLabeledEdit;
  end;

(*
AntibanPanel.AntibanStateOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAntibanPanel.AntibanStateOnChange(Sender: TObject);

Callback method used internally to react to **AntibanPanel.AntibanState** change.
*)
procedure TAntibanPanel.AntibanStateOnChange(Sender: TObject);
var
  Checked: Boolean;
begin
  Checked := Self.AntibanState.IsChecked;

  Self.ABCameraState.SetEnabled(Checked);
  Self.ABMouseState.SetEnabled(Checked);
  Self.ABChatState.SetEnabled(Checked);
  Self.ABGameTabsState.SetEnabled(Checked);
  Self.ABBankState.SetEnabled(Checked);
end;

(*
AntibanPanel.ShowAdvanced
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAntibanPanel.ShowAdvanced(Sender: TObject);

Callback method used internally to toggle the advanced section of the antiban panel.
*)
procedure TAntibanPanel.ShowAdvanced(Sender: TObject);
var
  Form: TForm;
begin
  Self.AdvancedEnabled := not Self.AdvancedEnabled;

  Self.ABCameraState.SetVisible(Self.AdvancedEnabled);
  Self.ABMouseState.SetVisible(Self.AdvancedEnabled);
  Self.ABChatState.SetVisible(Self.AdvancedEnabled);
  Self.ABGameTabsState.SetVisible(Self.AdvancedEnabled);
  Self.ABBankState.SetVisible(Self.AdvancedEnabled);
  Self.SleepHourEdit.SetVisible(Self.AdvancedEnabled);
  Self.SleepLengthEdit.SetVisible(Self.AdvancedEnabled);

  Form := Self.Panel.GetParent();

  if Self.AdvancedEnabled then
  begin
    if not Self.HeightIsSetup then
    begin
      if Form.GetHeight < 550 then
        Self.HeightNeeded := 550 - Form.GetHeight;

      Self.HeightIsSetup := True;
    end;

    UpdateFormSize(Form, Form.getWidth(), Form.getHeight() + Self.HeightNeeded);
    Self.AdvancedABButton.SetCaption('Show less');
  end
  else
  begin
    UpdateFormSize(Form, Form.getWidth, Form.getHeight() - Self.HeightNeeded);
    Self.AdvancedABButton.SetCaption('Show more');
  end;
end;

(*
AntibanPanel.Setup
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TAntibanPanel.Setup(AOwner: TComponent); overload;

Internal function used to setup the antiban panel.
*)
procedure TAntibanPanel.Setup(AOwner: TComponent); overload;
begin
  Self.Setup(AOwner, 'Antiban Settings');

  with Self.AntibanState do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Antiban');
    SetLeft(20);
    SetTop(35);
    SetChecked(AntibanEnabled);
    SetHint('Enable/Disable all antiban tasks.' +
            STR_NEW_LINE +
            'Antiban tasks are all antiban that are not sleep or breaks.' +
            STR_NEW_LINE +
            'This can include things like:' + STR_NEW_LINE +
            '- Random clicks' + STR_NEW_LINE +
            '- Camera movements, zoom' + STR_NEW_LINE +
            '- Etc.' + STR_NEW_LINE +
            'For a more details click "Show more".');
    ShowHint;
    SetOnChange(@Self.AntibanStateOnChange);
  end;

  with Self.BreaksState do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Short breaks');
    SetLeft(Self.AntibanState.GetLeft());
    SetTop(Self.AntibanState.getTop + Self.AntibanState.getHeight);
    SetChecked(BreaksEnabled);
    SetHint('Enable/Disable all short breaks.' + STR_NEW_LINE +
            'This are breaks that last anywhere from 1 minute to 1 hour.');
    ShowHint;
  end;

  with Self.SleepsState do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Sleep breaks');
    SetLeft(Self.AntibanState.GetLeft());
    SetTop(Self.BreaksState.getTop + Self.BreaksState.getHeight);
    SetChecked(SleepEnabled);
    SetHint('Enable/Disable all sleep breaks.' + STR_NEW_LINE +
            'This are breaks that last anywhere from 4 to 12 hours.');
    ShowHint;
  end;

  //Advanced antiban
  with Self.ABCameraState do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Camera');
    SetLeft(Self.AntibanState.GetLeft());
    SetTop(Self.SleepsState.getTop + Self.SleepsState.getHeight + 35);
    SetChecked(ABCamera);
    SetVisible(False);
    SetHint('Enable/Disable all camera antiban.' + STR_NEW_LINE +
            'This can move your camera angle and/or change your zoom.');
    ShowHint;
  end;

  with Self.ABMouseState do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Mouse');
    SetLeft(Self.AntibanState.GetLeft());
    SetTop(Self.ABCameraState.getTop + Self.ABCameraState.getHeight);
    SetChecked(ABMouse);
    SetVisible(False);
    SetHint('Enable/Disable all mouse antiban.' + STR_NEW_LINE +
            'This can move your mouse and do random clicks,' + STR_NEW_LINE +
            'usually right clicks to not mess things up.');
    ShowHint;
  end;

  with Self.ABChatState do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Chat');
    SetLeft(Self.AntibanState.GetLeft());
    SetTop(Self.ABMouseState.getTop + Self.ABMouseState.getHeight);
    SetChecked(ABChat);
    SetVisible(False);
    SetHint('Enable/Disable all chat antiban.' + STR_NEW_LINE +
            'This can click the chat buttons, toggle them and scroll the chat.');
    ShowHint;
  end;

  with Self.ABGameTabsState do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Gametabs');
    SetLeft(Self.AntibanState.GetLeft());
    SetTop(Self.ABChatState.getTop + Self.ABChatState.getHeight);
    SetChecked(ABGameTabs);
    SetVisible(False);
    SetHint('Enable/Disable all gametabs antiban.' + STR_NEW_LINE +
            'This can open/toggle the gametabs, hover skills, etc.');
    ShowHint;
  end;

  with Self.ABBankState do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Bank');
    SetLeft(Self.AntibanState.GetLeft());
    SetTop(Self.ABGameTabsState.getTop + Self.ABGameTabsState.getHeight);
    SetChecked(ABBank);
    SetVisible(False);
    SetHint('Enable/Disable all bank antiban.' + STR_NEW_LINE +
            'This can toggle the banktabs, hover and/or click random items in the bank, etc.');
    ShowHint;
  end;

  with Self.SleepHourEdit do
  begin
    Init(Self.Panel);
    SetCaption('Aprox sleep time' + STR_NEW_LINE + '(HH:MM:SS):');
    SetTop(Self.ABBankState.getTop + Self.ABBankState.getHeight);
    Edit.SetTop(Edit.GetTop + 15);
    SetLeft(Self.AntibanState.GetLeft());
    SetWidth(100);
    SetText(SleepHour);
    SetVisible(False);
  end;

  with Self.SleepLengthEdit do
  begin
    Init(Self.Panel);
    SetCaption('Aprox sleep length:');
    SetLeft(Self.AntibanState.GetLeft());
    SetTop(Self.SleepHourEdit.getTop + Self.SleepHourEdit.getHeight + 20);
    SetWidth(100);
    SetText(ToStr(SleepLength / ONE_HOUR));
    SetVisible(False);
  end;

  with Self.AdvancedABButton do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Show more');
    SetAlign(alBottom);
    SetWidth(100);
    SetHeight(26);
    setOnClick(@Self.ShowAdvanced);
  end;
end;


(*
type TRemoteInputPanel
~~~~~~~~~~~~~~~~~~~~~~

Helper type to handle the RemoteInput panel.
*)
type
  TRemoteInputPanel = record(TLabeledPanel)
    State:     TCheckbox;
    RealInput: TCheckbox;
    HUD:       TCheckbox;
    Debug:     TCheckbox;
  end;

(*
RemoteInputPanel.StateOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRemoteInputPanel.StateOnChange(Sender: TObject);

Callback method used internally to react to **RemoteInputPanel.State** change.
*)
procedure TRemoteInputPanel.StateOnChange(Sender: TObject);
var
  Checked: Boolean;
begin
  Checked := Self.State.IsChecked;

  Self.RealInput.SetEnabled(Checked);
  Self.HUD.SetEnabled(Checked);
  Self.Debug.SetEnabled(Checked);
end;

(*
RemoteInputPanel.HUDOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRemoteInputPanel.HUDOnChange(Sender: TObject);

Callback method used internally to react to **RemoteInputPanel.HUD** change.
*)
procedure TRemoteInputPanel.HUDOnChange(Sender: TObject);
begin
  if Self.HUD.IsChecked then
    Self.Debug.SetChecked(False);
end;

(*
RemoteInputPanel.DebugOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRemoteInputPanel.DebugOnChange(Sender: TObject);

Callback method used internally to react to **RemoteInputPanel.Debug** change.
*)
procedure TRemoteInputPanel.DebugOnChange(Sender: TObject);
begin
  if Self.Debug.IsChecked then
    Self.HUD.SetChecked(False);
end;

(*
RemoteInputPanel.Setup
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRemoteInputPanel.Setup(AOwner: TComponent); overload;

Internal function used to setup the remote input panel.
*)
procedure TRemoteInputPanel.Setup(AOwner: TComponent); overload;
begin
  Self.Setup(AOwner, 'Remote Input Settings');

  with Self.State do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Remote Input');
    SetChecked(RemoteInputEnabled);
    setOnChange(@Self.StateOnChange);
    SetTop(Self.Panel.GetTop() + 25);
    SetLeft(Self.Panel.GetLeft() + 15);
    SetHint('Enable/Disable Remote Input.' +
            STR_NEW_LINE +
            'Remote Input is a virtual mouse that allows you to bot while you use your real mouse.' +
            STR_NEW_LINE +
            'As far as we know this is not detected, but could be in the future.'+
            STR_NEW_LINE +
            'Use are your OWN RISK!');
    ShowHint();
  end;

  with Self.RealInput do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Disable Input');
    SetChecked(BlockRealInput);
    SetTop(Self.Panel.GetTop() + 25);
    SetLeft(Self.State.GetLeft() + Self.State.GetWidth() + 15);
    SetHint('Enable/Disable User Input.' +
            STR_NEW_LINE +
            'This disables your input in the game until you' +
            STR_NEW_LINE +
            'pause or terminate the script.');
    ShowHint();
  end;

  with Self.HUD do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('HUD report');
    SetChecked(ProgressReportEnabled);
    SetOnChange(@Self.HUDOnChange);
    SetTop(Self.Panel.GetTop() + 25);
    SetLeft(Self.RealInput.GetLeft() + Self.RealInput.GetWidth() + 15);
    SetHint('Enable/Disable the HUD report.' +
            STR_NEW_LINE +
            'HUD report is the in-game progress report, also' +
            STR_NEW_LINE +
            'called paint sometimes.');
    ShowHint();
  end;

  with Self.Debug do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetCaption('Debug script');
    SetChecked(ScriptDebugEnabled);
    SetOnChange(@Self.DebugOnChange);
    SetTop(Self.Panel.GetTop() + 25);
    SetLeft(Self.HUD.GetLeft() + Self.HUD.GetWidth() + 15);
    SetHint('Enable/Disable the Script Debugging.' +
            STR_NEW_LINE +
            'This will paint/draw on screen critical things' +
            STR_NEW_LINE +
            'that Simba is looking for.');
    ShowHint();
  end;
end;


(*
type TConsumablePanel
~~~~~~~~~~~~~~~~~~~~~

Helper type to handle the consumable panels.
*)
type
  TConsumablePanel = record
    ConsumableType: ERSConsumable;
    Panel: TPanel;
    MinPoints: TLabeledEdit;
    ConsumableAmount: TLabeledEdit;
    ConsumableSelector: TLabeledCombobox;
    IsSetup: Boolean;
  end;

(*
TConsumablePanel.SelectorOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TConsumablePanel.SelectorOnChange(Sender: TObject);

TODO..... I just noticed I forgot to change this while I copy pasted stuff lol....
*)
procedure TConsumablePanel.SelectorOnChange(Sender: TObject);
begin
  //TODO!!!! THIS IS A PLACEHOLDER!
  CurrentBankLocation := EWLBankLocation(
                           BANK_LOCATION_ARRAY.IndexOf(
                            TComboBox(Sender).GetText()));
end;

(*
TConsumablePanel.Setup
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TConsumablePanel.Setup(AOwner: TComponent; ConsumableType: ERSConsumable; UseBank: Boolean);

Method used to setup a TConsumablePanel panel. Check **ERSConsumable** to know which types of TConsumablePanel you can create.
*)
procedure TConsumablePanel.Setup(AOwner: TComponent; ConsumableType: ERSConsumable; UseBank: Boolean);
var
  Str, Str1, Str2: String;
  Item: TRSItem;
  ConsumableArray: TStringArray;
begin
  Self.ConsumableType := ConsumableType;

  case ConsumableType of
    FOOD_CONSUMABLE:
      begin
        Str1 := 'health';
        Str2 := 'Food';
        for Item in FOOD_ARRAY do
          ConsumableArray += ToStr(Item);
      end;

    PRAYER_CONSUMABLE:
      begin
        Str1 := 'prayer';
        Str2 := 'Potion';
        for Item in PRAYER_ARRAY do
          ConsumableArray += ToStr(Item);
      end;

    ENERGY_CONSUMABLE:
      begin
        Str1 := 'run energy';
        Str2 := 'Potion';
        for Item in ENERGY_ARRAY do
          ConsumableArray += ToStr(Item);
      end;

    BOOST_CONSUMABLE:
      begin
        Str1 := 'time (in minutes)';
        Str2 := 'Potion';
        for Item in BOOST_ARRAY do
          ConsumableArray += ToStr(Item);
      end;
  end;

  with Self.Panel do
  begin
    Init(AOwner);
    SetParent(AOwner);
    SetAlign(alTop);
    SetHeight(60);
    SetBevelWidth(0);
  end;

  with Self.MinPoints do
  begin
    Init(Self.Panel);
    SetCaption('Minimum ' + Str1 + ':');
    SetLeft(20);
    SetTop(5);
    SetWidth(110);
    SetText('50');
    Edit.setOnKeyPress(@NumberField);
  end;

  with Self.ConsumableAmount do
  begin
    Init(Self.Panel);
    SetCaption(Str2 + ' amount:');
    SetLeft(150);
    SetTop(5);
    SetWidth(110);
    SetText('8');
    SetVisible(UseBank);
    Edit.setOnKeyPress(@NumberField);
  end;

  with Self.ConsumableSelector do
  begin
    Init(Self.Panel);
    SetCaption(Str2 + ' type:');
    SetLeft(275);
    SetTop(5);
    SetWidth(150);
    Combobox.setStyle(csDropDownList);
    for Str in ConsumableArray do
      AddItem(Str);
    Combobox.SetOnChange(@Self.SelectorOnChange);
  end;

  Self.IsSetup := True;
end;


(*
type TWaspLibPanel
~~~~~~~~~~~~~~~~~~

Helper type to handle the WaspLib panel.
*)
type
  TWaspLibPanel = record(TLabeledPanel)
    MainPanel: TPanel;

    FoodPanel: TConsumablePanel;
    PrayerPanel: TConsumablePanel;

    BankPanel: TPanel;
      BankSelector: TLabeledCombobox;
    LimitPanel: TPanel;
      ActionLimit: TLabeledEdit;
      TimeLimit: TLabeledEdit;

    StartButton: TButton;
  end;

(*
WaspLibPanel.BankSelectorOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TWaspLibPanel.BankSelectorOnChange(Sender: TObject);

Callback method used internally to react to **WaspLibPanel.BankSelector** change.
Basically is what updated the global variable **CurrentBankLocation**.
*)
procedure TWaspLibPanel.BankSelectorOnChange(Sender: TObject);
begin
  CurrentBankLocation := EWLBankLocation(
                           BANK_LOCATION_ARRAY.IndexOf(
                             Self.BankSelector.Combobox.getText));
end;

(*
WaspLibPanel.Setup
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TWaspLibPanel.Setup(AOwner: TComponent; UseFood, UsePrayer, UseBank: Boolean = False); overload;

Method used to setup the WaspLib panel.
Optionally you can pass boolean values to UseFood, UsePrayer, UseBank to make extra panels visible.
*)
procedure TWaspLibPanel.Setup(AOwner: TComponent; UseFood, UsePrayer, UseBank: Boolean = False); overload;
var
  PanelCount: Int32 = 1;
  Str: String;
  size: TSizeConstraints;
begin
  Self.Setup(AOwner, 'WaspLib Settings');

  with Self.MainPanel do
  begin
    Init(Self.Panel);
    SetParent(Self.Panel);
    SetAlign(alClient);
    SetBevelWidth(0);
  end;

  with Self.LimitPanel do
  begin
    Init(Self.MainPanel);
    SetParent(Self.MainPanel);
    SetAlign(alTop);
    SetHeight(60);
    SetBevelWidth(0);
    PanelCount += 1;

    with Self.ActionLimit do
    begin
      Init(Self.LimitPanel);
      SetCaption('Stop after (number of actions):');
      SetLeft(Self.LimitPanel.getLeft + 35);
      SetTop(Self.LimitPanel.GetTop() + 10);
      SetWidth(165);
      SetText(ToStr(MaxActions));
      Edit.setOnKeyPress(@NumberField);
    end;

    with Self.TimeLimit do
    begin
      Init(Self.LimitPanel);
      SetCaption('Stop after (time in minutes):');
      SetTop(Self.ActionLimit.GetTop());
      SetLeft(Self.ActionLimit.getLeft() + Self.ActionLimit.GetWidth() + 55);
      SetWidth(150);
      SetText(ToStr(MaxTime));
      Edit.setOnKeyPress(@NumberField);
    end;
  end;

  with Self.BankPanel do
  begin
    Init(Self.MainPanel);
    SetParent(Self.MainPanel);
    SetAlign(alTop);
    SetHeight(60);
    SetBevelWidth(0);
    if UseBank then
      PanelCount += 1
    else
      SetVisible(False);

    with Self.BankSelector do
    begin
      Init(Self.BankPanel);
      SetCaption('Bank location:');
      SetLeft(Round(Self.BankPanel.GetWidth()/2) + 50);
      SetTop(10);
      SetWidth(200);
      Combobox.setStyle(csDropDownList);
      for Str in BANK_LOCATION_ARRAY do
        AddItem(Str);
      Combobox.setItemIndex(Ord(CurrentBankLocation));
      Combobox.SetOnChange(@Self.BankSelectorOnChange);
    end;
  end;

  with Self.FoodPanel do
  begin
    Setup(Self.MainPanel, FOOD_CONSUMABLE, UseBank);

    if UseFood then
      PanelCount += 1
    else
      Self.FoodPanel.Panel.SetVisible(False);
  end;

  with Self.PrayerPanel do
  begin
    Setup(Self.MainPanel, PRAYER_CONSUMABLE, UseBank);

    if UsePrayer then
      PanelCount += 1
    else
      Self.PrayerPanel.Panel.SetVisible(False);
  end;

  with Self.StartButton do
  begin
    Init(Self.MainPanel);
    SetParent(Self.MainPanel);
    SetCaption('Start Script!');
    SetAlign(alBottom);
  end;

  Self.SetHeight(60 * PanelCount);
end;


(*
type TScriptForm
~~~~~~~~~~~~~~~~

Main type to handle Script forms.
This uses all the previous helper types as sort of plugins that can be setup or not as the user wishes.
*)
type
  TScriptForm = record
    Form: TForm;

    AMPanel: TAccountManagerPanel;

    ABPanel: TAntibanPanel;

    MainPanel: TPanel;
    RIPanel: TRemoteInputPanel;
    SSPanel: TLabeledPanel;
    WLPanel: TWaspLibPanel;
  end;

(*
ScriptForm.ReloadSelector
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.ReloadSelector(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountSelector** change.
*)
procedure TScriptForm.ReloadSelector(Sender: TObject);
var
  Player: TRSLoginPlayer;
  HasPlayers: Boolean;
begin
  Self.AMPanel.AccountSelector.Clear;

  HasPlayers := Login.Players <> [];

  Self.AMPanel.AccountSelector.Combobox.SetEnabled(HasPlayers);
  Self.AMPanel.AccountSaveButton.SetEnabled(HasPlayers);
  Self.AMPanel.AccountDeleteButton.SetEnabled(HasPlayers);

  for Player in Login.Players do
    Self.AMPanel.AccountSelector.AddItem(Player.User);

  if HasPlayers then
    Self.AMPanel.AccountSelector.SetItemIndex(Login.PlayerIndex);
end;


(*
ScriptForm.OnAddClick
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.OnAddClick(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountAddButton** click.
Due to the design of TScriptForm this has to be included here instead of TAccountManagerPanel.
*)
procedure TScriptForm.OnAddClick(Sender: TObject);
var
  Worlds: TIntegerArray;
  Str: String;
  Ext: Extended;
begin
  if Self.AMPanel.AccountUser.GetText().Strip() = '' then
  begin
    Self.AMPanel.ClearInputs(Sender);
    Exit;
  end;

  Str := Self.AMPanel.AccountWorlds.GetText();
  for Ext in Str.ExtractNumbers() do
    Worlds += Round(Ext);

  Login.Players += [Self.AMPanel.AccountUser.GetText(), Self.AMPanel.AccountPass.GetText(), Self.AMPanel.AccountPin.GetText(), Worlds];
  Login.PlayerIndex := High(Login.Players);

  RewriteCredentials();
  Self.ReloadSelector(Sender);
  Self.SelectorOnChange(Sender);
end;

(*
ScriptForm.OnSaveClick
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.OnSaveClick(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountSaveButton** click.
Due to the design of TScriptForm this has to be included here instead of TAccountManagerPanel.
*)
procedure TScriptForm.OnSaveClick(Sender: TObject);
var
  Worlds: TIntegerArray;
  Str: String;
  ExtArray: TExtendedArray;
  Ext: Extended;
  Idx: Int32;
begin
  if Self.AMPanel.AccountUser.GetText().Strip() = '' then
  begin
    Self.AMPanel.ClearInputs(Sender);
    Exit;
  end;

  Idx := Self.AMPanel.AccountSelector.getItemIndex();
  if Idx > High(Login.Players) then
  begin
    Self.OnAddClick(Sender);
    Exit;
  end;

  Str := Self.AMPanel.AccountWorlds.GetText();
  ExtArray := Str.ExtractNumbers();
  for Ext in ExtArray do
    Worlds += Round(Ext);

  if Idx = -1 then
    Login.Players += [Self.AMPanel.AccountUser.GetText(), Self.AMPanel.AccountPass.GetText(), Self.AMPanel.AccountPin.GetText(), Worlds]
  else
    Login.Players[Idx] := [Self.AMPanel.AccountUser.GetText(), Self.AMPanel.AccountPass.GetText(), Self.AMPanel.AccountPin.GetText(), Worlds];

  RewriteCredentials();
  Self.ReloadSelector(Sender);
end;

(*
ScriptForm.OnDeleteClick
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.OnDeleteClick(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountDeleteButton** click.
Due to the design of TScriptForm this has to be included here instead of TAccountManagerPanel.
*)
procedure TScriptForm.OnDeleteClick(Sender: TObject);
var
  Idx: Int32;
begin
  Idx := Self.AMPanel.AccountSelector.getItemIndex();

  if Idx > High(Login.Players) then
    Exit;
  Delete(Login.Players, Idx, 1);
  Login.PlayerIndex -= 1;


  Self.AMPanel.ClearInputs(Sender);

  RewriteCredentials;
  Self.ReloadSelector(Sender);
  Self.SelectorOnChange(Sender);
end;

(*
ScriptForm.SelectorOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.SelectorOnChange(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountSelector** change.
Due to the design of TScriptForm this has to be included here instead of TAccountManagerPanel.
*)
procedure TScriptForm.SelectorOnChange(Sender: TObject);
var
  Idx: Int32;
begin
  Idx := Self.AMPanel.AccountSelector.GetItemIndex();
  if Idx = -1 then
  begin
    Login.PlayerIndex := 0;
    Self.AMPanel.ClearInputs(Sender);
  end
  else if (Idx > High(Login.Players)) then
  begin
    Login.PlayerIndex := Idx;
    Self.AMPanel.ClearInputs(Sender);
  end
  else
  begin
    Login.PlayerIndex := Idx;
    Self.AMPanel.FillInputs(Sender);
  end;

  Antiban.SetupBiometrics;
  Antiban.SetSleepHour;
  Antiban.SetSleepLength;

  if Self.ABPanel.SleepHourEdit.IsInitiated then
    Self.ABPanel.SleepHourEdit.SetText(SleepHour);
  if Self.ABPanel.SleepLengthEdit.IsInitiated then
    Self.ABPanel.SleepLengthEdit.SetText(ToStr(SleepLength / ONE_HOUR));
end;


(*
ScriptForm.SelectorKey
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.SelectorKey(Sender: TObject; var Key: char);

TODO: forgot what this was for lol........ keyboard input? idk... might delete.
*)
procedure TScriptForm.SelectorKey(Sender: TObject; var Key: char);
begin
  Key := #0;
  Self.SelectorOnChange(Sender);
end;


(*
ScriptForm.Setup
~~~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.Setup(UseFood, UsePrayer, UseBank: Boolean);
.. pascal:: procedure TScriptForm.Setup(); overload;

Methods used to setup the a TScriptForm. Can be optionally be passed in booleans to toggle on/off some panels.
*)
procedure TScriptForm.Setup(UseFood, UsePrayer, UseBank: Boolean); //override me to add stuff!
var
  PanelCount: Int32 = 1;
begin
  if UseFood then
    PanelCount += 1;
  if UsePrayer then
    PanelCount += 1;
  if UseBank then
    PanelCount += 1;

  with Self.Form do
  begin
    Init(nil);
    SetCaption('Script Configuration');
    SetWidth(650);
    SetHeight(390 + 60 * PanelCount);
    SetPosition(poScreenCenter);
  end;

  //Setup account manager
  Self.AMPanel.Setup(Self.Form);
  Self.AMPanel.SetAlign(alTop);
  Self.AMPanel.SetHeight(160);
  Self.AMPanel.AccountSelector.Combobox.SetOnChange(@Self.SelectorOnChange);
  Self.AMPanel.AccountSaveButton.setOnClick(@Self.OnSaveClick);
  Self.AMPanel.AccountAddButton.setOnClick(@Self.OnAddClick);
  Self.AMPanel.AccountDeleteButton.setOnClick(@Self.OnDeleteClick);

  Self.ReloadSelector(Self.AMPanel.AccountSelector.Combobox);
  Self.SelectorOnChange(Self.AMPanel.AccountSelector.Combobox);

  //Setup antiban panel
  Self.ABPanel.Setup(Self.Form);
  Self.ABPanel.SetAlign(alLeft);

  Self.MainPanel.Init(Self.Form);
  Self.MainPanel.SetParent(Self.Form);
  Self.MainPanel.SetAlign(alClient);

  //Setup Remote Input settings
  Self.RIPanel.Setup(Self.MainPanel);
  Self.RIPanel.SetAlign(alTop);

  //Setup script settings
  Self.SSPanel.Setup(Self.MainPanel, 'Script Settings');
  Self.SSPanel.SetAlign(alClient);

  //WL settings
  Self.WLPanel.Setup(Self.MainPanel, UseFood, UsePrayer, UseBank);
  Self.WLPanel.SetAlign(alBottom);

  //override me to add stuff!
end;

procedure TScriptForm.Setup(); overload; //override me to add stuff!
begin
  Self.Setup(False, False, False);
end;

(*
ScriptForm.Init
~~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.Init(Sender: TObject);

Method used to load the variables set in the Script form to be used by our script.
Unless you are using a vanilla form it's likely you will want to override this.
*)
procedure TScriptForm.Init(Sender: TObject); //override me to add stuff!
begin
  AntibanEnabled := Self.ABPanel.AntibanState.IsChecked;
  BreaksEnabled  := Self.ABPanel.BreaksState.IsChecked;
  SleepEnabled   := Self.ABPanel.SleepsState.IsChecked;

  ABCamera   := Self.ABPanel.ABCameraState.IsChecked;
  ABMouse    := Self.ABPanel.ABMouseState.IsChecked;
  ABChat     := Self.ABPanel.ABChatState.IsChecked;
  ABGameTabs := Self.ABPanel.ABGameTabsState.IsChecked;
  ABBank     := Self.ABPanel.ABBankState.IsChecked;

  SleepHourOverride := Self.ABPanel.SleepHourEdit.GetText;
  WriteLn SRL.TimeStamp + ':[Config]: Aprox sleep hour: ' + SleepHourOverride;
  SleepLengthOverride := StrToFloat(Self.ABPanel.SleepLengthEdit.GetText);
  WriteLn SRL.TimeStamp + ':[Config]: Aprox sleep length: ' + ToStr(SleepLengthOverride);

  RemoteInputEnabled    := Self.RIPanel.State.IsChecked();
  BlockRealInput        := Self.RIPanel.RealInput.IsChecked();
  ProgressReportEnabled := (Self.RIPanel.HUD.IsChecked()) and
                           (not Self.RIPanel.Debug.IsChecked());
  ScriptDebugEnabled    := Self.RIPanel.Debug.IsChecked();

  MaxActions := StrToInt(Self.WLPanel.ActionLimit.GetText());
  if StrToInt64(Self.WLPanel.TimeLimit.Edit.GetText()) > 0 then
    MaxTime := StrToInt64(Self.WLPanel.TimeLimit.Edit.GetText()) * 60 * 1000;

  Self.Form.Close();
  Writeln('Script starting...');

  //override me to add stuff!
end;

(*
ScriptForm.Run
~~~~~~~~~~~~~~
.. pascal:: procedure TScriptForm.Run();

Method used to run the TScriptForm.
This is meant to be overriden and call **TScriptForm.Setup()**.
The reason it doesn't call it already is because users are likely to modify
TScriptForm to their needs and **TScriptForm.Setup()** needs to be called
in the user script to load his changes.

Example
-------
  type
    TConfig = record(TScriptForm)
      Str: String;
    end;

  procedure TConfig.StartScript(Sender: TObject);
  begin
    Self.Init(Sender);

    MaxActions := StrToInt(Self.WLPanel.ActionLimit.GetText());
    MaxTime    := StrToInt64(Self.WLPanel.TimeLimit.GetText());
  end;

  procedure TConfig.Setup; override;
  begin
    inherited;

    Str := 'Hello world';

    Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
  end;

  procedure TConfig.Run; override;
  begin
    Self.Setup();  //Load your overriden TScriptForm.Setup()

    inherited;     //Call this TScriptForm.Run() to display the form.
  end;
*)
procedure TScriptForm.Run();
begin
  try
    Self.Form.ShowModal();
    Self.Form.Free();
  except
    Writeln(GetExceptionMessage());
  end;
end;

{$H+}
