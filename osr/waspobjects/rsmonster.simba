(*
RSMonters
=========
Methods to handle TRSMonters.
TRSMonters are a type or TRSNPC that can be fought.
*)

{$DEFINE WL_RSMONSTER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

var
  ValueThreshold: Int32;

type
  TRSMonster = record(TRSMMDot)
    MonsterName: String;
    Hitpoints: Int32;
    MaxHit: Int32;
    AttackTypes: TStringArray;
    Drops: TRSItemArray;
    AlchableDrops: TRSItemArray;
    GoodDrops: TRSItemArray;
    LootGItem: TRSGroundItem;
  end;

  TRSMonsterArray = array of TRSMonster;
  PRSMonster = ^TRSMonster;
  PRSMonsterArray = array of PRSMonster;

procedure TRSMonster.SetupCommon(Name: String); overload;
var
  MonsterInfo: TRSMonsterInfo;
  i: Int32;
begin
  MonsterName := Name;
  Self.SetupCommon;
  MonsterInfo.Setup(MonsterName);

  Name := Name.Lower;
  Name[1] := UpperCase(Name[1])[1];

  UpText += Name;

  Hitpoints := MonsterInfo.Hitpoints;
  MaxHit := MonsterInfo.MaxHit;
  ShapeArray := [[[], [MonsterInfo.Size/2, MonsterInfo.Size/2, 0]]];
  AttackTypes := MonsterInfo.AttackTypes;

  ValueThreshold := 10000;

  for i := 0 to High(MonsterInfo.DropIDs) do
    Drops += MonsterInfo.DropIDs[i];

  for i := 0 to High(Drops) do
    if ItemInfo.GetAveragePrice(Drops[i]) >= ValueThreshold then
      GoodDrops += Drops[i];

  for i := 0 to High(Drops) do
    if ItemInfo.GetHighAlchemyProfit(Drops[i]) > 500 then
      AlchableDrops += Drops[i];

  for i := 0 to High(AlchableDrops) do
    if GoodDrops.Find(AlchableDrops[i]) < 0 then
        GoodDrops += AlchableDrops[i];

  for i := 0 to High(MonsterInfo.NotedDrops) do
    if GoodDrops.Find(MonsterInfo.NotedDrops[i]) < 0 then
      GoodDrops += MonsterInfo.NotedDrops[i];

  LootGItem.SetupCommon;
  LootGItem.Filter.Finder := False;

  for i := 0 to High(GoodDrops) do
    LootGItem.UpText += MonsterInfo.DropStrings[Drops.Find(GoodDrops[i])];
end;

procedure TRSMonster.ResetGoodDrops;
var
  MonsterInfo: TRSMonsterInfo;
  i: Int32;
begin
  GoodDrops := [];
  LootGItem := [];
  MonsterInfo.Setup(MonsterName);

  for i := 0 to High(MonsterInfo.DropIDs) do
    Drops += MonsterInfo.DropIDs[i];

  for i := 0 to High(Drops) do
    if ItemInfo.GetAveragePrice(Drops[i]) >= ValueThreshold then
      GoodDrops += Drops[i];

  for i := 0 to High(Drops) do
    if ItemInfo.GetHighAlchemyProfit(Drops[i]) > 500 then
      if GoodDrops.Find(Drops[i]) < 0 then
        GoodDrops += Drops[i];

  for i := 0 to High(MonsterInfo.NotedDrops) do
    if GoodDrops.Find(MonsterInfo.NotedDrops[i]) < 0 then
      GoodDrops += MonsterInfo.NotedDrops[i];

  LootGItem.SetupCommon;
  LootGItem.Filter.Finder := False;

  for i := 0 to High(GoodDrops) do
    LootGItem.UpText += MonsterInfo.DropStrings[Drops.Find(GoodDrops[i])];
end;

function TRSMonster.CheckLoot(B: TBox): Boolean;
var
  Str: String;
begin
  Mouse.Move(B);

  if not MainScreen.IsUpText('Take') then
    Exit;

  ChooseOption.Open;
  if not ChooseOption.HasOption(LootGItem.UpText) then
    Exit;

  for Str in LootGItem.UpText do
  begin
    if Inventory.IsFull then
    begin
      if (not Str.Contains('noted') or not Inventory.FindItem(Str)) then
        Continue;
      //TODO! EAT OR DROP SOMETHING!
    end;

    ChooseOption.Select(Str.After('noted '));
  end;
end;
