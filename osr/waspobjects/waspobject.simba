(*
WaspObjects
===========
Methods to handle TWaspObjects.
TWaspObjects can be anything that have a shape in the mainscreen.
They are divided in 2 main categories and one of them in 3 sub-categories:
  - RSObjects
  - MMDots:
    -RSNPCs
    -RSGroundItems
    -RSPlayers
*)

{$DEFINE WL_WASPOBJECT_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
(*
type TRSObjectShape
~~~~~~~~~~~~~~~~~~~

TRSObjectShape is the record used in **TWaspObject.ShapeArray** which is an array of TRSObjectShape.
This record holds information about the shape of a TWaspObject

* **TRSObjectShape.TileArray**

  TileArray is a TPointArray holding the tiles of a TWaspObject with **specific Size**. Multiple sized TWaspObjects, e.g. TWaspObjects that are oriented differently throught runescape should be set separately in **TWaspObject.ShapeArray**.

* **TRSObjectShape.TileVector**

  TileVector is a Vector3 type holding the information about the size and orientation of a TWaspObject. Multiple sized TWaspObjects, e.g. TWaspObjects that are oriented differently throught runescape should be set separately in **TWaspObject.ShapeArray**.

  TileVector has 3 variables:
    - **X** ( Number of tiles the TWaspObject takes from **West** to **East** )
    - **Y** ( Number of tiles the TWaspObject takes from **North** to **South** )
    - **Z** ( Height of the TWaspObject from the **Floor** to it's **Top**. This value cannot be measured and has to be guessed by trial and error, for reference, a Player or a human NPC height is about **6** )
*)

  TRSObjectShape = record
    TileArray: TPointArray;
    TileVector: Vector3;
  end;

(*
type TRSObjectFilter
~~~~~~~~~~~~~~~~~~~~

TRSObjectFilter is the record used in **TWaspObject.Filter**. This record is used to enable or disable functionality from TWaspObjects.

    MinimapDot: Boolean;
    Finder: Boolean;
    UpText: Boolean;

* **TRSObjectShape.Walker**

  Walker enables/disables TRSWalker for the given TWaspObject.
  When enabled TWaspObjects will use TRSWalker to get the TWaspObject tiles and will then search those tiles for the TWaspObject.
  It's the most accurate way to use TWaspObject but also the slowest. In cases TRSWalker is not needed, it should be disabled for maximum performance.

  Usage
  -----
  .. pascal::

     WaspObject.Filter.Walker := False;
*)

  TRSObjectFilter = record
    Walker: Boolean;
    MinimapDot: Boolean;
    Finder: Boolean;
    UpText: Boolean;
  end;

(*
type TWaspObject
~~~~~~~~~~~~~~~~~~~~

TWaspObject is the base record used by **TRSObjects and TRSMMDots**.

* **TWaspObject.Walker**

  Variable holding a **PRSWalker** pointer.

  Usage
  -----
  .. pascal::

     WaspObject.Walker := @RSW;

* **TWaspObject.ShapeArray**

  ShapeArray holds an array of **TRSObjectShape**.
  You can add as many TRSObjectShape as you want but in reality you should never need more than 2 shapes, one for vertical (north/south) oriented objects and another for horizontal (west/east) oriented ones.

* **TWaspObject.TileArray**

  TileArray holds a **TPointArray**.
  This array should contain all the TPoints stores in every TRSObjectShape.TileArray in TWaspObject.ShapeArray.
  This variable exists so Walker can refer to the TWaspObject location.

  Setup example
  -------------
  .. pascal::

     for i := 0 to High(ShapeArray) do
       TileArray.Extend(ShapeArray[i].TileArray);

* **TWaspObject.Finder**

  Finder holds a **TRSObjectFinder**.
  It is used to find the TWaspObject on the mainscreen.
  For more information refer to: https://ollydev.github.io/SRL-Development/mainscreen.html#type-trsobjectfinder

* **TWaspObject.UpText**

  UpText holds a **TStringArray** with strings of the TWaspObject up text.

  Usage
  -----
  .. pascal::

     WaspObject.UpText := ['Banker'];
     Writeln MainScreen.IsUpText(WaspObject.UpText);

* **TWaspObject.Filter**

  Filter holds a **TRSObjectFilter**.
  For more information: https://torwent.github.io/WaspLib/waspobject.html#type-trsobjectfilter
*)

  TWaspObject = record
    Walker: PRSWalker;
    ShapeArray: array of TRSObjectShape;
    TileArray: TPointArray;
    Finder: TRSObjectFinder;
    UpText: TStringArray;
    Filter: TRSObjectFilter;
  end;

  TWaspObjectArray = array of TWaspObject;
  PWaspObject = ^TWaspObject;
  PWaspObjectArray = array of PWaspObject;
(*
type TRSObject
~~~~~~~~~~~~~~~~~~~~

TRSObject is a **TWaspObject** specific for objects that do not have a minimap dot.
They can be used for objects with a minimap dot that do not move but **TRSMMDot** gives you more flexibility for those.
*)

  TRSObject = type TWaspObject;
  TRSObjectArray = array of TRSObject;
  PRSObject = ^TRSObject;
  PRSObjectArray = array of PRSObject;

(*
type TRSMMDot
~~~~~~~~~~~~~~~~~~~~

TRSMMDot is a **TWaspObject** specific for objects that have a minimap dot.
There's 3 types of TRSMMDot:
  - TRSNPC
  - TRSGroundItem
  - TRSPlayer

Each one made to handle each type of TRSMMDot.
*)

  TRSMMDot = record(TWaspObject)
    TileRadius: Int32;
    DotType: ERSMinimapDot;
  end;

  TRSNPC = type TRSMMDot;
  TRSNPCArray = array of TRSNPC;
  PRSNPC = ^TRSNPC;
  PRSNPCArray = array of PRSNPC;

  TRSGroundItem = record(TRSMMDot)
    Item: TRSItem;
    Value: Int32;
    HighAlch: Int32;
  end;

  TRSGroundItemArray = array of TRSGroundItem;
  PRSGroundItem = ^TRSGroundItem;
  PRSGroundItemArray = array of PRSGroundItem;

  TRSPlayer = type TRSMMDot;
  TRSPlayerArray = array of TRSPlayer;
  PRSPlayer = ^TRSPlayer;
  PRSPlayerArray = array of PRSPlayer;


function MakeShape(TileVector: Vector3; TileArray: TPointArray): TRSObjectShape;
begin
  Result := [TileArray, TileVector];
end;

procedure TWaspObject.SetupCommon;
begin
  Finder.ClusterDistance := 3;
  Finder.Erode := 2;
  Finder.Grow := 4;

  Filter.Finder := True;
  Filter.UpText := True;
end;

procedure TRSObject.SetupCommon(PWalker: PRSWalker; Height: Double; ObjTileArray: TPointArray); overload;
begin
  Walker := PWalker;

  TileArray := ObjTileArray;
  ShapeArray := [[ObjTileArray, [1, 1, Height]]];
  Filter.Walker := True;
end;

procedure TRSObject.SetupCommon(PWalker: PRSWalker; Size, Height: Double; ObjTileArray: TPointArray); overload;
begin
  Walker := PWalker;
  TileArray := ObjTileArray;
  ShapeArray := [[ObjTileArray, [Size, Size, Height]]];
  Filter.Walker := True;
end;

procedure TRSObject.SetupCommon(PWalker: PRSWalker; TileVector: Vector3; ObjTileArray: TPointArray); overload;
begin
  Walker := PWalker;
  TileArray := ObjTileArray;
  ShapeArray := [[ObjTileArray, TileVector]];
  Filter.Walker := True;
end;

procedure TRSObject.SetupCommon(PWalker: PRSWalker; Shapes: array of TRSObjectShape); overload;
var
  i: Int32;
begin
  Walker := PWalker;
  ShapeArray := Shapes;
  Filter.Walker := True;

  for i := 0 to High(Shapes) do
    TileArray.Extend(Shapes[i].TileArray);
end;


procedure TRSMMDot.SetupCommon; override;
begin
  inherited;

  ShapeArray := [[[], [1, 1, 6]]];
  Filter.MinimapDot := True;
end;

procedure TRSMMDot.SetupCommon(PWalker: PRSWalker; Radius: Int32; Height: Double; ObjTileArray: TPointArray); overload;
begin
  Walker := PWalker;
  TileArray := ObjTileArray;
  ShapeArray := [[ObjTileArray, [1, 1, Height]]];
  TileRadius := Radius;
  Filter.Walker := True;
end;

procedure TRSMMDot.SetupCommon(PWalker: PRSWalker; Radius: Int32; Size, Height: Double; ObjTileArray: TPointArray); overload;
begin
  Walker := PWalker;
  TileArray := ObjTileArray;
  ShapeArray := [[ObjTileArray, [Size, Size, Height]]];
  TileRadius := Radius;
  Filter.Walker := True;
end;

procedure TRSMMDot.SetupCommon(PWalker: PRSWalker; Radius: Int32; TileVector: Vector3; ObjTileArray: TPointArray); overload;
begin
  Walker := PWalker;
  TileArray := ObjTileArray;
  ShapeArray := [[ObjTileArray, TileVector]];
  TileRadius := Radius;
  Filter.Walker := True;
end;

procedure TRSMMDot.SetupCommon(PWalker: PRSWalker; Radius: Int32; Shapes: array of TRSObjectShape); overload;
var
  i: Int32;
begin
  Walker := PWalker;
  ShapeArray := Shapes;
  TileRadius := Radius;
  Filter.Walker := True;

  for i := 0 to High(Shapes) do
    TileArray.Extend(Shapes[i].TileArray);
end;



procedure TRSNPC.SetupCommon; override;
begin
  inherited;

  DotType := ERSMinimapDot.NPC;
end;


procedure TRSGroundItem.SetupCommon; override;
begin
  inherited;

  ShapeArray := [[[], [1, 1, 1]]];
  DotType := ERSMinimapDot.ITEM;
end;

procedure TRSGroundItem.SetupCommon(ItemName: TRSItem); overload;
begin
  Self.SetupCommon;

  Item := ItemName;
  UpText := [ToStr(Item)];
  Value := ItemInfo.GetAveragePrice(Item);
  HighAlch := ItemInfo.GetHighPrice(Item);
end;


procedure TRSPlayer.SetupCommon; override;
begin
  inherited;

  DotType := ERSMinimapDot.PLAYER;
end;




function TRSObject.GetPolys(out FloorTiles, RoofTiles: TRectArray): TPolyArray;
var
  Me: TPoint := Walker^.GetMyPos;
  i: Int32;
begin
  for i := 0 to High(ShapeArray) do
  begin
    FloorTiles.Extend(Walker^.GetTileArrayMS(
          Me, ShapeArray[i].TileArray,
          [ShapeArray[i].TileVector.X, ShapeArray[i].TileVector.Y, 0]));

    if ShapeArray[i].TileVector.Z > 0 then
    begin
      RoofTiles.Extend(Walker^.GetTileArrayMS(
          Me, ShapeArray[i].TileArray, ShapeArray[i].TileVector));

      Result := FloorTiles.GetPolys(RoofTiles);
    end
    else
      Result := FloorTiles.GetPolys;
  end;
end;

function TRSObject.GetPolys: TPolyArray; overload;
var
  i, x: Int32;
  APA: array of TPolyArray;
begin
  for i := 0 to High(ShapeArray) do
    APA += Walker^.GetTileArrayPolys(Walker^.GetMyPos, ShapeArray[i].TileArray,
                                      ShapeArray[i].TileVector, [0, 0]);
  for i := 0 to High(APA) do
    for x := 0 to High(APA[i]) do
      Result += APA[i][x];
end;



function TRSMMDot._GetWMMPolys(out MMPoints, Dots: TPointArray; out Radiuses: TCircleArray; out Tiles, FloorTiles, RoofTiles: TRectArray): TPolyArray;
begin
    MMPoints := Walker^.WorldToMM(ShapeArray[0].TileArray);
    Radiuses := Minimap.GetCircleArray(MMPoints, TileRadius);
    Dots := Minimap.GetDotArrayInCircleArray(DotType, MMPoints, TileRadius);

    Tiles := Walker^.GetTileArrayMS(
                     MMPoints, [ShapeArray[0].TileVector.X, ShapeArray[0].TileVector.Y, 0]);

    FloorTiles := Minimap.GetTileArrayMS(Dots, ShapeArray[0].TileVector, [-2, -2]);

    if ShapeArray[0].TileVector.Z > 0 then
    begin
      RoofTiles := Minimap.GetTileArrayMS(Dots, ShapeArray[0].TileVector, [-2, -2]);
      Result := FloorTiles.GetPolys(RoofTiles);
    end
    else
      Result := FloorTiles.GetPolys;
end;

function TRSMMDot._GetWPolys(out FloorTiles, RoofTiles: TRectArray): TPolyArray;
var
  Me: TPoint := Walker^.GetMyPos;
begin
  FloorTiles := Walker^.GetTileArrayMS(Me, ShapeArray[0].TileArray,
                        [ShapeArray[0].TileVector.X, ShapeArray[0].TileVector.Y, 0], [0, 0]);

  if ShapeArray[0].TileVector.Z > 0 then
  begin
    RoofTiles := Walker^.GetTileArrayMS(Me, ShapeArray[0].TileArray,
                                        ShapeArray[0].TileVector, [0, 0]);

    Result := FloorTiles.GetPolys(RoofTiles);
  end
  else
    Result := FloorTiles.GetPolys;
end;

function TRSMMDot._GetMMPolys(out Dots: TPointArray; out FloorTiles, RoofTiles: TRectArray): TPolyArray;
begin
  Dots := Minimap.GetDots(DotType);
  FloorTiles := Minimap.GetTileArrayMS(Dots,
                  [ShapeArray[0].TileVector.X, ShapeArray[0].TileVector.Y, 0], [-2, -2]);

  if ShapeArray[0].TileVector.Z > 0 then
  begin
    RoofTiles := Minimap.GetTileArrayMS(Dots, ShapeArray[0].TileVector, [-2, -2]);
    Result := FloorTiles.GetPolys(RoofTiles);
  end
  else
    Result := FloorTiles.GetPolys;
end;


function TRSMMDot.GetPolys(out MMPoints, Dots: TPointArray; out Radiuses: TCircleArray; out Tiles, FloorTiles, RoofTiles: TRectArray): TPolyArray; overload;
begin
  if Filter.Walker and Filter.MinimapDot then
    Result := Self._GetWMMPolys(MMPoints, Dots, Radiuses, Tiles, FloorTiles, RoofTiles)
  else if Filter.Walker then
    Result := Self._GetWPolys(FloorTiles, RoofTiles)
  else if Filter.MinimapDot then
    Result := Self._GetMMPolys(Dots, FloorTiles, RoofTiles);
end;

function TRSMMDot.GetPolys: TPolyArray; overload;
var
  Dots: TPointArray;
  Expand: Double;
begin
  if Filter.Walker and Filter.MinimapDot then
  begin
    Dots := Minimap.GetDotArrayInCircleArray(DotType,
                    Walker^.WorldToMM(ShapeArray[0].TileArray), TileRadius);
    Result := Minimap.GetTileArrayPolys(Dots, ShapeArray[0].TileVector, [-2, -2]);
  end

  else if Filter.Walker then
  begin
    Expand := Round(
                (ShapeArray[0].TileVector.Y + ShapeArray[0].TileVector.X) / 2) * TileRadius;

    Result := Minimap.GetTileArrayPolys(
                        Walker^.WorldToMM(ShapeArray[0].TileArray),
                        [Expand, Expand, ShapeArray[0].TileVector.Z]);
  end

  else if Filter.MinimapDot then
  begin
    Dots := Minimap.GetDots(DotType);
    Result := Minimap.GetTileArrayPolys(Dots, ShapeArray[0].TileVector, [-2, -2]);
  end;
end;




function TWaspObject.GetATPA(PolyArray: TPolyArray): T2DPointArray;
var
  i: Int32;
  TPA: TPointArray;
  UnlimitedFinder: TRSObjectFinder;
begin
  if Filter.Finder then
    UnlimitedFinder := Finder.Unlimited;

  for i := 0 to High(PolyArray) do
    if MainScreen.IsVisible(PolyArray[i]) then
    begin
      if Filter.Finder then
      begin
        TPA := MainScreen.FindObject(UnlimitedFinder, PolyArray[i].Bounds).Merge;
        if TPA <> [] then
          Result += PolyArray[i].Filter(TPA);
      end
      else
      begin
        TPA := PolyArray[i].Connect;
        TPA.Fill;
        Result += TPA;
      end;
    end;
end;

function TWaspObject.FindATPA(PolyArray: TPolyArray): Boolean;
var
  i: Int32;
  UnlimitedFinder: TRSObjectFinder;
begin
  if Filter.Finder then
    UnlimitedFinder := Finder.Unlimited;

  for i := 0 to High(PolyArray) do
    if MainScreen.IsVisible(PolyArray[i]) then
    begin
      if Filter.Finder then
      begin
        if MainScreen.FindObject(UnlimitedFinder, PolyArray[i].Bounds) <> [] then
          Exit(True);
      end
      else
        Exit(True);
    end;
end;



// Searches for an object with ObjectFinder in the MainScreen with the
// help of RSWalker. Good when objects don't move and precision is needed.
function TRSObject.Find(out FloorTiles, RoofTiles: TRectArray; out PolyArray: TPolyArray; out ATPA: T2DPointArray): Boolean;
begin
  MM2MS.SetupZoom;

  if Filter.Walker then
  begin
    PolyArray := Self.GetPolys(FloorTiles, RoofTiles);

    if PolyArray = [] then
      Exit(False);

    ATPA := Self.GetATPA(PolyArray);
  end

  else if Filter.Finder then
    ATPA := MainScreen.FindObject(Finder);

  Result := ATPA <> [];

  if Result then
    ATPA.SortByMiddle(MainScreen.GetPlayerBox.Middle);
end;

//instead of calling the previous function inside this one we actually make it slightly differently.
//since we don't want to return as many parameters on this one we can improve it's performance slightly.
function TRSObject.Find(out ATPA: T2DPointArray): Boolean; overload;
var
  PolyArray: TPolyArray;
begin
  MM2MS.SetupZoom;

  if Filter.Walker then
  begin
    PolyArray := Self.GetPolys;

    if PolyArray = [] then
      Exit(False);

    ATPA := Self.GetATPA(PolyArray);
  end

  else if Filter.Finder then
    ATPA := MainScreen.FindObject(Finder);

  Result := ATPA <> [];

  if Result then
    ATPA.SortByMiddle(MainScreen.GetPlayerBox.Middle);
end;

//This one is for True or False only but performs even better because it exits on the first match.
function TRSObject.Find: Boolean; overload;
var
  PolyArray: TPolyArray;
begin
  MM2MS.SetupZoom;

  if Filter.Walker then
  begin
    PolyArray := Self.GetPolys;

    if PolyArray = [] then
      Exit(False);

    Exit(Self.FindATPA(PolyArray));
  end

  else if Filter.Finder then
    Result := MainScreen.FindObject(Finder) <> [];
end;


//MMDot.Find functions
function TRSMMDot.Find(out MMPoints, Dots: TPointArray; out Radiuses: TCircleArray; out Tiles, FloorTiles, RoofTiles: TRectArray; out PolyArray: TPolyArray; out ATPA: T2DPointArray): Boolean;
begin
  MM2MS.SetupZoom;

  if Filter.Walker or Filter.MinimapDot then
  begin
    PolyArray := Self.GetPolys(MMPoints, Dots, Radiuses,
                               Tiles, FloorTiles, RoofTiles);

    if PolyArray = [] then
      Exit(False);

    ATPA := Self.GetATPA(PolyArray);
  end

  else if Filter.Finder then
    ATPA := MainScreen.FindObject(Finder);

  if Result := (ATPA <> []) then
    ATPA.SortByMiddle(MainScreen.GetPlayerBox.Middle);
end;

function TRSMMDot.Find(out ATPA: T2DPointArray): Boolean; overload;
var
  PolyArray: TPolyArray;
begin
  MM2MS.SetupZoom;

  if Filter.Walker or Filter.MinimapDot then
  begin
    PolyArray := Self.GetPolys;

    if PolyArray = [] then
      Exit(False);

    ATPA := Self.GetATPA(PolyArray);
  end

  else if Filter.Finder then
    ATPA := MainScreen.FindObject(Finder);

  if Result := (ATPA <> []) then
    ATPA.SortByMiddle(MainScreen.GetPlayerBox.Middle);
end;

function TRSMMDot.Find: Boolean; overload;
var
  PolyArray: TPolyArray;
begin
  MM2MS.SetupZoom;

  if Filter.Walker or Filter.MinimapDot then
  begin
    PolyArray := Self.GetPolys;

    if PolyArray = [] then
      Exit(False);

    Exit(Self.FindATPA(PolyArray));
  end

  else if Filter.Finder then
    Result := MainScreen.FindObject(Finder) <> [];
end;



//Debug RSObject.
procedure Debug(RSObject: TRSObject); overload;
var
  Bitmap: TMufasaBitmap;
  FloorTiles, RoofTiles: TRectArray;
  PolyArray: TPolyArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  Bitmap.FromClient;

  RSObject.Find(FloorTiles, RoofTiles, PolyArray, ATPA);

  for I := 0 to High(ATPA) do
  begin
    if I = 0 then
      Bitmap.DrawTPA(ATPA[0], $0A0A0A) //Closest object will be dark gray.
    else
      Bitmap.DrawTPA(ATPA[I], DEBUG_COLORS[I mod Length(DEBUG_COLORS)]);
  end;

  for I := 0 to High(FloorTiles) do
    Bitmap.DrawRect(FloorTiles[I], $FFFFFF);

  for I := 0 to High(RoofTiles) do
    Bitmap.DrawRect(RoofTiles[I], $FFFFFF);

  for I := 0 to High(PolyArray) do
    Bitmap.DrawPoly(PolyArray[I], $00FFFF);

  Bitmap.Debug;
  Bitmap.Free;
end;

//Debug TRSMMDot
procedure Debug(MMDot: TRSMMDot); overload;
var
  Bitmap: TMufasaBitmap;
  MMPoints, Dots: TPointArray;
  Radiuses: TCircleArray;
  Tiles, FloorTiles, RoofTiles: TRectArray;
  PolyArray: TPolyArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  Bitmap.FromClient;

  MMDot.Find(MMPoints, Dots, Radiuses,
             Tiles, FloorTiles, RoofTiles, PolyArray, ATPA);

  //Minimap drawing
  for I := 0 to High(MMPoints) do
    Bitmap.DrawCrosshairs(MMPoints[I], 4, clBlue);

  for I := 0 to High(Dots) do
    Bitmap.DrawCrosshairs(Dots[I], 2, clTeal);

  for I := 0 to High(Radiuses) do
    Bitmap.DrawCircle(Radiuses[I].Mean, Radiuses[I].Radius, clLime);

  for I := 0 to High(Tiles) do
    Bitmap.DrawRect(Tiles[I], $00FFFF);

  for I := 0 to High(FloorTiles) do
    Bitmap.DrawRect(FloorTiles[I], $FFFFFF);

  for I := 0 to High(RoofTiles) do
    Bitmap.DrawRect(RoofTiles[I], $FFFFFF);

  for I := 0 to High(PolyArray) do
    Bitmap.DrawPoly(PolyArray[I], $00FFFF);

  for I := 0 to High(ATPA) do
  begin
    if I = 0 then
      Bitmap.DrawTPA(ATPA[0], $0A0A0A) //Closest object will be painted black.
    else
      Bitmap.DrawTPA(ATPA[I], DEBUG_COLORS[I mod Length(DEBUG_COLORS)]);
  end;

  Bitmap.Debug;
  Bitmap.Free;
end;

//add object to DebugObjectArray and call SRL.Debug to use this below.
//Used to debug several objects at the same time.
procedure TRSObject.Draw(out Bitmap: TMufasaBitmap);
var
  FloorTiles, RoofTiles: TRectArray;
  PolyArray: TPolyArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  Self.Find(FloorTiles, RoofTiles, PolyArray, ATPA);

  for I := 0 to High(ATPA) do
  begin
    if I = 0 then
      Bitmap.DrawTPA(ATPA[0], $0A0A0A) //Closest object will be painted black.
    else
      Bitmap.DrawTPA(ATPA[I], DEBUG_COLORS[I mod Length(DEBUG_COLORS)]);
  end;

  for I := 0 to High(FloorTiles) do
    Bitmap.DrawRect(FloorTiles[I], $FFFFFF);

  for I := 0 to High(RoofTiles) do
    Bitmap.DrawRect(RoofTiles[I], $FFFFFF);

  for I := 0 to High(PolyArray) do
    Bitmap.DrawPoly(PolyArray[I], $00FFFF);
end;

//add object to DebugObjectArray and call SRL.Debug to use this below.
//Used to debug several objects at the same time.
procedure TRSMMDot.Draw(out Bitmap: TMufasaBitmap);
var
  MMPoints, Dots: TPointArray;
  Radiuses: TCircleArray;
  Tiles, FloorTiles, RoofTiles: TRectArray;
  PolyArray: TPolyArray;
  ATPA: T2DPointArray;
  I: Int32;
begin
  Self.Find(MMPoints, Dots, Radiuses,
             Tiles, FloorTiles, RoofTiles, PolyArray, ATPA);

  //Minimap drawing
  for I := 0 to High(MMPoints) do
    Bitmap.DrawCrosshairs(MMPoints[I], 3, $FFFFFF);

  for I := 0 to High(Dots) do
    Bitmap.DrawCrosshairs(Dots[I], 3, $00FFFF);

  for I := 0 to High(Radiuses) do
    Bitmap.DrawCircle(Radiuses[I].Mean, Radiuses[I].Radius, $FFFFFF);

  for I := 0 to High(Tiles) do
    Bitmap.DrawRect(Tiles[I], $00FFFF);

  for I := 0 to High(FloorTiles) do
    Bitmap.DrawRect(FloorTiles[I], $FFFFFF);

  for I := 0 to High(RoofTiles) do
    Bitmap.DrawRect(RoofTiles[I], $FFFFFF);

  for I := 0 to High(PolyArray) do
    Bitmap.DrawPoly(PolyArray[I], $00FFFF);

  for I := 0 to High(ATPA) do
  begin
    if I = 0 then
      Bitmap.DrawTPA(ATPA[0], $0A0A0A) //Closest object will be painted black.
    else
      Bitmap.DrawTPA(ATPA[I], DEBUG_COLORS[I mod Length(DEBUG_COLORS)]);
  end;

end;


// HoverHelper function used by non walking object hovering functions.
function TRSObject._HoverHelper(Attempts: Int32): Boolean;
var
  Attempt: Int32;
  ATPA: T2DPointArray;
  Points: TPointArray;
  CompassAngle: Double;
begin
  for Attempt := 0 to Attempts do
  begin
    if (RSClient.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface then
      Exit(False);

    if Filter.UpText and MainScreen.IsUpText(UpText) then
      Exit(True);

    if Self.Find(ATPA) then
    begin
      if Attempt < 2 then
        Points := ATPA[0] // 0 for the closest one.
      else if Length(ATPA) > (Attempt - 2) then
        Points := ATPA[Attempt - 2]
      else
        Points := ATPA[Random(0, High(ATPA))];

      if Points <> [] then
      begin
        Mouse.Move(Points[Random(0, High(Points))]);
        if not Filter.UpText then
          Exit(True);
      end;
    end;

    if MainScreen.IsUpText(UpText) then
      Exit(True);

    //will rotate the screen for the last attempt if hasn't hovered properly yet
    if Attempt = (Attempts - 1) then
    begin
      CompassAngle := Minimap.GetCompassAngle;
      CompassAngle += Random(-50, 50);
      Minimap.SetCompassAngle(CompassAngle, 10);
    end;
  end;
end;

// AsyncHoverHelper function used by async object hovering functions.
function TRSObject._AsyncHoverHelper: Boolean;
var
  ATPA: T2DPointArray;
begin
  if (RSClient.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface then
    Exit(False);

  if Self.Find(ATPA) then
  begin
    if ATPA[0] <> [] then
    begin
      ASyncMouse.Move(ATPA[0][Random(0, High(ATPA[0]))]);
      Exit(True);
    end;
  end;
end;

// WalkHoverHelper function used by walking object hovering functions.
function TRSObject._WalkHoverHelper(Attempts: Int32): Boolean;
var
  Attempt: Int32;
  ATPA: T2DPointArray;
  Points: TPointArray;
  CompassAngle: Double;
begin
  if not Filter.Walker then
    Exit;

  for Attempt := 0 to Attempts do
  begin
    if (RSClient.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface then
      Exit(False);

    if Filter.UpText and MainScreen.IsUpText(UpText) then
      Exit(True);

    if Self.Find(ATPA) then
    begin
      if Attempt < 2 then
        Points := ATPA[0] // 0 for the closest one.
      else
      begin
        if Length(ATPA) > (Attempt - 2) then
          Points := ATPA[Attempt - 2]
        else
          Points := ATPA[Random(0, High(ATPA))];
      end;

      if Points <> [] then
      begin
        Mouse.Move(Points[Random(0, High(Points))]);
        if not Filter.UpText then
          Exit(True);
      end;
    end;

    if MainScreen.IsUpText(UpText) then
      Exit(True)
    else if not Walker^.AtTile(TileArray, 50) then
      Walker^.WebWalk(TileArray, 30, 0.2)
    else if Attempt = (Attempts - 1) then
    begin
      if not Walker^.AtTile(TileArray, 25) and Walker^.WebWalk(TileArray, 30, 0.2) then
        Continue;

      CompassAngle := Minimap.GetCompassAngle;
      CompassAngle += Random(-50, 50);
      Minimap.SetCompassAngle(CompassAngle, 10);
    end;
  end;
end;


// HoverHelper function used by non walking mmdot hovering functions.
function TRSMMDot._HoverHelper(Attempts: Int32): Boolean;
var
  Attempt: Int32;
  ATPA: T2DPointArray;
  Points: TPointArray;
  CompassAngle: Double;
begin
  for Attempt := 0 to Attempts do
  begin
    if (RSClient.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface then
      Exit(False);

    if Filter.UpText and MainScreen.IsUpText(UpText) then
      Exit(True);

    if Self.Find(ATPA) then
    begin
      if Attempt < 2 then
        Points := ATPA[0] // 0 for the closest one.
      else if Length(ATPA) > (Attempt - 2) then
        Points := ATPA[Attempt - 2]
      else
        Points := ATPA[Random(0, High(ATPA))];

      if Points <> [] then
      begin
        Mouse.Move(Points[Random(0, High(Points))]);
        if not Filter.UpText then
          Exit(True);
      end;
    end;

    if MainScreen.IsUpText(UpText) then
      Exit(True);

    //will rotate the screen for the last attempt if hasn't hovered properly yet
    if Attempt = (Attempts - 1) then
    begin
      CompassAngle := Minimap.GetCompassAngle;
      CompassAngle += Random(-50, 50);
      Minimap.SetCompassAngle(CompassAngle, 10);
    end;
  end;
end;

// AsyncHoverHelper function used by async mmdot hovering functions.
function TRSMMDot._AsyncHoverHelper: Boolean;
var
  ATPA: T2DPointArray;
begin
  if (RSClient.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface then
    Exit(False);

  if Self.Find(ATPA) then
  begin
    if ATPA[0] <> [] then
    begin
      AsyncMouse.Move(ATPA[0][Random(0, High(ATPA[0]))]);
      Exit(True);
    end;
  end;
end;

// WalkHoverHelper function used by walking mmdot hovering functions.
function TRSMMDot._WalkHoverHelper(Attempts: Int32): Boolean;
var
  Attempt: Int32;
  ATPA: T2DPointArray;
  Points: TPointArray;
  CompassAngle: Double;
begin
  if not Filter.Walker then
    Exit;

  for Attempt := 0 to Attempts do
  begin
    if (RSClient.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface then
      Exit(False);

    if Filter.UpText and MainScreen.IsUpText(UpText) then
      Exit(True);

    if Self.Find(ATPA) then
    begin
      if Attempt < 2 then
        Points := ATPA[0] // 0 for the closest one.
      else
      begin
        if Length(ATPA) > (Attempt - 2) then
          Points := ATPA[Attempt - 2]
        else
          Points := ATPA[Random(0, High(ATPA))];
      end;

      if Points <> [] then
      begin
        Mouse.Move(Points[Random(0, High(Points))]);
        if not Filter.UpText then
          Exit(True);
      end;
    end;

    if MainScreen.IsUpText(UpText) then
      Exit(True)
    else if not Walker^.AtTile(TileArray, 50) then
      Walker^.WebWalk(TileArray, 30, 0.2)
    else if Attempt = (Attempts - 1) then
    begin
      if not Walker^.AtTile(TileArray, 25) and Walker^.WebWalk(TileArray, 30, 0.2) then
        Continue;

      CompassAngle := Minimap.GetCompassAngle;
      CompassAngle += Random(-50, 50);
      Minimap.SetCompassAngle(CompassAngle, 10);
    end;
  end;
end;



// ClickHelper function used by object clicking functions.
function TWaspObject._ClickHelper(LeftClick: Boolean): Boolean;
begin
  if ChooseOption.IsOpen then
  begin
    if Filter.UpText and ChooseOption.Select(UpText) then
      Exit(True)
    else
    begin
      ChooseOption.Close;
      Exit(False);
    end;
  end;

  if LeftClick then Mouse.Click(MOUSE_LEFT);

  Result := MainScreen.DidRedClick or
            (not LeftClick and Filter.UpText and ChooseOption.Select(UpText));

  if Result and SRL.Dice(0.5 - (0.5 * BioHash)) then
  begin
    case Random of
      0.000..0.899: Antiban.SmallRandomMouse;
      else Antiban.RandomMouse;
    end;
  end;
end;

// SelectHelper function used by object option selection functions.
function TWaspObject._SelectHelper(Action: TStringArray): Boolean;
begin
  if ChooseOption.IsOpen and ChooseOption.Select(Action) then
    Exit(True);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := MainScreen.DidRedClick;
  end
  else
    Result := ChooseOption.Select(Action);
end;




// Searches for an object with TRSObject.Find and hovers it if found.
function TRSObject.Hover(Attempts: Int32 = 2): Boolean;
begin
  if ChooseOption.IsOpen then
  begin
    if Filter.UpText and ChooseOption.HasOption(UpText) then
      Exit(True);
    ChooseOption.Close;
  end;

  if Filter.Walker and not Walker^.MakeTileVisible(TileArray) then
    Exit(False);

  Result := Self._HoverHelper(Attempts);
end;

// Searches for an object with TRSObject.Find and hovers it asynchronously if found.
function TRSObject.AsyncHover: Boolean;
begin
  Result := Self._AsyncHoverHelper;
end;

// Searches for an object with TRSObject.Find, hovers and clicks it if found.
function TRSObject.Click(LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean;
begin
  Result := Self.Hover(Attempts) and
            Self._ClickHelper(LeftClick);
end;


// Searches for an object with TRSObject.Find, hovers and selects the specified action if found.
function TRSObject.SelectOption(Action: TStringArray; Attempts: Int32 = 2): Boolean;
begin
  Result := Self.Hover(Attempts) and
            Self._SelectHelper(Action);
end;


// Searches for an object with TRSObject.Find and walker and hovers it if found.
function TRSObject.WalkHover(Attempts: Int32 = 2): Boolean;
begin
  if ChooseOption.IsOpen then
  begin
    if Filter.UpText and ChooseOption.HasOption(UpText) then
      Exit(True);
    ChooseOption.Close;
  end;

  if not Filter.Walker then
    Exit;

  if not Walker^.MakeTileVisible(TileArray) then
    if not Walker^.WebWalk(TileArray, 30, 0.2) then
      Exit(False);

  Result := Self._WalkHoverHelper(Attempts);
end;

// Searches for an object with TRSObject.Find and walker, hovers and clicks it if found.
function TRSObject.WalkClick(LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean;
begin
  Result := Self.WalkHover(Attempts) and
            Self._ClickHelper(LeftClick);
end;

// Searches for an object with TRSObject.Find and walker, hovers and selects the specified action if found.
function TRSObject.WalkSelectOption(Action: TStringArray; Attempts: Int32 = 2): Boolean;
begin
  Result := Self.WalkHover(Attempts) and
            Self._SelectHelper(Action);
end;



// Searches for an object with TRSMMDot.Find and hovers it if found.
function TRSMMDot.Hover(Attempts: Int32 = 2): Boolean;
begin
  if ChooseOption.IsOpen then
  begin
    if Filter.UpText and ChooseOption.HasOption(UpText) then
      Exit(True);
    ChooseOption.Close;
  end;

  if Filter.Walker and not Walker^.MakeTileVisible(TileArray) then
    Exit(False);

  Result := Self._HoverHelper(Attempts);
end;

// Searches for an object with TRSMMDot.Find and hovers it asynchronously if found.
function TRSMMDot.AsyncHover: Boolean;
begin
  Result := Self._AsyncHoverHelper;
end;

// Searches for an object with TRSMMDot.Find, hovers and clicks it if found.
function TRSMMDot.Click(LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean;
begin
  Result := Self.Hover(Attempts) and
            Self._ClickHelper(LeftClick);
end;

// Searches for an object with TRSMMDot.Find, hovers and selects the specified action if found.
function TRSMMDot.SelectOption(Action: TStringArray; Attempts: Int32 = 2): Boolean;
begin
  Result := Self.Hover(Attempts) and
            Self._SelectHelper(Action);
end;


// Searches for an object with TRSMMDot.Find and walker and hovers it if found.
function TRSMMDot.WalkHover(Attempts: Int32 = 2): Boolean;
begin
  if ChooseOption.IsOpen then
  begin
    if Filter.UpText and ChooseOption.HasOption(UpText) then
      Exit(True);
    ChooseOption.Close;
  end;

  if not Filter.Walker then
    Exit;

  if not Walker^.MakeTileVisible(TileArray) then
    if not Walker^.WebWalk(TileArray, 30, 0.2) then
      Exit(False);

  Result := Self._WalkHoverHelper(Attempts);
end;

// Searches for an object with TRSMMDot.Find and walker, hovers and clicks it if found.
function TRSMMDot.WalkClick(LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean;
begin
  Result := Self.WalkHover(Attempts) and
            Self._ClickHelper(LeftClick);
end;

// Searches for an object with TRSMMDot.Find and walker, hovers and selects the specified action if found.
function TRSMMDot.WalkSelectOption(Action: TStringArray; Attempts: Int32 = 2): Boolean;
begin
  Result := Self.WalkHover(Attempts) and
            Self._SelectHelper(Action);
end;

var
  CurrentBank: PRSObject;
  CurrentBanker: PRSNPC;

//Extra bank opening methods using TRSObjects
function TRSBank.Hover(RSObject: PRSObject = CurrentBank): Boolean; overload;
begin
  Result := RSObject^.Hover;
end;

function TRSBank.Open(RSObject: PRSObject = CurrentBank): Boolean; overload;
begin
  if MainScreen.HasInterface then
  begin
    if (Self.IsOpen or BankPin.IsOpen) then Exit(True)
    else MainScreen.CloseInterface;
  end;

  if RSObject^.Click or
     (MainScreen.IsUpText('Banker') and ChooseOption.Select(['Bank B', 'Bank E'])) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil((Self.IsOpen or BankPin.IsOpen),
                         SRL.TruncatedGauss(50, 1500), 3000);
  end;
end;

function TRSBank.WalkHover(RSObject: PRSObject = CurrentBank): Boolean;
begin
  Result := RSObject^.WalkHover;
end;

function TRSBank.WalkOpen(RSObject: PRSObject = CurrentBank): Boolean;
begin
  if MainScreen.HasInterface then
  begin
    if (Self.IsOpen or BankPin.IsOpen) then Exit(True)
    else MainScreen.CloseInterface;
  end;

  if RSObject^.WalkClick or
     (MainScreen.IsUpText('Banker') and ChooseOption.Select(['Bank B', 'Bank E'])) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil((Self.IsOpen or BankPin.IsOpen),
                         SRL.TruncatedGauss(50, 1500), 3000);
  end;
end;


//Extra bank opening methods using TRSNPCs
function TRSBank.Hover(RSNPC: PRSNPC = CurrentBanker): Boolean; overload;
begin
  Result := RSNPC^.Hover;
end;

function TRSBank.Open(RSNPC: PRSNPC = CurrentBanker): Boolean; overload;
begin
  if MainScreen.HasInterface then
  begin
    if (Self.IsOpen or BankPin.IsOpen) then Exit(True)
    else MainScreen.CloseInterface;
  end;

  if RSNPC^.SelectOption(['Bank B', 'Bank E']) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil((Self.IsOpen or BankPin.IsOpen),
                         SRL.TruncatedGauss(50, 1500), 3000);
  end;
end;

function TRSBank.WalkHover(RSNPC: PRSNPC = CurrentBanker): Boolean; overload;
begin
  Result := RSNPC^.WalkHover;
end;

function TRSBank.WalkOpen(RSNPC: PRSNPC = CurrentBanker): Boolean; overload;
begin
  if MainScreen.HasInterface then
  begin
    if (Self.IsOpen or BankPin.IsOpen) then Exit(True)
    else MainScreen.CloseInterface;
  end;

  if RSNPC^.WalkSelectOption(['Bank B', 'Bank E']) then
  begin
    Minimap.WaitMoving;
    Result := WaitUntil((Self.IsOpen or BankPin.IsOpen),
                         SRL.TruncatedGauss(50, 1500), 3000);
  end;
end;



var
  DebugObjectArray: PRSObjectArray;
  DebugNPCArray:    PRSNPCArray;
  DebugGItemArray:  PRSGroundItemArray;
  DebugPlayerArray: PRSPlayerArray;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
var
  DebugObject: PRSObject;
  DebugNPC:    PRSNPC;
  DebugGItem:  PRSGroundItem;
  DebugPlayer: PRSPlayer;
begin
  inherited;

  for DebugObject in DebugObjectArray do
    DebugObject^.Draw(Bitmap);

  for DebugNPC in DebugNPCArray do
    DebugNPC^.Draw(Bitmap);

  for DebugGItem in DebugGItemArray do
    DebugGItem^.Draw(Bitmap);

  for DebugPlayer in DebugPlayerArray do
    DebugPlayer^.Draw(Bitmap);
end;
