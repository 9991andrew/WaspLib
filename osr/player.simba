{$DEFINE WL_PLAYER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSBaseStats = record(TSRLBaseRecord)
    Levels: TIntegerArray;
    IsSetup: Boolean;
  end;

procedure TRSBaseStats.Setup();
var
  i: Int32;
begin
  if Self.IsSetup or not Stats.Open() then
    Exit;

  Self.Name :='BaseStats';

  Self.DebugLn('Caching player levels.');

  for i := Ord(ERSSkill.ATTACK) to Ord(ERSSkill.HUNTER) do
    Self.Levels += Stats.GetCurrentLevel(ERSSkill(i));

  Self.IsSetup := Self.Levels <> [];
end;

function TRSBaseStats.GetCurrentLevel(Skill: ERSSkill): Int32;
begin
  if not Self.IsSetup then
    Self.Setup();

  if Self.IsSetup then
    Result := Self.Levels[Ord(Skill)];
end;

var
  BaseStats: TRSBaseStats;

function TRSClient.IsLoggedIn: Boolean; override;
begin
  Result := inherited;

  if Result then
  begin
    if not WL.Cache.HighestPitch then
    begin
      WL.Cache.HighestPitch := True;
      MainScreen.SetHighestPitch();
    end;

    if not WL.Cache.MaxBrightness then
    begin
      Wait(100, 600);

      if MM2MS.ZoomLevel = -1 then
        MM2MS.ZoomLevel := Options.GetZoomLevel();

      WL.Cache.MaxBrightness := Options.SetMaxBrightness();

      Options.OpenTab(ERSOptionsTab.CONTROLS);
      Wait(100, 600);
    end;

    if WL.Cache.XP.Previous = 0 then
      XPBar.Read();
  end;
end;

function TRSLogin.LoginPlayer: Boolean; override;
begin
  Result := inherited;

  if Result then
  begin
    if not WL.Cache.HighestPitch then
    begin
      WL.Cache.HighestPitch := True;
      MainScreen.SetHighestPitch();
    end;

    if not WL.Cache.MaxBrightness then
    begin
      Wait(100, 600);

      if MM2MS.ZoomLevel = -1 then
        MM2MS.ZoomLevel := Options.GetZoomLevel();

      WL.Cache.MaxBrightness := Options.SetMaxBrightness();

      Options.OpenTab(ERSOptionsTab.CONTROLS);
      Wait(100, 600); //need to wait a little because rs is buggy and the slider jumps around sometimes.
    end;

    if WL.Cache.XP.Previous = 0 then
      XPBar.Read();
  end;
end;
