
Form Utilities
==============
Forms and components extensions.

This files contains custom components and methods to be used in forms.


------------

TControl.IsInitiated
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TControl.IsInitiated(): Boolean;

Checks if the control has already been initiated.


------------

TControl.Set
~~~~~~~~~~~~
.. code-block:: pascal


  procedure TControl.SetTooltip(const value: String);
  procedure TControl.SetFontColor(const value: Int32);
  procedure TControl.SetChildsFontColor(const value: Int32);

TControl.Set methods. Their names are self explanatory.

For some reason TControl.SetHint cannot be overriden, so a custom method for this was made.


------------

TControl.Get
~~~~~~~~~~~~
.. code-block:: pascal


  function TControl.GetRight(): Int32;
  function TControl.GetBottom(): Int32;

TControl.Get methods. Their names are self explanatory.


------------

Component.IntField
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TComponent.IntField(sender: TObject; var key: char);

Callback method to limit user input to numbers only and backspace.


------------

Component.IntField
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TComponent.IntArrayField(sender: TObject; var key: char);

Callback method to limit user input to a TInteger array.


------------

CustomEdit.IsEmpty
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TCustomEdit.IsEmpty(): Boolean;

Returns true or false if the TCustomEdit (TEdit and TMemo) are empty.


------------

CustomEdit.GetIntegerArray
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TCustomEdit.GetIntegerArray(): TIntegerArray;

Returns the TIntegerArray in the TCustomEdit (TEdit and TMemo).
It's probably a good idea to limit the TCustomEdit input with **TComponent.IntArrayField()**.


------------

Create
~~~~~~
.. code-block:: pascal


  procedure TPanel.Create(const owner: TControl);
  procedure TPageControl.Create(const owner: TControl);
  procedure TTabSheet.Create(const owner: TControl);
  procedure TImage.Create(const owner: TControl);
  procedure TLabel.Create(const owner: TControl);
  procedure TEdit.Create(const owner: TControl);
  procedure TButton.Create(const owner: TControl);
  procedure TCheckBox.Create(const owner: TControl);
  procedure TRadioButton.Create(const owner: TControl);
  procedure TComboBox.Create(const owner: TControl);
  procedure TListBox.Create(const owner: TControl);
  procedure TMemo.Create(const owner: TControl);

**.Init()** and **.SetParent()** in a single method.


------------

TImage.LoadFromFile
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TImage.LoadFromFile(path: String);

Load a image file to a TImage directly.


------------

TControl.LoadFromFile
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TControl.LoadFromFile(path: String);

Load a image file and set it as the background for a TControl.
This can be used to set images for TPanels, TPageControls, TTabSheet, TButtons, etc.


------------

TControl.GetTrueWidth
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TControl.GetTrueWidth(): Int32;

Get the true width of the TControl caption.


------------

TControl.GetTrueHeight
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TControl.GetTrueHeight(): Int32;

Get the true height of the TControl caption.


------------

CheckBox.SetChecked
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TCheckBox.SetChecked(const value: Boolean);

Sets the checkbox checked or unchecked with a boolean.


------------

CheckBox.IsChecked
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TCheckBox.IsChecked(): Boolean;

Gets the checkbox state, checked or unchecked with a boolean.


------------

LabeledControl
~~~~~~~~~~~~~~
.. code-block:: pascal


  type TLabeledControl = record
    Panel: TPanel;
    Caption: TLabel;
  end;

TLabeledControl is the base type for custom TLabeledControls. It's not really meant to be used directly.
If for some reason you need to see the control bounds, it's recommended to set the panel bevel width to 1.


------------

LabeledEdit
~~~~~~~~~~~
.. code-block:: pascal


  type TLabeledEdit = record(TLabeledControl)
    Edit: TEdit;
  end;

TLabeledEdit is, as the name implies a TEdit with a TLabel on top. Both components are contained in the TPanel inherited from TLabeledControl.


------------

LabeledCheckBox
~~~~~~~~~~~
.. code-block:: pascal


  type TLabeledCheckBox = record(TLabeledControl)
    CheckBox: TEdit;
  end;

TLabeledCheckBox is, as the name implies a TCheckBox with a TLabel to it's right. Both components are contained in the TPanel inherited from TLabeledControl.
The standard TCheckBox already has a label by it but it's hard to customize it.


------------

LabeledComboBox
~~~~~~~~~~~~~~~
.. code-block:: pascal


  type TLabeledComboBox = record(TLabeledControl)
    ComboBox: TComboBox;
  end;

TLabeledComboBox is, as the name implies a TComboBox with a TLabel on top. Both components are contained in the TPanel inherited from TLabeledControl.


------------

LabeledListBox
~~~~~~~~~~~~~~
.. code-block:: pascal


  type TLabeledListBox = record(TLabeledControl)
    ListBox: TListBox;
  end;

TLabeledListBox is, as the name implies a TListBox with a TLabel on top. Both components are contained in the TPanel inherited from TLabeledControl.


------------

LabeledMemo
~~~~~~~~~~~
.. code-block:: pascal


  type TLabeledMemo = record(TLabeledControl)
    Memo: TMemo;
  end;

TLabeledMemo is, as the name implies a TMemo with a TLabel on top. Both components are contained in the TPanel inherited from TLabeledControl.


------------

LabeledControl.IsInitiated
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TLabeledControl.IsInitiated(): Boolean;

Checks if the custom labeled control has already been initiated.


------------

Create
~~~~~~
.. code-block:: pascal


  procedure TLabeledControl.Create(const owner: TControl);
  procedure TLabeledPanel.Create(const owner: TControl); override;
  procedure TLabeledEdit.Create(const owner: TControl); override;
  procedure TLabeledCheckBox.Create(const owner: TControl); override;
  procedure TLabeledComboBox.Create(const owner: TControl); override;
  procedure TLabeledListBox.Create(const owner: TControl); override;
  procedure TLabeledMemo.Create(const owner: TControl); override;

Custom components **.Init()** and **.SetParent()** in a single method.


------------

LabeledControl.SetCaption
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TLabeledControl.SetCaption(const value: String);

Set the labeled control caption.


------------

LabeledControl.SetHint
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TLabeledControl.SetHint(const value: String);

Set the labeled control hint (tooltip).


------------

LabeledControl.ShowHint
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TLabeledControl.ShowHint();

Sets show hint (tooltip) to true.


------------

LabeledControl.SetShowHint
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TLabeledControl.SetShowHint(const value: Boolean);

Sets show hint (tooltip) to true or false.


------------

LabeledControl.SetTooltip
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TLabeledControl.SetTooltip(const value: String);

Same as the previous one but makes sure that .ShowHint() is enabled if **value** was not empty.
For more info read about TControl.SetTooltip().


------------

LabeledControl.SetName
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledEdit.SetName(value: String);
  procedure TLabeledCheckBox.SetName(value: String);
  procedure TLabeledComboBox.SetName(value: String)
  procedure TLabeledListBox.SetName(value: String);
  procedure TLabeledMemo.SetName(value: String);

Sets names to the subcomponents of the TLabeledControl.
Caption is named with **value** + '_caption' while the other component is appended with it's name.


------------

LabeledControl.Set
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledControl.SetLeft(const value: Int32);
  procedure TLabeledControl.SetTop(const value: Int32);
  procedure TLabeledControl.SetWidth(const value: Int32);
  procedure TLabeledControl.SetHeight(const value: Int32);
  procedure TLabeledControl.SetAlign(const value: TAlign);
  procedure TLabeledControl.SetColor(const value: Int32);
  procedure TLabeledControl.SetFontColor(const value: Int32);
  procedure TLabeledControl.SetVisible(const value: Boolean);

TLabeledControl Set methods.
The methods are self explanatory.
The only thing that should be kept in mind is that they only interactwith the TLabeledControl.Panel.


------------

LabeledControl.BringToFront
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TLabeledControl.BringToFront();

Brings the control to front.


------------

LabeledControl.Get
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TLabeledControl.GetLeft(): Int32;
  function TLabeledControl.GetTop(): Int32;
  function TLabeledControl.GetRight(): Int32;
  function TLabeledControl.GetBottom(): Int32;
  function TLabeledControl.GetHeight(): Int32;
  function TLabeledControl.GetVisible(): Boolean;

TLabeledControl Get methods.
The methods are self explanatory.


------------

LabeledControl.SetText
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledEdit.SetText(const value: String);
  procedure TLabeledComboBox.SetText(const value: String);
  procedure TLabeledMemo.SetText(const value: String);

Sets the visible text in the TLabeledControl to **value**.


------------

LabeledControl.GetText
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TLabeledEdit.GetText(): String;
  function TLabeledComboBox.GetText(): String;
  function TLabeledListBox.GetText(): String;
  function TLabeledMemo.GetText(): String;

Gets the visible or selected text in the TLabeledControl.


------------

LabeledControl.Clear
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledEdit.Clear();
  procedure TLabeledComboBox.Clear();
  procedure TLabeledListBox.Clear();
  procedure TLabeledMemo.Clear();

Clears the TLabeledControl.


------------

LabeledCheckBox.SetChecked
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TLabeledCheckBox.SetChecked(const value: Boolean);

Sets the checkbox or not depending on **value**.


------------

LabeledCheckBox.IsChecked
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TLabeledCheckBox.IsChecked(): Boolean;

Gets the checkbox state true or false.


------------

LabeledCheckBox.GetState
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TLabeledCheckBox.GetState(): TCheckBoxState;

Gets the checkbox state.


------------

LabeledControl.SetEnabled
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledEdit.SetEnabled(const value: Boolean);
  procedure TLabeledCheckBox.SetChecked(const value: Boolean);
  procedure TLabeledComboBox.SetEnabled(const value: Boolean);
  procedure TLabeledListBox.SetEnabled(const value: Boolean);
  procedure TLabeledMemo.SetEnabled(const value: Boolean);

Sets the checkbox or not depending on **value**.


------------

LabeledControl.SetPasswordChar
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledEdit.SetPasswordChar(const value: Char = '*');
  procedure TLabeledMemo.SetPasswordChar(const value: Char = '*');

Sets the TLabeledControl to hide the displayed text with **value** characters.
Mostly used to hide passwords.


------------

LabeledControl.SetMaxLength
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledEdit.SetMaxLength(const value: Int32);
  procedure TLabeledMemo.SetMaxLength(const value: Int32);

Sets the maximum length of characters accepted by the TLabeledControl.


------------

LabeledControl.GetMaxLength
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TLabeledEdit.GetMaxLength(): Int32;
  function TLabeledMemo.GetMaxLength(): Int32;

Returns the maximum length of characters accepted by the TLabeledControl.


------------

LabeledControl.SetStyle
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledComboBox.SetStyle(const value: TComboBoxStyle);
  procedure TLabeledListBox.SetStyle(const value: TListBoxStyle);

Sets the TLabeledControl style.


------------

LabeledControl.AddItem
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledCombobox.AddItem(const value: String);
  procedure TLabeledListBox.AddItem(const value: String);

Adds an item to the TLabeledControl.


------------

LabeledControl.AddItemArray
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledCombobox.AddItemArray(const valueArray: TStringArray);
  procedure TLabeledListBox.AddItemArray(const valueArray: TStringArray);

Adds an array of items to the TLabeledControl.


------------

LabeledControl.SetItemIndex
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  procedure TLabeledCombobox.SetItemIndex(const value: Int32);
  procedure TLabeledListBox.SetItemIndex(const value: Int32);

Sets the selected index for the TLabeledControl.


------------

LabeledControl.GetItemIndex
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TLabeledCombobox.GetItemIndex(): Int32;
  function TLabeledListBox.GetItemIndex(): Int32;

Gets the selected index of the TLabeledControl.


------------
