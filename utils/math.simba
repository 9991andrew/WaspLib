{$DEFINE WL_MATH_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}


type
  TCuboid = type TPointArray; //Polygon type. A valid polygon needs to have at least 3 points.
  TCuboidArray = array of TCuboid;

function TCuboid.Filter(testSet: TPointArray): TPointArray;
var
  i, count: UInt32;
begin
  if (High(testSet) < 0) then
    Exit;

  SetLength(Result, Length(testSet));
  count := 0;
  for i := 0 to High(testSet) do
    if PointInPolygon(testSet[i], Self) then
    begin
      Result[count] := testSet[i];
      Inc(count);
    end;

  SetLength(Result, Count);
end;

function TCuboid.Rotate(angleRad: Double): TCuboid; overload;
begin
  Result := TPointArray(Self).Rotate(angleRad, TPointArray(Self).Mean());
end;



procedure TMufasaBitmap.DrawCuboid(cuboid: TCuboid; color: Integer = $0000FF); overload;
begin
  Self.DrawTPA(TPointArray(cuboid).Connect(), color);
end;

procedure Debug(cuboid: TCuboid; color: Integer = $0000FF); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  bitmap.DrawCuboid(cuboid, color);
  bitmap.Debug();
  bitmap.Free();
end;

procedure TMufasaBitmap.DrawCuboidArray(cuboids: TCuboidArray; color: Integer = $0000FF); overload;
var
  c: TCuboid;
begin
  for c in cuboids do
    Self.DrawCuboid(c, color);
end;


procedure ShowOnClient(cuboids: TCuboidArray; color: Integer = $0000FF); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  bitmap.DrawCuboidArray(cuboids, color);
  bitmap.Debug();
  bitmap.Free();
end;



function GetDigit(input: Extended; n: Int32): Int32;
begin
  Result := Floor(input * Power(10, n)) mod 10;
end;
