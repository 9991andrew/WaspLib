{$DEFINE WL_FOOD_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

const
  ValidFoodArray: TRSItemArray = [
    'Shrimps', 'Cooked chicken', 'Cooked meat', 'Sardine', 'Bread', 'Herring',
    'Mackerel', 'Choc-ice', 'Trout', 'Cod', 'Pike', 'Roast beast meat',
    'Pineapple punch', 'Salmon', 'Tuna', 'Jug of wine', 'Rainbow fish',
    'Stew', 'Banana stew',
    'Cake', '2/3 cake', 'Slice of cake',
    'Meat pie', 'Half a meat pie',
    'Bass',
    'Plain pizza', '1/2 plain pizza',
    'Lobster', 'Swordfish', 'Potato with butter',
    'Apple pie', 'Half an apple pie',
    'Chocolate cake', '2/3 chocolate cake', 'Chocolate slice',
    'Tangled toad''s legs', 'Chocolate bomb', 'Potato with cheese',
    'Meat pizza', '1/2 meat pizza',
    'Admiral pie', 'Half an admiral pie',
    'Monkfish',
    'Anchovy pizza', '1/2 anchovy pizza',
    'Cooked karambwan', 'Curry', 'Ugthanki kebab',
    'Guthix rest(4)', 'Guthix rest(3)', 'Guthix rest(2)', 'Guthix rest(1)',
    'Dragonfruit pie', 'Half a dragonfruit pie',
    'Mushroom potato', 'Shark', 'Sea turtle',
    'Pineapple pizza', '1/2 pineapple pizza',
    'Summer pie', 'Half a summer pie',
    'Wild pie', 'Half a wild pie',
    'Manta ray', 'Tuna potato', 'Dark crab', 'Anglerfish',
    'Saradomin brew(4)', 'Saradomin brew(3)',
    'Saradomin brew(2)', 'Saradomin brew(1)'
  ];

  TrashItemArray: TRSItemArray = [
    'Cocktail glass',
    'Jug',
    'Bowl',
    'Pie dish',
    'Vial'
  ];

type
  TRSFood = record
    Item: TRSItem;
    Parent: TRSItem;
    LeftOver: TRSItem;
    Heal: UInt32;
    Cost: Int32;
    IsSetup: Boolean;
  end;

  TRSFoodArray = array of TRSFood;

procedure TRSFood.Setup;
var
  HPLevel: Int32;
begin
  if IsSetup then
    Exit;

  Cost := ItemInfo.GetAveragePrice(Item);
  Parent := 'Null';
  LeftOver := 'Null';

  case Item of
    'Shrimps', 'Cooked chicken', 'Cooked meat':
      Heal := 3;
    'Sardine':
      Heal := 4;
    'Bread', 'Herring':
      Heal := 5;
    'Mackerel', 'Choc-ice':
      Heal := 6;
    'Trout', 'Cod':
      Heal := 7;
    'Pike', 'Roast beast meat':
      Heal := 8;
    'Pineapple punch':
      Heal := 9;
    'Salmon':
      Heal := 9;
    'Tuna':
      Heal := 10;
    'Jug of wine':
      Heal := 11;
    'Rainbow fish':
      Heal := 11;
    'Stew', 'Banana stew':
      Heal := 11;
    'Cake':
      begin
        Heal := 12;
        LeftOver := '2/3 cake';
      end;
    '2/3 cake':
      begin
        Heal := 8;
        Parent := 'Cake';
        LeftOver := 'Slice of cake';
      end;
    'Slice of cake':
      begin
        Heal := 4;
        Parent := 'Cake';
      end;
    'Meat pie':
      begin
        Heal := 12;
        LeftOver := 'Half a meat pie';
      end;
    'Half a meat pie':
      begin
        Heal := 6;
        Parent := 'Meat pie';
      end;
    'Lobster':
      Heal := 12;
    'Bass':
      Heal := 13;
    'Plain pizza':
      begin
        Heal := 14;
        LeftOver := '1/2 plain pizza';
      end;
    '1/2 plain pizza':
      begin
        Heal := 7;
        Parent := 'Plain pizza';
      end;
    'Swordfish', 'Potato with butter':
      Heal := 14;
    'Apple pie':
      begin
        Heal := 14;
        LeftOver := 'Half an apple pie';
      end;
    'Half an apple pie':
      begin
        Heal := 7;
        Parent := 'Apple pie';
      end;
    'Chocolate cake':
      begin
        Heal := 15;
        LeftOver := '2/3 chocolate cake';
      end;
    '2/3 chocolate cake':
      begin
        Heal := 10;
        Parent := 'Chocolate cake';
        LeftOver := 'Chocolate slice';
      end;
    'Chocolate slice':
      begin
        Heal := 5;
        Parent := 'Chocolate cake';
      end;
    'Tangled toad''s legs', 'Chocolate bomb':
      Heal := 15;
    'Potato with cheese':
      Heal := 16;
    'Meat pizza':
      begin
        Heal := 16;
        LeftOver := '1/2 meat pizza';
      end;
    '1/2 meat pizza':
      begin
        Heal := 8;
        Parent := 'Meat pizza';
      end;
    'Admiral pie':
      begin
        Heal := 16;
        LeftOver := 'Half an admiral pie';
      end;
    'Half an admiral pie':
      begin
        Heal := 8;
        Parent := 'Admiral pie';
      end;
    'Monkfish':
      Heal := 16;
    'Anchovy pizza':
      begin
        Heal := 18;
        LeftOver := '1/2 anchovy pizza';
      end;
    '1/2 anchovy pizza':
      begin
        Heal := 9;
        Parent := 'Anchovy pizza';
      end;
    'Cooked karambwan':
      Heal := 18;
    'Curry':
      Heal := 19;
    'Ugthanki kebab':
      Heal := 19;
    'Guthix rest(4)':
      begin
        Heal := 20;
        LeftOver := 'Guthix rest(3)';
      end;
    'Guthix rest(3)':
      begin
        Heal := 15;
        Parent := 'Guthix rest(4)';
        LeftOver := 'Guthix rest(2)';
      end;
    'Guthix rest(2)':
      begin
        Heal := 10;
        Parent := 'Guthix rest(4)';
        LeftOver := 'Guthix rest(1)';
      end;
    'Guthix rest(1)':
      begin
        Heal := 5;
        Parent := 'Guthix rest(4)';
      end;
    'Dragonfruit pie':
      begin
        Heal := 20;
        LeftOver := 'Half a dragonfruit pie';
      end;
    'Half a dragonfruit pie':
      begin
        Heal := 10;
        Parent := 'Dragonfruit pie';
      end;
    'Mushroom potato', 'Shark':
      Heal := 20;
    'Sea turtle':
      Heal := 21;
    'Pineapple pizza':
      begin
        Heal := 22;
        LeftOver := '1/2 pineapple pizza';
      end;
    '1/2 pineapple pizza':
      begin
        Heal := 11;
        Parent := 'Pineapple pizza';
      end;
    'Summer pie':
      begin
        Heal := 22;
        LeftOver := 'Half a summer pie';
      end;
    'Half a summer pie':
      begin
        Heal := 11;
        Parent := 'Summer pie';
      end;
    'Wild pie':
      begin
        Heal := 22;
        LeftOver := 'Half a wild pie';
      end;
    'Half a wild pie':
      begin
        Heal := 11;
        Parent := 'Wild pie';
      end;
    'Manta ray', 'Tuna potato', 'Dark crab':
      Heal := 22;
    'Anglerfish':
      begin
        HPLevel := Stats.GetCurrentLevel(ERSSkill.HITPOINTS);
        case HPLevel of
          10..24: Heal := Floor(HPLevel * 0.1) + 2;
          25..49: Heal := Floor(HPLevel * 0.1) + 4;
          50..74: Heal := Floor(HPLevel * 0.1) + 6;
          75..92: Heal := Floor(HPLevel * 0.1) + 8;
          93..99: Heal := Floor(HPLevel * 0.1) + 13;
        end;
      end;
    'Saradomin brew(4)':
      begin
        Heal := (Floor(Stats.GetCurrentLevel(ERSSkill.HITPOINTS) * 0.15) + 2) * 4;
        LeftOver := 'Saradomin brew(3)';
      end;
    'Saradomin brew(3)':
      begin
        Heal := (Floor(Stats.GetCurrentLevel(ERSSkill.HITPOINTS) * 0.15) + 2) * 3;
        Parent := 'Saradomin brew(4)';
        LeftOver := 'Saradomin brew(2)';
      end;
    'Saradomin brew(2)':
      begin
        Heal := (Floor(Stats.GetCurrentLevel(ERSSkill.HITPOINTS) * 0.15) + 2) * 2;
        Parent := 'Saradomin brew(4)';
        LeftOver := 'Saradomin brew(1)';
      end;
    'Saradomin brew(1)':
      begin
        Heal := Floor(Stats.GetCurrentLevel(ERSSkill.HITPOINTS) * 0.15) + 2;
        Parent := 'Saradomin brew(4)';
      end;
  end;

  Cost := ItemInfo.GetAveragePrice(Item);
  IsSetup := True;
end;

function TRSItemArray.Find(const Value: TRSItem): Integer; constref;
begin
  for Result := 0 to High(Self) do
    if (Value = Self[Result]) then
      Exit;

  Result := -1;
end;

procedure TRSItemArray.Reverse;
var
  tmp:TRSItem;
  lo,hi:^TRSItem;
begin
  if (Length(Self) = 0) then
    Exit();

  lo := @Self[0];
  hi := @Self[High(self)];
  while (PtrUInt(lo)<PtrUInt(hi)) do
  begin
    tmp := hi^;
    hi^ := lo^;
    lo^ := tmp;
    dec(hi);
    inc(lo);
  end;
end;

function TRSItemArray.Reversed: TRSItemArray;
var
  lo:PtrUInt;
  p,r:^TRSItem;
begin
  if (Length(Self) = 0) then
    Exit();

  SetLength(Result,length(self));
  p := @Self[high(self)];
  r := @Result[0];

  lo := PtrUInt(@Self[0]);
  while (lo<=PtrUInt(p)) do
  begin
    r^ := p^;
    dec(p);
    inc(r);
  end;
end;


