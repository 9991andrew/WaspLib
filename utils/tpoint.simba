(*
TPoint
=============
TPoint related methods that extend SRL's TPoint functionality.
*)

{$DEFINE WL_TPOINT_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

function TPoint.Between(A, B: TPoint; ForceLine: Boolean = False): Boolean;
var
  TotalDist: Double;
  ThirdDist: Double;
begin
  TotalDist := A.DistanceTo(B);

  if not ForceLine then  //ForceLine makes it check if the point is between and is within a straight line of the 2 points.
    ThirdDist := TotalDist / 3;
  Result := InRange(Self.DistanceTo(A) + Self.DistanceTo(B), TotalDist - ThirdDist, TotalDist + ThirdDist);
end;

function TPoint.WithinDistance(P: TPoint; Distance: Int32 = 15): Boolean;
begin
  Result := Self.DistanceTo(P) <= Distance;
end;

function TPoint.WithinDistance(PointArray: TPointArray; Distance: Int32 = 15): Boolean; overload;
var
  P: TPoint;
begin
  for P in PointArray do
    if Self.WithinDistance(P, Distance) then
      Exit(True);
end;

function TPoint.WithinDistance(ATPA: T2DPointArray; Distance: Int32 = 15): Boolean; overload;
var
  PointArray: TPointArray;
begin
  for PointArray in ATPA do
    if Self.WithinDistance(PointArray, Distance) then
      Exit(True);
end;

function TPointArray.Random: TPoint; constref;
begin
  Result := Self[System.Random(Low(Self), High(Self))];
end;
