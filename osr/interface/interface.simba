{$DEFINE WL_INTERFACE_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSDropDown = record
    Index: Int32;
    Bounds: TBox;
    Middle: TPoint;
  end;

  TRSDropDownArray = array of TRSDropDown;

//overriden to be able to pick Scroll UI Close button
function TRSInterface.FindButtons(Dimensions: TRSButtonDimensions): TRSButtonArray; override;
var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  I, W, H: Int32;
  B: TBox;
  Color: TCTS1Color;
  Boxes: TBoxArray;
begin
  B := Self.Bounds;

  for Color in Self.ButtonColors do
    if SRL.FindColors(TPA, Color, B) > 0 then
      ATPA += TPA;

  ATPA := ATPA.Merge.Cluster(1);

  for TPA in ATPA do
  begin
    if Length(TPA) < 50 then
      Continue;

    B := TPA.Bounds;
    B.GetDimensions(W, H);

    for I := 0 to High(Dimensions) do
    begin
      if ((W = Dimensions[I].Width) or (Dimensions[I].Width = 0)) and
         ((H = Dimensions[I].Height) or (Dimensions[I].Height = 0)) and
          (TPA.Frameness > 57) then
        Boxes += B;
    end;

    {$IFDEF SRL_DEBUG_FINDBUTTONS}
    Writeln(W, ', ', H);
    {$ENDIF}
  end;

  Boxes.SortByXY(10);

  SetLength(Result, Length(Boxes));
  for I := 0 to High(Boxes) do
  begin
    Result[I].Index := I;
    Result[I].Bounds := Boxes[I];
    Result[I].Middle := Boxes[I].Middle;
    Result[I].EnabledColors := Self.ButtonEnabledColors;
  end;
end;

function TRSInterface.FindDropDown(Dimensions: TRSButtonDimensions): TRSDropDownArray;
  function FindArrow(B: TBox; Color: TCTS0Color; Dimensions: TRSButtonDimensions): Boolean;
  var
    TPA: TPointArray;
    ATPA: T2DPointArray;
    I, W, H: Int32;
    Boxes: TBoxArray;
  begin
    if SRL.FindColors(TPA, Color, B) > 0 then
      ATPA += TPA;

    ATPA := ATPA.Merge.Cluster(1);

    for TPA in ATPA do
    begin
      if Length(TPA) < 50 then
        Continue;

      B := TPA.Bounds;
      B.GetDimensions(W, H);

      for I := 0 to High(Dimensions) do
      begin
        if ((W = Dimensions[I].Width) or (Dimensions[I].Width = 0)) and
           ((H = Dimensions[I].Height) or (Dimensions[I].Height = 0)) and
            (TPA.Frameness = 100) then
          Boxes += B;
      end;
    end;

    Result := Length(Boxes) = 1;
  end;

var
  TPA: TPointArray;
  ATPA: T2DPointArray;
  I, W, H: Int32;
  B: TBox;
  Boxes: TBoxArray;
begin
  B := Self.Bounds;

  if SRL.FindColors(TPA, CTS0(4474438, 5), B) > 0 then
    ATPA += TPA;

  ATPA := ATPA.Merge.Cluster(1);

  for TPA in ATPA do
  begin
    if Length(TPA) < 50 then
      Continue;


    B := TPA.Bounds;
    B.GetDimensions(W, H);

    for I := 0 to High(Dimensions) do
    begin
      if ((W = Dimensions[I].Width) or (Dimensions[I].Width = 0)) and
         ((H = Dimensions[I].Height) or (Dimensions[I].Height = 0)) and
         (TPA.Frameness > 99) and FindArrow(B, CTS0(65536, 1), [[16, 16]]) then
        Boxes += B;
    end;
  end;

  Boxes.SortByXY(10);

  SetLength(Result, Length(Boxes));
  for I := 0 to High(Boxes) do
  begin
    Result[I].Index := I;
    Result[I].Bounds := Boxes[I];
    Result[I].Middle := Boxes[I].Middle;
  end;
end;



function TRSDropDown.GetText: String; constref;
begin
  Result := OCR.Recognize(Self.Bounds, TOCRColorRule.Create([2070783, 1939197]), RS_FONT_PLAIN_11);
end;


function TRSDropDown.FindText(constref Text: String): Boolean; constref; overload;
begin
  Result := OCR.LocateText(Self.Bounds, Text, RS_FONT_PLAIN_11, TOCRAnyColorRule.Create(0), 1);
end;

function TRSDropDown.FindText(Text: TStringArray; out Found: String): Boolean; constref; overload;
var
  I: Int32;
begin
  for I := 0 to High(Text) do
    if Self.FindText(Text[I]) then
    begin
      Found := Text[I];

      Exit(True);
    end;
end;






procedure TMufasaBitmap.DrawDropDowns(DropDowns: TRSDropDownArray);
var
  I: Int32;
begin
  for I := 0 to High(DropDowns) do
  begin
    Self.SetFontSize(20);
    Self.SetFontAntialiasing(False);
    Self.DrawBox(DropDowns[I].Bounds, $FFFFFF);
    Self.DrawText(ToStr(DropDowns[I].Index), DropDowns[I].Bounds, True, $00FF00);
  end;
end;

procedure Debug(DropDowns: TRSDropDownArray); overload;
var
  BMP: TMufasaBitmap;
begin
  BMP.FromClient;
  BMP.DrawDropDowns(DropDowns);
  BMP.Debug;
  BMP.Free;
end;
