{$DEFINE WL_MISC_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
  TRSItemInfo = record
    WikiRealTimeInfo: String;
    WikiMappingInfo: String;
    LastCheckTick: UInt64;

    RSItem: TRSItem;
    ItemID: String;

    HighPrice: Int32;
    LowPrice: Int32;

    StoreValue: Int32;
    LowAlchemy: Int32;
    HighAlchemy: Int32;
    GELimit: Int32;
  end;


procedure TRSItemInfo.Setup;
begin
  WikiRealTimeInfo := GetPage('https://prices.runescape.wiki/api/v1/osrs/latest');
  WikiMappingInfo  := GetPage('https://prices.runescape.wiki/api/v1/osrs/mapping');
  LastCheckTick    := GetTickCount;
end;


function TRSItemInfo.GetRealTime: String;
begin
  Result := WikiRealTimeInfo.After('"' + ItemID + '":').Before('},');
end;

function TRSItemInfo.GetMapping: String;
begin
  Result := WikiMappingInfo.After('"id":' + ItemID + ',').Before('},');
end;

procedure TRSItemInfo.SetItemID;
var
  Str: String;
begin
  Str := VarToStr(RSItem);

  if VarToStr(Str).IsDigit() then
    ItemID := Str
  else
  begin
    ItemID := ItemFinder.ItemNames.GetValues(Str);
    if (ItemID = '') then
      ItemFinder.Fatal('Unknown item: ' + Str);
  end;
end;


procedure TRSItemInfo.SetInfo(Item: TRSItem);
var
  MainStr,Str: String;
begin
  if VarToStr(Item) = VarToStr(RSItem) then
    Exit;

  RSItem := Item;
  Self.SetItemID;

  if (LastCheckTick + 1200000) < GetTickCount then
    Self.Setup;

  MainStr := Self.GetRealTime;
  Str := MainStr.After('"high":').Before(',');
  if Str <> '' then
    HighPrice := StrToInt(Str);

  Str := MainStr.After('"low":').Before(',');
  if Str <> '' then
    LowPrice := StrToInt(Str);


  MainStr := Self.GetMapping;
  Str := MainStr.After('"limit":').Before(',');
  if Str <> '' then
    GELimit := StrToInt(Str);

  Str := MainStr.After('"value":').Before(',');
  if Str <> '' then
    StoreValue := StrToInt(Str);

  LowAlchemy := Round(StoreValue * 0.4);
  HighAlchemy := Round(StoreValue * 0.6);
end;

function TRSItemInfo.GetHighPrice(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := HighPrice;
end;

function TRSItemInfo.GetLowPrice(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := LowPrice;
end;


function TRSItemInfo.GetStoreValue(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := StoreValue;
end;

function TRSItemInfo.GetHighAlchemy(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := HighAlchemy;
end;

function TRSItemInfo.GetLowAlchemy(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := LowAlchemy;
end;

function TRSItemInfo.GetGELimit(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := GELimit;
end;

function TRSItemInfo.GetAveragePrice(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  if ((HighPrice = 0) and (LowPrice = 0)) then
    Exit
  else if HighPrice = 0 then
    Result := LowPrice
  else if LowPrice = 0 then
    Result := HighPrice
  else
    Result := Round((HighPrice + LowPrice) / 2);
end;


function TRSItemInfo.GetHighAlchemyProfit(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := HighAlchemy - Self.GetAveragePrice(Item) - Self.GetAveragePrice('Nature rune');
end;

function TRSItemInfo.GetLowAlchemyProfit(Item: TRSItem): Int32;
begin
  if VarToStr(Item) <> VarToStr(RSItem) then
    Self.SetInfo(Item);

  Result := HighAlchemy - Self.GetAveragePrice(Item) - Self.GetAveragePrice('Nature rune');
end;



function NumberPerHour(Number: UInt64): Int32;
begin
  Result := Round((Number / GetTimeRunning) * ONE_HOUR);
end;

function NumberPerHour(Number: Extended): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number));
end;

function NumberPerHour(Number, TimeRunning: UInt64): Int32; overload;
begin
  Result := Round((Number / TimeRunning) * ONE_HOUR);
end;

function NumberPerHour(Number: Extended; TimeRunning: UInt64): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number), TimeRunning);
end;


procedure TWaspLib.UpdateClientState;
begin
  RSClient.DetectClientMode(True);
  RSClient.ClientModeChanged;
  if Options.IsOpen and (Options.GetCurrentTab = ERSOptionsTab.CONTROLS) then
    MM2MS.ZoomLevel := Options.GetZoomLevel;
end;

var
  ItemInfo: TRSItemInfo;
