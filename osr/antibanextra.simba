{$DEFINE WL_ANTIBANEXTRA_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function Antiban.GetUniqueNumber(Input: Integer): Extended;
var
  RandomCase: Extended;
begin
  RandomCase := (Random + BioHash) * BioHash * BioHash;

  Result := Input * RandomCase;
end;

function Antiban.GetUniqueNumber(Input, Minimum: Integer): Extended; overload;
var
  RandomCase: Extended;
begin
  RandomCase := (Random + BioHash) * BioHash * BioHash;

  Result := Input * RandomCase + Minimum;
end;

function Antiban.GetUniqueAverage(Input, Iterations: Integer): Extended;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input);

  Result := RandomCases.Mean;
end;

function Antiban.GetUniqueAverage(Input, Minimum, Iterations: Integer): Extended; overload;
var
  RandomCases: TExtendedArray;
begin
  for 1 to Iterations do
    RandomCases += Self.GetUniqueNumber(Input);

  Result := RandomCases.Mean + Minimum;
end;



//Makes inventory patterns more common to each player based on their BioHash.
function TRSInventory.RandomPattern: TIntegerArray; override;
var
  Patterns: T2DIntegerArray;
  RandomCase: Double;
begin

  Patterns := [
    DROP_PATTERN_SNAKE, DROP_PATTERN_SPIRAL,
    DROP_PATTERN_REGULAR, DROP_PATTERN_TOPDOWN,
    DROP_PATTERN_SNAKE_R, DROP_PATTERN_TOPDOWN_R
  ];

  RandomCase := (Random + BioHash) * BioHash * BioHash;

  Result := Patterns[Round(RandomCase * Random(0, High(Patterns)))];
end;


