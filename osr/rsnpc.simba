{$DEFINE WL_NPC_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/wasplib.simba}
{$ENDIF}

type
  TRSNpc = record
    Map: TRSWalker;
    WorldLocation: TPoint;       //aprox location on the world map
    Finder: TRSObjectFinder;     //must have color
    UpText: String;
  end;


procedure TRSNpc.SetupFinder();
begin
  Self.Finder.ClusterDistance := 3;
  Self.Finder.Grow := 4;
  Self.Finder.Erode := 2;
end;


// Searches for an object with ObjectFinder in the MainScreen with the
// help of RSWalker. Good when objects don't move and precision is needed.
function TRSNpc.Find(Radius, Expand: Int32 = 0): T2DPointArray;
var
  Loc, Me: TPoint;
  Rect: TRectangle;
  Locations: TPointArray;
begin
  Me := Self.Map.GetMyPos();
  Locations := Self.Map.GetArea(Self.WorldLocation, Radius);
  Locations.Sorted(Me);

  for Loc in Locations do
  begin
    Rect := Self.Map.GetTileMSEx(Me, Loc, 1).Expand(Expand);
    if InterfaceArea.Bounds.Contains(Rect.Bounds) then
    begin
      Result := MainScreen.FindObject(Finder, Rect.Bounds);
      if Length(Result) = 0 then
        Exit;
      Result.SortByMiddle(MainScreen.GetPlayerBox.Middle);
    end;
  end;
end;



// Searches for an object with ObjectFinder in a certain tile and hovers it if found.
function MainScreen.HoverRSNpc(Map: TRSWalker; Tile: TPoint; Color: TCTS2Color; UpText: String; Attempts: Int32 = 2): Boolean;
var
  Finder: TRSObjectFinder;
  RSNpc: TRSNpc;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if not Map.RotateUntilTileVisible(Tile) then
    Exit(False);

  Finder.Colors += Color;
  RSNpc := [Map, Tile, Finder, UpText];
  RSNpc.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSNpc.Find(0, 20);
    if Length(ATPA) = 0 then
      Exit(False);

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    Result := Self.IsUpText(UpText);
    if Result then
      Exit(True);
  end;
end;

// Searches for an object with ObjectFinder in several tiles and hovers it if found.
function MainScreen.HoverRSNpc(Map: TRSWalker; Tile: TPoint; Radius: Int32; Color: TCTS2Color; UpText: String; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSNpc: TRSNpc;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if not Map.RotateUntilTileVisible(Tile) then
    Exit(False);

  Finder.Colors += Color;
  RSNpc := [Map, Tile, Finder, UpText];
  RSNpc.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSNpc.Find(Radius, 20);
    if Length(ATPA) = 0 then
      Exit(False);

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    Result := Self.IsUpText(UpText);
    if Result then
      Exit(True);
  end;
end;

// Searches for an object with 2 colors with ObjectFinder in a certain tile and hovers it if found.
function MainScreen.HoverRSNpc(Map: TRSWalker; Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; UpText: String; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSNpc: TRSNpc;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if not Map.RotateUntilTileVisible(Tile) then
    Exit(False);

  Finder.ColorClusters += [PrimaryColor, SecondaryColor, 30];
  RSNpc := [Map, Tile, Finder, UpText];
  RSNpc.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSNpc.Find(0, 20);
    if Length(ATPA) = 0 then
      Exit(False);

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    Result := Self.IsUpText(UpText);
    if Result then
      Exit(True);
  end;
end;

// Searches for an object with 2 colors with ObjectFinder in several tiles and hovers it if found.
function MainScreen.HoverRSNpc(Map: TRSWalker; Tile: TPoint; Radius: Int32; PrimaryColor, SecondaryColor: TCTS2Color; UpText: String; Attempts: Int32 = 2): Boolean; overload;
var
  Finder: TRSObjectFinder;
  RSNpc: TRSNpc;
  ATPA: T2DPointArray;
  Points: TPointArray;
  Point: TPoint;
begin
  if not Map.RotateUntilTileVisible(Tile) then
    Exit(False);

  Finder.ColorClusters += [PrimaryColor, SecondaryColor, 30];
  RSNpc := [Map, Tile, Finder, UpText];
  RSNpc.SetupFinder;

  for 1 to Attempts do
  begin
    ATPA := RSNpc.Find(Radius, 20);
    if Length(ATPA) = 0 then
      Exit(False);

    Points := ATPA[Random(0, High(ATPA))];
    Point := Points[Random(0, High(Points))];

    Mouse.Move(Point);

    Result := Self.IsUpText(UpText);
    if Result then
      Exit(True);
  end;
end;




// Searches for an object with ObjectFinder in a certain tile and clicks it if found.
function MainScreen.ClickRSNpc(Map: TRSWalker; Tile: TPoint; Color: TCTS2Color; UpText: String; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean;
begin
  if not Self.HoverRSNpc(Map, Tile, Color, UpText, Attempts) then
    Exit(False);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := Self.DidRedClick or ChooseOption.Open();
end;

// Searches for an object with ObjectFinder in several tiles and clicks it if found.
function MainScreen.ClickRSNpc(Map: TRSWalker; Tile: TPoint; Radius: Int32; Color: TCTS2Color; UpText: String; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSNpc(Map, Tile, Radius, Color, UpText, Attempts) then
    Exit(False);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := Self.DidRedClick or ChooseOption.Open();
end;

// Searches for an object with ObjectFinder in a certain tile and clicks it if found.
function MainScreen.ClickRSNpc(Map: TRSWalker; Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; UpText: String; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSNpc(Map, Tile, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := Self.DidRedClick or ChooseOption.Open();
end;

// Searches for an object with ObjectFinder in several tiles and clicks it if found.
function MainScreen.ClickRSNpc(Map: TRSWalker; Tile: TPoint; Radius: Int32; PrimaryColor, SecondaryColor: TCTS2Color; UpText: String; LeftClick: Boolean = True; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSNpc(Map, Tile, Radius, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if LeftClick then
    Mouse.Click(MOUSE_LEFT);
  Result := Self.DidRedClick or ChooseOption.Open();
end;


function MainScreen.SelectRSNpcOption(Map: TRSWalker; Tile: TPoint; Color: TCTS2Color; Action, UpText: String; Attempts: Int32 = 2): Boolean;
begin
  if not Self.HoverRSNpc(Map, Tile, Color, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := Self.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function MainScreen.SelectRSNpcOption(Map: TRSWalker; Tile: TPoint; Radius: Int32; Color: TCTS2Color; Action, UpText: String; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSNpc(Map, Tile, Radius, Color, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := Self.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function MainScreen.SelectRSNpcOption(Map: TRSWalker; Tile: TPoint; PrimaryColor, SecondaryColor: TCTS2Color; Action, UpText: String; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSNpc(Map, Tile, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := Self.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;

function MainScreen.SelectRSNpcOption(Map: TRSWalker; Tile: TPoint; Radius: Int32; PrimaryColor, SecondaryColor: TCTS2Color; Action, UpText: String; Attempts: Int32 = 2): Boolean; overload;
begin
  if not Self.HoverRSNpc(Map, Tile, Radius, PrimaryColor, SecondaryColor, UpText, Attempts) then
    Exit(False);

  if MainScreen.IsUpText(Action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := Self.DidRedClick;
  end
  else if ChooseOption.Open() then
    Result := ChooseOption.Select(Action)
  else
    Result := False;
end;



