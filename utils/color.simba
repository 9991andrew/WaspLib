(*
Color
=====
Color tools.
*)

{$DEFINE WL_COLOR_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
(*
type SRLColors
~~~~~~~~~~~~~~
Type that holds a large amount of color wrappers so you don't have to memorize then.

Some colors are duplicated. They are kept for easy name access.

Example
-------

  WriteLn SRLColors.BLACK;
  WriteLn SRLColors.ORANGE;
  WriteLn SRLColors.BLUE;
*)
  SRLColors = record
  class const
    BLACK         = $000000;
    WHITE         = $FFFFFF;
    ORANGE        = $1F98FF;
    ORANGE_LIGHT  = $3EB7FE;
    RED           = $0000FF;
    YELLOW        = $00FFFF;
    BLUE          = $FF0000;

    GREEN_SPRING  = $80FF00;
    BLUE_OCEAN    = $BE9625;
    CYAN          = $FFFF00;
    DROPDOWN_BLACK= $0C0E0E;
    LIME          = $BE9625;

    TEXT_BLACK  = $000000;
    TEXT_WHITE  = $FFFFFF;
    TEXT_ORANGE = $1F98FF; // Interface titles
    TEXT_ORANGE_LIGHT = $3EB7FE; // Interface titles
    TEXT_BROWN  = $203040; // Make interface
    TEXT_RED    = $0000FF;
    TEXT_YELLOW = $00FFFF;
    TEXT_GREEN  = $00FF00;

    BUTTON_RED  = $2326A0; // Button enabled background. Use ~5 tolerance
    BUTTON_GREY = $516370; // Button disabled background. Use ~5 tolerance

    ITEM_SHADOW = $202030;
    ITEM_BORDER = $010000;
    ITEM_BORDER_SELECTED = $FFFFFF;

    ITEM_TEXT_YELLOW = $00FFFF;
    ITEM_TEXT_WHITE  = $FFFFFF;
    ITEM_TEXT_GREEN  = $80FF00;

    HINT_BACKGROUND = $A0FFFF;
  end;

(*
GetNextCycleColor
~~~~~~~~~~~~~~~~~
.. pascal:: function GetNextCycleColor(color, step: Int32): Int32;

Not currently used for anything, just a fun experiment. Can be used to give an RGB cycle effect.
*)
function GetNextCycleColor(color, step: Int32): Int32;
var
  r, g, b: Int32;
begin
  ColorToRGB(color, r, g, b);

  if (r = 255) and (g = 0) and (b < 255) then
    b += step
  else if (r > 0)   and (g = 0)   and (b = 255) then
    r -= step
  else if (r = 0)   and (g < 255) and (b = 255) then
    g += step
  else if (r = 0)   and (g = 255) and (b > 0) then
    b -= step
  else if (r < 255) and (g = 255) and (b = 0) then
    r += step
  else if (r = 255) and (g > 0)   and (b = 0) then
    g -= step;

  if r < 0    then r := 0;
  if r > 255 then r := 255;

  if g < 0    then g := 0;
  if g > 255 then g := 255;

  if b < 0    then b := 0;
  if b > 255 then b := 255;

  Result := RGBtoColor(r, g, b);
end;

(*
RGB2BGR
~~~~~~~
.. pascal::
  function RGB2BGR(rgb: Int32): Int32;
  function RGB2BGR(rgb: String): Int32; overload;

Converts an RGB color to BGR.
.. note:: credits go to slacky.

Example
-------

  WriteLn RGB2BGR($00FFAA);
*)
function RGB2BGR(rgb: Int32): Int32;
begin
  Result := (rgb and $FF0000) shr 16 or (rgb and $FF) shl 16 or (rgb and $FF00);
end;

function RGB2BGR(rgb: String): Int32; overload;
begin
  rgb := rgb.Replace('0x', '');
  if not rgb.Contains('$') then
    rgb += '$' + rgb;

  Result := RGB2BGR(StrToInt(rgb));
end;
