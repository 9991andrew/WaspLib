(*
Anvil
====
Methods to interact with the Anvil.
*)

{$DEFINE WL_ANVIL_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

function TRSAnvil.MouseItem(item: TRSItem): Boolean;
begin
  Result := Self.ItemFinder.Hover(item);
end;

function TRSAnvil.ClickItem(item: TRSItem): Boolean;
begin
  Result := Self.ItemFinder.Click(item);
end;

function TRSAnvil.InteractItem(item: TRSItem; option: String): Boolean;
begin
  Result := Self.ItemFinder.Interact(item, option);
end;


(*
Anvil.Close
~~~~~~~~~~
.. pascal:: function TRSAnvil.Close(PressEscape: Boolean = False): Boolean;

Closes the Anvil, Depending on `PressEscape` the function will either click the button
or press backspace.

Example
-------

 WriteLn Anvil.Close();
*)
function TRSAnvil.Close(pressEscape: Boolean): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(pressEscape) and WaitUntil(not Self.IsOpen(), RandomLeft(50, 1500), Random(1500, 2000));
end;

function TRSAnvil.Close(Chance: Double = -1): Boolean; overload;
begin
  Result := MainScreen.CloseInterface(Chance);
end;



function TRSAnvil.Smith(item: TRSItem; quantity: Integer = MAKE_QUANTITY_ALL; useKeyboard: Boolean = True): Boolean; overload;
var
  b: TBox;
  tpa: TPointArray;
begin
  if Self.FindItem(item, b) then
  begin
    if SRL.FindColors(tpa, $00FF00, b) = 0 then
      Exit(False); //not enough bars or level for the item.

    Self.SetQuantity(quantity);

    if useKeyboard and (SRL.FindColors(tpa, CTS2(4741482, 1, 0.26, 0.67), b) > 0) then
      Keyboard.PressKey(VK_SPACE)
    else
      Mouse.Click(b, MOUSE_LEFT);

    Result := WaitUntil(not Self.IsOpen(), 100, 3000);
  end;
end;
