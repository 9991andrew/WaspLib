{$DEFINE WL_CONSUMABLES_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
Consumables
===========
Methods to setup consumables.
This are internal methods not made to be used directly, they are usually called by the consumer handlers/managers.
*)



type
(*
type TRSConsumable
~~~~~~~~~~~~~~~~~~

TRSConsumable is the record used in all consumables. It contains base properties all consumables have.
*)
  TRSConsumable = record
    Item: TRSItem;
    Points: UInt32;
    Timer: UInt32;
    BankTab: Int32;
    Cost: Int32;
    IsSetup: Boolean;
  end;

  TRSConsumableArray = array of TRSConsumable;

(*
type TRSFood
~~~~~~~~~~~~

TRSFood is the record used in all consumables that heal the player. This includes food and certain potions.
*)
  TRSFood = type TRSConsumable;
  TRSFoodArray = array of TRSFood;

(*
type TRSPrayerPotion
~~~~~~~~~~~~~~~~~~~~

TRSPrayerPotion is the record used in all consumables that refill prayer. This includes potions and Jangerberries.
*)
  TRSPrayerPotion = type TRSConsumable;
  TRSPrayerPotionArray = array of TRSPrayerPotion;

(*
type TRSEnergyBoost
~~~~~~~~~~~~~~~~~~~

TRSEnergyBoost is the record used in all consumables that refill energy. This includes potions, beers and certain foods.
*)
  TRSEnergyBoost = type TRSConsumable;
  TRSEnergyBoostArray = array of TRSEnergyBoost;

(*
type TRSBoost
~~~~~~~~~~~~~

TRSBoost is the record used in all consumables that boost combat stats.
This type of consumable has a timer to keep track when it lost it's effect after being eaten/drank.
*)
  TRSBoost = record(TRSConsumable)
    Skills: array of ERSSkill;
    LevelsBoost: TIntegerArray;
    Countdown: TCountdown;
  end;
  TRSBoosArray = array of TRSBoost;


const
(*
const FOOD_ARRAY
~~~~~~~~~~~~~~~~
  Global FOOD_ARRAY constant.
  This array holds all types of consumable that heal the player.
*)
  FOOD_ARRAY: TRSItemArray = [
    'Shrimps', 'Cooked chicken', 'Cooked meat', 'Sardine', 'Edible seaweed', 'Bread', 'Herring',
    'Mackerel', 'Choc-ice', 'Trout', 'Cod', 'Pike', 'Roast beast meat',
    'Pineapple punch', 'Salmon', 'Tuna', 'Jug of wine', 'Rainbow fish',
    'Stew', 'Banana stew',
    'Cake(1..3)',
    'Meat pie(1..2)',
    'Bass',
    'Plain pizza(1..2)',
    'Lobster', 'Swordfish', 'Potato with butter',
    'Apple pie(1..2)',
    'Chocolate cake(1..3)',
    'Tangled toad''s legs', 'Chocolate bomb', 'Potato with cheese',
    'Meat pizza(1..2)',
    'Admiral pie(1..2)',
    'Monkfish',
    'Anchovy pizza(1..2)',
    'Cooked karambwan', 'Curry', 'Ugthanki kebab',
    'Guthix rest(1..4)',
    'Dragonfruit pie(1..2)',
    'Mushroom potato', 'Shark', 'Sea turtle',
    'Pineapple pizza(1..2)',
    'Summer pie(1..2)',
    'Wild pie(1..2)',
    'Manta ray', 'Tuna potato', 'Dark crab', 'Anglerfish',
    'Saradomin brew(1..4)'
  ];

(*
const PRAYER_ARRAY
~~~~~~~~~~~~~~~~~~
  Global PRAYER_ARRAY constant.
  This array holds all types of consumable that refill prayer.
*)
  PRAYER_ARRAY: TRSItemArray = [
    'Zamorak brew(1..4)',
    'Sanfew serum(1..4)',
    'Super restore(1..4)',
    'Prayer potion(1..4)',
    'Jangerberries'
  ];

(*
const ENERGY_ARRAY
~~~~~~~~~~~~~~~~~~
  Global ENERGY_ARRAY constant.
  This array holds all types of consumable that refill energy.
*)
  ENERGY_ARRAY: TRSItemArray = [
    'White tree fruit',
    'Winter sq''irkjuice', 'Spring sq''irkjuice',
    'Autumn sq''irkjuice', 'Summer sq''irkjuice',
    'Bandages',
    'Guthix rest(1..4)',
    'Papaya fruit',
    'Energy potion(1..4)',
    'Purple sweets',
    'Summer pie(1..2)',
    'Super energy(1..4)',
    'Stamina potion(1..4)',
    'Strange fruit', 'Mint cake', 'Gout tuber'
  ];

(*
const ANTI_POISON_ARRAY
~~~~~~~~~~~~~~~~~~~~~~~
  Global ANTI_POISON_ARRAY constant.
  This array holds all types of consumable that heal poison.
*)
  ANTI_POISON_ARRAY: TRSItemArray = [
    'Sanfew serum(1..4)',
    'Anti-venom+(1..4)',
    'Anti-venom(1..4)',
    'Antidote++(1..4)',
    'Antidote+(1..4)',
    'Superantipoison(1..4)',
    'Antipoison(1..4)'
  ];

(*
const ANTI_VENOM_ARRAY
~~~~~~~~~~~~~~~~~~~~~~
  Global ANTI_VENOM_ARRAY constant.
  This array holds all types of consumable that heal venom.
*)
  ANTI_VENOM_ARRAY: TRSItemArray = [
    'Anti-venom+(1..4)',
    'Anti-venom(1..4)'
  ];

(*
const ANTI_FIRE_ARRAY
~~~~~~~~~~~~~~~~~~~~~
  Global ANTI_FIRE_ARRAY constant.
  This array holds all types of consumable that protect from dragonfire.
*)
  ANTI_FIRE_ARRAY: TRSItemArray = [
    'Antifire potion(1..4)',
    'Super antifire potion(1..4)',
    'Extended antifire(1..4)',
    'Extended super antifire(1..4)'
  ];

(*
const BOOST_ARRAY
~~~~~~~~~~~~~~~~~
  Global BOOST_ARRAY constant.
  This array holds all types of consumable that boost the player stats.
*)
  BOOST_ARRAY: TRSItemArray = [
    'Super combat potion(1..4)',
    'Super attack(1..4)',
    'Super strength(1..4)',
    'Bastion potion(1..4)',
    'Ranging potion(1..4)'
  ];

(*
const TRASH_ARRAY
~~~~~~~~~~~~~~~~~
  Global TRASH_ARRAY constant.
  This array holds all types of trash items left over from eating/drinking certain types of consumables.
*)
  TRASH_ARRAY: TRSItemArray = [
    'Cocktail glass',
    'Jug',
    'Bowl',
    'Pie dish',
    'Vial',
    'Beer glass',
    'Empty cup'
  ];


(*
GetConsumableArray
~~~~~~~~~~~~~~~~~~
.. pascal:: function GetConsumableArray(ConsumableType: ERSConsumable): TRSItemArray;

Used internally by consumable handlers/managers to retrieve the appropiate consumable array.
*)
function GetConsumableArray(ConsumableType: ERSConsumable): TRSItemArray;
begin
  case ConsumableType of
    ERSConsumable.HEALTH_CONSUMABLE:    Result := FOOD_ARRAY;
    ERSConsumable.PRAYER_CONSUMABLE:    Result := PRAYER_ARRAY;
    ERSConsumable.ENERGY_CONSUMABLE:    Result := ENERGY_ARRAY;
    ERSConsumable.POISON_CONSUMABLE:    Result := ANTI_POISON_ARRAY;
    ERSConsumable.VENOM_CONSUMABLE:     Result := ANTI_VENOM_ARRAY;
    ERSConsumable.ANTI_FIRE_CONSUMABLE: Result := ANTI_FIRE_ARRAY;
    ERSConsumable.BOOST_CONSUMABLE:     Result := BOOST_ARRAY;
  end;
end;

(*
Consumable.SetupFood
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSConsumable.SetupFood;

Used internally by consumable handlers/managers to setup the health consumable records.
*)

procedure TRSConsumable.Setup;
begin
  if Self.IsSetup then
    Exit;

  Self.BankTab := -1;
  Self.Cost := ItemData.GetAverage(Self.Item.GetSingle());
  Self.IsSetup := True;
end;

procedure TRSConsumable.SetupFood;
var
  HPLevel: Int32;
begin
  if Self.IsSetup then
    Exit;

  case Self.Item of
    'Shrimps', 'Cooked chicken', 'Cooked meat':
      Self.Points := 3;
    'Sardine', 'Cake(1..3)':
      Self.Points := 4;
    'Bread', 'Herring', 'Chocolate cake(1..3)', 'Guthix rest(1..4)':
      Self.Points := 5;
    'Mackerel', 'Choc-ice', 'Meat pie(2)', 'Meat pie(1)':
      Self.Points := 6;
    'Trout', 'Cod', 'Plain pizza(1..2)', 'Apple pie(1..2)':
      Self.Points := 7;
    'Pike', 'Roast beast meat', 'Meat pizza(1..2)', 'Admiral pie(1..2)':
      Self.Points := 8;
    'Pineapple punch', 'Salmon', 'Anchovy pizza(1..2)':
      Self.Points := 9;
    'Tuna', 'Dragonfruit pie(1..2)':
      Self.Points := 10;
    'Jug of wine', 'Rainbow fish', 'Stew', 'Banana stew', 'Pineapple pizza(2..(1)',
    'Summer pie(1..2)', 'Wild pie(1..2)':
      Self.Points := 11;
    'Lobster':
      Self.Points := 12;
    'Bass':
      Self.Points := 13;
    'Swordfish', 'Potato with butter':
      Self.Points := 14;
    'Tangled toad''s legs', 'Chocolate bomb':
      Self.Points := 15;
    'Potato with cheese', 'Monkfish':
      Self.Points := 16;
    'Cooked karambwan':
      Self.Points := 18;
    'Curry', 'Ugthanki kebab':
      Self.Points := 19;
    'Mushroom potato', 'Shark':
      Self.Points := 20;
    'Sea turtle':
      Self.Points := 21;
    'Manta ray', 'Tuna potato', 'Dark crab':
      Self.Points := 22;
    'Anglerfish':
      begin
        HPLevel := BaseStats.GetCurrentLevel(ERSSkill.HitPoints);
        case HPLevel of
          10..24: Self.Points := Floor(HPLevel * 0.1) + 2;
          25..49: Self.Points := Floor(HPLevel * 0.1) + 4;
          50..74: Self.Points := Floor(HPLevel * 0.1) + 6;
          75..92: Self.Points := Floor(HPLevel * 0.1) + 8;
          93..99: Self.Points := Floor(HPLevel * 0.1) + 13;
        end;
      end;
    'Saradomin brew(1..4)':
      Self.Points := Floor(BaseStats.GetCurrentLevel(ERSSkill.HitPoints) * 0.15) + 2;
  end;

  Self.Setup;
end;

(*
Consumable.SetupPrayer
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSConsumable.SetupPrayer;

Used internally by consumable handlers/managers to setup the prayer consumable records.
*)
procedure TRSConsumable.SetupPrayer;
begin
  if Self.IsSetup then
    Exit;

  case Self.Item of
    'Prayer potion(1..4)':
      Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 7);
    'Super restore(1..4)':
      Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.25) + 8);
    'Sanfew serum(1..4)':
      Self.Points := Floor((BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.3) + 4);
    'Zamorak brew(1..4)':
      Self.Points := Floor(BaseStats.GetCurrentLevel(ERSSkill.PRAYER) * 0.1);
    'Jangerberries':
      Self.Points := 1;
  end;

  Self.Setup;
end;

(*
Consumable.SetupEnergy
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSConsumable.SetupEnergy;

Used internally by consumable handlers/managers to setup the energy consumable records.
*)
procedure TRSConsumable.SetupEnergy;
begin
  if Self.IsSetup then
    Exit;

  case Self.Item of
    'White tree fruit':
      Self.Points := 5;
    'Winter sq''irkjuice':
      Self.Points := 10;
    'Spring sq''irkjuice':
      Self.Points := 20;
    'Autumn sq''irkjuice':
      Self.Points := 30;
    'Summer sq''irkjuice':
      Self.Points := 40;
    'Bandages':
      Self.Points := 30;
    'Guthix rest(1..4)':
      Self.Points := 5;
    'Papaya fruit':
      Self.Points := 5;
    'Energy potion(1..4)':
      Self.Points := 10;
    'Purple sweets':
      Self.Points := 10;
    'Summer pie(1..2)':
      Self.Points := 10;
    'Super energy(1..4)':
      Self.Points := 20;

    'Stamina potion(1..4)':
      begin
        Self.Points := 20;
        Self.Timer := 2 * ONE_MINUTE;
      end;

    'Strange fruit':
      Self.Points := 30;
    'Mint cake':
      Self.Points := 50;
    'Gout tuber':
      Self.Points := 50;
  end;

  Self.Setup;
end;

(*
Consumable.SetupAntiPoison
~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSConsumable.SetupAntiPoison;

Used internally by consumable handlers/managers to setup the antipoison consumable records.
*)
procedure TRSConsumable.SetupAntiPoison;
begin
  if Self.IsSetup then
    Exit;

  case Self.Item of
    'Sanfew serum(1..4)':
      Self.Timer := 6 * ONE_MINUTE;
    'Anti-venom+(1..4)':
      Self.Timer := 15 * ONE_MINUTE;
    'Anti-venom(1..4)':
      Self.Timer := 12 * ONE_MINUTE;
    'Antidote++(1..4)':
      Self.Timer := 12 * ONE_MINUTE;
    'Antidote+(1..4)':
      Self.Timer := 9 * ONE_MINUTE;
    'Superantipoison(1..4)':
      Self.Timer := 6 * ONE_MINUTE;
    'Antipoison(1..4)':
      Self.Timer := 90 * ONE_SECOND;
  end;

  Self.Setup;
end;

(*
Consumable.SetupAntiVenom
~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSConsumable.SetupAntiVenom;

Used internally by consumable handlers/managers to setup the antivenom consumable records.
*)
procedure TRSConsumable.SetupAntiVenom;
begin
  if Self.IsSetup then
    Exit;

  case Self.Item of
    'Anti-venom+(1..4)':
      Self.Timer := 3 * ONE_MINUTE;
    'Anti-venom(1..4)':
      Self.Timer := 18 * ONE_SECOND;
  end;

  Self.Setup;
end;

(*
Consumable.SetupAntiFire
~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSConsumable.SetupAntiFire;

Used internally by consumable handlers/managers to setup the antifire consumable records.
*)
procedure TRSConsumable.SetupAntiFire;
begin
  if Self.IsSetup then
    Exit;

  case Self.Item of
    'Antifire potion(1..4)', 'Extended super antifire(1..4)':
      Self.Timer := 6 * ONE_MINUTE;
    'Super antifire potion(1..4)':
      Self.Timer := 3 * ONE_MINUTE;
    'Extended antifire(1..4)':
      Self.Timer := 12 * ONE_MINUTE;
  end;

  Self.Setup;
end;

(*
Consumable.SetupBoost
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSConsumable.SetupBoost;

Used internally by consumable handlers/managers to setup the boost consumable records.
*)
procedure TRSConsumable.SetupBoost;
begin
  if Self.IsSetup then
    Exit;

  case Self.Item of
    'Super combat potion(1..4)':
      Self.Timer := 6 * ONE_MINUTE;
    'Super attack potion(1..4)':
      Self.Timer := 6 * ONE_MINUTE;
    'Super strength potion(1..4)':
      Self.Timer := 6 * ONE_MINUTE;
    'Bastion potion(1..4)':
      Self.Timer := 6 * ONE_MINUTE;
    'Ranging potion(1..4)':
      Self.Timer := 6 * ONE_MINUTE;
  end;

  Self.Setup;
end;


function TRSConsumableArray.Contains(Value: TRSItem): Boolean; overload;
var
  C: TRSConsumable;
begin
  for C in Self do
    if C.Item = Value then
      Exit(True);
end;
