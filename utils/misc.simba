{$DEFINE WL_MISC_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
  TRSItemInfo = Pointer;

function TRSItemInfo.GetGEPage(Item: TRSItem): String;
var
  ItemID: String;
begin
  Item := VarToStr(Item);

  if VarToStr(Item).IsDigit() then
    ItemID := Item
  else
  begin
    ItemID := ItemFinder.ItemNames.GetValues(Item);
    if (ItemID = '') then
      ItemFinder.Fatal('Unknown item: ' + Item);
  end;

  Result := GetPage('https://secure.runescape.com/m=itemdb_oldschool/viewitem?obj=' + ItemID);
end;

function TRSItemInfo.GetRSBuddyPage(Item: TRSItem): String;
var
  ItemID: String;
begin
  Item := VarToStr(Item);

  if VarToStr(Item).IsDigit() then
    ItemID := Item
  else
  begin
    ItemID := ItemFinder.ItemNames.GetValues(Item);
    if (ItemID = '') then
      ItemFinder.Fatal('Unknown item: ' + Item);
  end;

  Result := GetPage('https://rsbuddy.com/exchange?id=' + ItemID);
end;

function TRSItemInfo.GetOSRSBoxPage(Item: TRSItem): String;
var
  ItemID: String;
begin
  if VarToStr(Item).IsDigit() then
    ItemID := Item
  else
  begin
    ItemID := ItemFinder.ItemNames.GetValues(Item);
    if (ItemID = '') then
      ItemFinder.Fatal('Unknown item: ' + Item);
  end;

  Result := GetPage('https://www.osrsbox.com/osrsbox-db/items-json/' + ItemID + '.json');
end;

function TRSItemInfo.GetGEPrice(Item: TRSItem): Int32;
var
  Link, Price: String;
begin
  Link := Self.GetGEPage(Item);
  Price := Between('Current Guide Price <span title=''', '''>', Link);
  Price := Replace(Price, ',', '', [rfReplaceAll]);
  if Price.IsDigit then
    Result := StrToInt(Price);
end;

function TRSItemInfo.GetBuyPrice(Item: TRSItem): Int32;
var
  Link, Price: String;
begin
  Link := Self.GetRSBuddyPage(Item);
  Price := Between('buy-price" class="col-md-7">'#13#10, #13#10, Link);
  Price := Replace(Price, ' ', '', [rfReplaceAll]);
  if Price.IsDigit then
    Result := StrToInt(Price);
end;

function TRSItemInfo.GetSellPrice(Item: TRSItem): Int32;
var
  Link, Price: String;
begin

  Link := Self.GetRSBuddyPage(Item);
  Price := Between('sell-price" class="col-md-7">'#13#10, #13#10, Link);
  Price := Replace(Price, ' ', '', [rfReplaceAll]);
  if Price.IsDigit then
    Result := StrToInt(Price);
end;

function TRSItemInfo.GetAveragePrice(Item: TRSItem): Int32;
var
  Buy, Sell: Int32;
begin
  Buy := Self.GetBuyPrice(Item);
  Sell := Self.GetSellPrice(Item);

  if ((Buy = 0) and (Sell = 0)) then
    Result := Self.GetGEPrice(Item)
  else if Buy = 0 then
    Result := Sell
  else if Sell = 0 then
    Result := Buy
  else
    Result := Round((Buy + Sell) / 2);
end;

function TRSItemInfo.GetStoreCost(Item: TRSItem): Int32;
var
  Link: String;
begin
  Link := Self.GetOSRSBoxPage(Item);
  Result := StrToInt(Between('cost": ', ',', Link));
end;

function TRSItemInfo.GetLowAlch(Item: TRSItem): Int32;
begin
  Result := Round(Self.GetStoreCost(Item) * 0.4);
end;

function TRSItemInfo.GetHighAlch(Item: TRSItem): Int32;
begin
  Result := Round(Self.GetStoreCost(Item) * 0.6);
end;


function NumberPerHour(Number: UInt64): Int32;
begin
  Result := Round((Number / GetTimeRunning) * ONE_HOUR);
end;

function NumberPerHour(Number: Extended): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number));
end;

function NumberPerHour(Number, Timer: UInt64): Int32; overload;
begin
  Result := Round((Number / Timer) * ONE_HOUR);
end;

function NumberPerHour(Number: Extended; Timer: UInt64): Int32; overload;
begin
  Result := NumberPerHour(Trunc(Number), Timer);
end;


procedure TWaspLib.UpdateClientState;
begin
  RSClient.DetectClientMode(True);
  RSClient.ClientModeChanged;
  if Options.IsOpen and (Options.GetCurrentTab = ERSOptionsTab.CONTROLS) then
    MM2MS.ZoomLevel := Options.GetZoomLevel;
end;

function TWaspLib.DoAntiban(CheckBreaks: Boolean = True; CheckSleeps: Boolean = True): Boolean;
begin
  Antiban.DismissRandom;
  Self.Activity.Pause();

  try
    Result := Antiban.DoAntiban(CheckBreaks, CheckSleeps);
  finally
    Self.Activity.Resume();
  end;
end;

procedure TWaspLib.ProcessWhileWaiting;
var
  TitleStr, ActionStr, RunTimeStr: String;
  TActionsStr, TActionHourStr, TProfitStr, TProfitHourStr: String;
  TitleLength: Int32;
begin
  TotalProfit := TotalActions * ActionProfit;

  if (GetTickCount - StatsDebugTick) > 1000 then
  begin
    ClearDebug;

    TitleStr := ScriptFile.After(ScriptPath).Before('.simba');
    TitleLength := TitleStr.Len;
    TitleStr := '+' + PadL( ('|  ' + TitleStr + '  |'), 40, '=');
    TitleStr := PadR(TitleStr, 80 - TitleLength, '=') + '+';

    TitleLength := TitleStr.Len;
    ActionStr   := PadR((' Action        : ' + Action), Round(TitleLength/2));
    RunTimeStr  :=       ' Runtime       : ' + SRL.MsToTime(GetTimeRunning, Time_Short);
    TActionsStr := PadR((' Total Actions : ' + ToStr(TotalActions)), Round(TitleLength/2));
    TActionHourStr :=    ' Actions/Hour  : ' + ToStr(NumberPerHour(TotalActions));
    TProfitStr  := PadR((' Total Profit  : ' + SRL.FormatNumber(TotalProfit)), Round(TitleLength/2));
    TProfitHourStr :=    ' Profit/Hour   : ' + SRL.FormatNumber(NumberPerHour(TotalProfit));

    WriteLn(TitleStr);
    Writeln(ActionStr, RunTimeStr);
    Writeln(TActionsStr, TActionHourStr);
    Writeln(TProfitStr, TProfitHourStr);
    if ExtraInfo.Len > 0 then
      Writeln(ExtraInfo);

    WriteLn('+', PadR('-', TitleLength - 2, '-'),'+');

    StatsDebugTick := GetTickCount();
  end;
end;

var
  ItemInfo: TRSItemInfo;
